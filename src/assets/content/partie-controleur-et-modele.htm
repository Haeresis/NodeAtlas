<h2 id="partie-controleur-et-modele">Partie contrôleur et modèle</h2><p>NodeAtlas ne se contente pas uniquement de faciliter la génération de page web en fonction de variables dans les fichiers de variation. NodeAtlas vous permet également d'intéragir avec le contenu des fichiers de variations ou avec le DOM généré en fonction :</p><ul>
<li>des paramètres dans la partie query de l'URL (GET),</li>
<li>des paramètres dans le corps de la requête (POST)</li>
</ul><p>mais également :</p><ul>
<li>de vous connecter à des bases de données,</li>
<li>de maintenir des sessions,</li>
<li>de faire des échanges websockets et</li>
<li>de faire bien plus encore !</li>
</ul><h3 id="cycle-de-vie-et-points-d-ancrage">Cycle de vie et points d'ancrage</h3><p>Le cycle de vie de NodeAtlas est le suivant. D'abord, les ressources se chargent, le serveur démarre, les routes s'initialisent et tout est opérationnel. Puis, à chaque requête HTTP entrante, une réponse est générée. Vous pouvez intervenir grâce à différents points d'ancrage pendant le démarrage, et pendant la création d'une page.</p><p>Voici à quoi peut ressembler un <code>webconfig.json</code> permettant d'atteindre tous les points d'ancrage du cycle de vie d'une page.</p><pre><code class="lang-json">{
    "controllersRelativePath": "controllers",
    "controller": "common.js",
    "routes": {
        "/": {
            "view": "index.htm",
            "controller": "index.json"
        }
    }
}
</code></pre><p><em>Note : Si</em> <code>controllersRelativePath</code> <em>n'est pas présent dans « webconfig.json », par défaut le dossier des contrôleurs est bien</em> <code>controllers</code>. <code>controllersRelativePath</code> <em>est donc utile seulement pour changer le nom/chemin du répertoire.</em></p><p>et voici le détail des endroits ou vous pouvez intervenir pendant :</p><p><em>Le lancement du serveur</em></p><pre><code>┌─[Chargement des modules Node.js]
┊
├─[Chargement des variables d'initialisation]
┊
├─[Chargement des modules npm]
┊
├─[Prise en compte des commandes et de la langue du CLI]
┊
├─[Prise en compte des options de l'API]
┊
└─[Chargement de la langue du CLI]
  ┊
  ├─[Chargement des variables globales]
  ┊
  ├─[Prise en compte des instructions du webconfig]
  ┊
  └─[Chargement du contrôleur commun]
    ┊  _________________________________________
    ├─{Point d'ancrage : &amp;lt;controller&gt;.setModules}
    ┊  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    ├─[Initialisation du serveur]
    ┊  __________________________________________
    ├─{Point d'ancrage : &amp;lt;controller&gt;.setSessions}
    ┊  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    ├─[Initialisation des sessions]
    ┊
    ├─[Initialisation des sockets]
    ┊ ┊  _________________________________________
    ┊ ├─{Point d'ancrage : &amp;lt;controller&gt;.setSockets}_______
    ┊ └─{Point d'ancrage : routes[&amp;lt;controller&gt;].setSockets}
    ┊    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    ┊  ________________________________________________
    ├─{Point d'ancrage : &amp;lt;controller&gt;.setConfigurations}
    ┊  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    └─[Démarrage du serveur]
      ┊
      ├─[Initialisation du moteur de template]
      ┊  ________________________________________
      ├─{Point d'ancrage : &amp;lt;controller&gt;.setRoutes}
      ┊  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      └─[Initialisation des routes]
        ┊
        ∞
</code></pre><p><em>Le traitement des requêtes de chaque route</em></p><pre><code>∞
┊
└─[Traitement d'une requête]
  ┊
  └─[Chargement du contrôleur spécifique]
    ┊  _______________________________________________
    ├─{Point d'ancrage : &amp;lt;controller&gt;.changeVariations}_______
    ├─{Point d'ancrage : routes[&amp;lt;controller&gt;].changeVariations}
    ┊  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    └─[Compilation du moteur de template]
      ┊  ________________________________________
      ├─{Point d'ancrage : &amp;lt;controller&gt;.changeDom}_______
      ├─{Point d'ancrage : routes[&amp;lt;controller&gt;].changeDom}
      ┊  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      └─[Envoi de la réponse]
        ┊
        ∞
</code></pre><h4 id="changevariations">changeVariations</h4><p>Pour intercepter les variations, vous pouvez soit utiliser le contrôleur commun pour tout le site et/ou également le contrôleur par page.</p><p><code>changeVariations(next, locals, request, response)</code> est une fonction a <code>exports</code> et fournissant :</p><ul>
<li>L'objet <code>NA</code> en tant que <code>this</code>.</li>
<li>En premier paramètre la fonction de retour <code>next()</code>.</li>
<li>En deuxième paramètre l'objet <code>locals</code> contenant entre autre la variation <code>locals.common</code> pour accéder aux variations communes et la variation <code>locals.specific</code> pour accéder aux variations spécifiques.</li>
<li>En troisième paramètre l'objet <code>request</code> qui va être faites.</li>
<li>En quatrième paramètre l'objet <code>response</code> faites pour cette page.</li>
</ul><p>Voici un exemple utilisant les deux points d'entrée, d'abord la commune à plusieurs pages, puis celle de chaque page :</p><pre><code class="lang-json">{
    "urlRelativeSubPath": "example",
    "controller": "common.js",
    "variation": "common.json",
    "routes": {
        "/": {
            "view": "index.htm",
            "variation": "index.json",
            "controller": "index.js"
        }
    }
}
</code></pre><p>avec cet ensemble de fichier :</p><pre><code>├─ variations/
│  ├─ common.json
│  └─ index.json
├─ controllers/
│  ├─ common.js
│  └─ index.js
├─ views/
│  ├─ partials/
│  │  ├─ head.htm
│  │  └─ foot.htm
│  └─ index.htm
└─ webconfig.json
</code></pre><p>En demandant la page <code>http://localhost/example/?title=Haeresis</code> en POST avec une variable <code>example=Ceci+est+un+test</code> dans le corps de requête, les fichiers suivants (entre autre) seront utilisés :</p><p><em>variations/common.json</em></p><pre><code class="lang-json">{
    "titleWebsite": "Titre du site"
}
</code></pre><p><em>variations/index.json</em></p><pre><code class="lang-json">{
    "titlePage": "Bienvenue",
    "content": "&amp;lt;p&gt;C'est la page d'accueil.&amp;lt;/p&gt;"
}
</code></pre><p><em>views/index.htm</em></p><pre><code class="lang-html">    &amp;lt;?- include("partials/head.htm") ?&gt;

    &amp;lt;div class="title"&gt;&amp;lt;?- common.titleWebsite ?&gt;&amp;lt;/div&gt;

    &amp;lt;div&gt;
        &amp;lt;h1&gt;&amp;lt;?- specific.titlePage ?&gt;&amp;lt;/h1&gt;
        &amp;lt;?- specific.content ?&gt;
    &amp;lt;/div&gt;

    &amp;lt;?- include("partials/foot.htm") ?&gt;
</code></pre><p><em>controllers/common.js</em></p><pre><code class="lang-js">// On intervient avant que les variables soient injectées dans le système de template.
// Ce code sera exécuté pour toute request HTTP, toute page confondue.
exports.changeVariations = function (next, locals, request, response) {

    // Ici on modifie les variables de locals.

    console.log(locals.common.titleWebsite); // "Titre du site"
    console.log(locals.specific.titlePage); // "Bienvenue"
    console.log(locals.specific.content); // "C'est la page d'accueil."

    console.log("urlRootPath", locals.urlRootPath); // "http://localhost"
    console.log("urlSubPath", locals.urlSubPath); // "/example"
    console.log("urlBasePath", locals.urlBasePath); // "http://localhost/example"
    console.log("urlFilePath", locals.urlFilePath); // "/"
    console.log("urlQueryPath", locals.urlQueryPath); // "?title=Haeresis"
    console.log("urlPath", locals.urlPath); // "http://localhost/example/?title=Haeresis"

    if (request.query["title"]) {
        locals.specific.titlePage = locals.specific.titlePage + " " + request.query.title;
    }
    if (request.body["example"]) {
        locals.specific.content = request.body.example;
    }

    console.log(locals.common.titleWebsite); // "Titre du site"
    console.log(locals.specific.titlePage); // "Bienvenue Haeresis"
    console.log(locals.specific.content); // "Ceci est un test"

    // On passe à la suite modifications.
    next();
};
</code></pre><p><em>controllers/index.js</em></p><pre><code class="lang-js">// On intervient avant que les variables soient injectées dans le système de template.
// Ce code sera exécuté uniquement lors de la demande de la page « / ».
exports.changeVariations = function (next, locals, request, response) {

    // Ici on modifie les variables de locals.

    console.log(locals.common.titleWebsite); // "Titre du site"
    console.log(locals.specific.titlePage); // "Bienvenue Haeresis"
    console.log(locals.specific.content); // "Ceci est un test"

    locals.common.titleWebsite = "C'est l'accueil, c'est tout.";
    locals.specific.content = "C'est l'accueil, c'est tout.";

    console.log(locals.common.titleWebsite); // "C'est l'accueil, c'est tout."
    console.log(locals.specific.titlePage); // "Bienvenue Haeresis"
    console.log(locals.specific.content); // "C'est l'accueil, c'est tout."

    // On passe à la suite.
    next();
};
</code></pre><p>ce qui produit la sortie suivante :</p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;C'est l'accueil, c'est tout.&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="title"&gt;C'est l'accueil, c'est tout.&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;h1&gt;Bienvenue Haeresis&amp;lt;/h1&gt;
            C'est l'accueil, c'est tout.
        &amp;lt;/div&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><p>Si vous décidez de désabonner la variation spécifique avec le webconfig suivant :</p><pre><code class="lang-json">{
    "controller": "common.js",
    "variation": "common.json",
    "routes": {
        "/": {
            "view": "index.htm",
            "variation": "index.json"
        }
    }
}
</code></pre><p>alors la sortie sera :</p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;Titre du site&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="title"&gt;Titre du site&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;h1&gt;Bienvenue Haeresis&amp;lt;/h1&gt;
            Ceci est un test
        &amp;lt;/div&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><h4 id="changedom">changeDom</h4><p>Pour intercepter le DOM avant qu'il ne soit renvoyé, vous pouvez soit utiliser le contrôleur commun pour tout le site et/ou également le contrôleur par page.</p><p><code>changeDom(next, locals, request, response)</code> est une fonction a <code>exports</code> et fournissant :</p><ul>
<li>L'objet <code>NA</code> en tant que <code>this</code>.</li>
<li>En premier paramètre la fonction de retour <code>next([$])</code> acceptant optionellement en premier paramètre la function <code>$</code> utilisée pour manipuler le DOM Virtuel.</li>
<li>En deuxième paramètre l'objet <code>locals</code> contenant entre autre la string <code>locals.dom</code> contenant la réponse ou la function <code>locals.virtualDom()</code> générant un Dom Virtuel.</li>
<li>En troisième paramètre l'objet <code>request</code> qui va être faites.</li>
<li>En quatrième paramètre l'objet <code>response</code> faites pour cette page.</li>
</ul><p>Voici un exemple utilisant les deux points d'entrée, d'abord la commune à plusieurs pages, puis celle de chaque page :</p><pre><code class="lang-json">{
    "controller": "common.js",
    "variation": "common.json",
    "routes": {
        "/": {
            "view": "index.htm",
            "variation": "index.json",
            "controller": "index.js"
        }
    }
}
</code></pre><p>avec cet ensemble de fichier :</p><pre><code>├─ variations/
│  ├─ common.json
│  └─ index.json
├─ controllers/
│  ├─ common.js
│  └─ index.js
├─ views/
│  └─ index.htm
└─ webconfig.json
</code></pre><p>En demandant la page <code>http://localhost/</code> les fichiers suivants (entre autre) seront utilisés :</p><p><em>variations/common.json</em></p><pre><code class="lang-json">{
    "titleWebsite": "Titre du site"
}
</code></pre><p><em>variations/index.json</em></p><pre><code class="lang-json">{
    "titlePage": "Bienvenue",
    "content": "&amp;lt;p&gt;C'est la page d'accueil.&amp;lt;/p&gt;"
}
</code></pre><p><em>views/index.htm</em></p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;&amp;lt;?- common.titleWebsite ?&gt;&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="title"&gt;&amp;lt;?- common.titleWebsite ?&gt;&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;h1&gt;&amp;lt;?- specific.titlePage ?&gt;&amp;lt;/h1&gt;
            &amp;lt;?- specific.content ?&gt;
        &amp;lt;/div&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><p><em>controllers/common.js</em></p><pre><code class="lang-js">// On intervient avant que le DOM ne soit renvoyé au Client.
// Ce code sera exécuté uniquement lors de la demande de la page « / ».
exports.changeDom = function (next, locals, request, response) {
    // Transformer la chaîne HTML en DOM virtuel.
    var dom = locals.virtualDom();

    // Après tous les h1 de la sortie HTML « dom »,
    Array.prototype.forEach.call(dom.window.document.getElementsByTagName("h1"), function (h1) {

        // ...on créé une div,
        var div = dom.window.document.createElement('div');

        // ... on injecte le contenu du h1 dans la div,
        div.innerHTML = h1.innerHTML;
        h1.parentNode.insertBefore(div, h1.nextElementSibling);

        // ...et supprime le h1.
        h1.parentNode.removeChild(h1);
    });

    // On retourne les modifications pour qu'elles redeviennet une chaîne HTML.
    next(dom);
};
</code></pre><p><em>controllers/index.js</em></p><pre><code class="lang-js">// On intervient avant que le DOM ne soit renvoyé au Client.
// Ce code sera exécuté uniquement lors de la demande de la page « / ».
exports.changeDom = function (next, locals, request, response) {
    var NA = this,
        jsdom = NA.modules.jsdom, // Récupération de jsdom pour parcourir le DOM virtuel.
        dom = new jsdom.JSDOM(locals.dom); // On charge les données pour les manipuler comme un DOM.

    // On modifie tous les contenu des noeuds avec la classe `.title`.
    dom.window.document.getElementsByClassName("title")[0].textContent = "Modification de Contenu";

    // On recrée une nouvelle sortie HTML avec nos modifications.
    locals.dom = dom.serialize();

    // On passe à la suite.
    next();
};
</code></pre><p>ce qui produit la sortie suivante :</p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8"&gt;
        &amp;lt;title&gt;Titre du site&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="title"&gt;Modification de Contenu&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;div&gt;Bienvenue&amp;lt;/div&gt;
            &amp;lt;p&gt;C'est la page d'accueil.&amp;lt;/p&gt;
        &amp;lt;/div&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><h4 id="setsockets">setSockets</h4><p>Pour maintenir une connexion temps réel entre votre partie Cliente et Serveur à travers toutes les pages ouvertes sur tous les navigateurs de tous les ordinateurs sur le web, vous aller pouvoir définir vos websockets ici <a href="partie-controleur-et-modele.html#echange-client-serveur-en-temps-reel-avec-websockets">Plus de détail dans la partie Socket.IO</a>.</p><p><code>setSockets()</code> est une fonction a <code>exports</code> et fournissant :</p><ul>
<li>L'objet <code>NA</code> en tant que <code>this</code>.</li>
</ul><p>Voici un exemple utilisant les deux points d'entrée, d'abord la commune à plusieurs pages, puis celle de chaque page :</p><pre><code class="lang-json">{
    "socketClientFile": "/node-atlas/socket.io.js",
    "socketServerOptions": { transports: ['polling', 'websocket'] },
    "controller": "common.js",
    "routes": {
        "/": {
            "view": "index.htm",
            "controller": "index.js"
        }
    }
}
</code></pre><p>avec cet ensemble de fichier :</p><pre><code>├─ assets/
│  └─ javascripts/
│     └─ index.js
├─ controllers/
│  ├─ common.js
│  ├─ index.js
│  └─ test.js
├─ views/
│  └─ index.htm
└─ webconfig.json
</code></pre><p>En demandant la page <code>http://localhost/</code> les fichiers suivants (entre autre) seront utilisés :</p><p><em>views/index.htm</em></p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;Exemple Websocket&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="layout"&gt;
            &amp;lt;div class="content"&gt;&amp;lt;/div&gt;
            &amp;lt;div class="field"&gt;Tape du texte : &amp;lt;input class="input" type="text"&gt;&amp;lt;/div&gt;
        &amp;lt;/div&gt;
        &amp;lt;script type="text/javascript" src="socket.io/socket.io.js"&gt;&amp;lt;/script&gt;
        &amp;lt;script type="text/javascript" src="node-atlas/socket.io.js"&gt;&amp;lt;/script&gt;
        &amp;lt;script type="text/javascript" src="javascripts/test.js"&gt;&amp;lt;/script&gt;
        &amp;lt;script type="text/javascript" src="javascripts/index.js"&gt;&amp;lt;/script&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><p><em>Note : Si</em> <code>socketClientFile</code> <em>et</em> <code>socketServerOptions</code> <em>ne sont pas présent dans <code>webconfig.json</code>, par défaut le fichier client et les options serveurs pour configurer les sockets sont bien</em> <code>/node-atlas/socket.io.js</code> <em>et</em> <code>{ transports: ['polling', 'websocket'] }</code>. <em>Il sont donc utiles seulement pour changer le chemin du fichier ou les transports des sockets permis. Si vous mettez <code>socketClientFile</code> à <code>false</code>, le fichier client ne sera pas accessible.</em></p><p><em>assets/javascripts/test.js</em></p><pre><code class="lang-js">(function (expose, factory) {
    if (typeof module !== 'undefined' &amp;&amp; module.exports) {
        module.exports = factory;
    } else {
        expose.Test = factory;
    }
}(this, function () {
    if (NA.isClient) {
        console.log("Client");
    } else {
        console.log("Serveur");
    }
}));
</code></pre><p><em>controllers/common.js</em></p><pre><code class="lang-js">// On référence les actions de réponse et d'envoi globaux côté serveur.
// Ce code sera exécuté pour toute entrée Websocket entrante.
exports.setSockets = function () {
    var NA = this,
        io = NA.io;

    io.on('connection', function (socket) {
        console.log("Un onglet est ouvert.");
        socket.on('disconnect', function () {
            console.log("Un onglet est fermé.");
        });
    });
};
</code></pre><p><em>controllers/index.js</em></p><pre><code class="lang-js">// On référence les actions de réponse et d'envoi globaux côté serveur.
// Ce code sera exécuté pour toute entrée Websocket entrante.
exports.setSockets = function () {
    var NA = this,
        path = NA.modules.path,
        io = NA.io;

    require(path.join(NA.serverPath, NA.webconfig.assetsRelativePath, "javascripts/test.js"))(); // display `Serveur`

    // Attendre un lien valide entre client et serveur
    io.sockets.on("connection", function (socket) {

        // Quelqu'un nous informe que le texte à changé.
        socket.on("update-text", function (data) {

            // On informe les autres que le texte à changé.
            io.sockets.emit("update-text", data);
        });
    });
};
</code></pre><p><em>assets/javascripts/index.js</em></p><pre><code class="lang-js">var content = document.getElementsByClassName("content")[0],
    input = document.getElementsByClassName("input")[0];

Test(); // display `Client`

// On alerte les autres de nos modifications.
input.addEventListener("keyup", function () {
    content.innerHTML = input.value;
    NA.socket.emit("update-text", {
        text: input.value
    });
});

// On récupère les modifications des autres.
NA.socket.on("update-text", function (data) {
    content.innerHTML = data.text;
    input.value = data.text;
});
</code></pre><p>Vous pourrez, en ouvrant divers navigateurs, et divers onglet, constaté que tout est bien mis à jour chez tout le monde. Chaque nouvel ongle ouvert affiche sur le serveur le message de connexion, et chaque onglet fermé, le message de deconnexion sur la console serveur.</p><p><em>Note : Vous pouvez changer le fichier <code>node-atlas/socket.io.js</code> par un fichier fournis par vous-même pour changer la variable <code>optionsSocket</code>. Vous pouvez aussi changer la valeur de <code>NA.optionsSocket</code> côté client (avant l'insertion de <code>node-atlas/socket.io.js</code>) avec un objet d'options personnalisées.</em></p><h4 id="setmodules">setModules</h4><p>Pour charger d'autres modules qui ne sont pas fournis avec NodeAtlas vous pouvez utiliser le contrôleur commun pour tout le site afin de les charger une seule fois et de les rendres disponible dans tous vos contrôleurs.</p><p><code>setModules()</code> est une fonction a <code>exports</code> et fournissant :</p><ul>
<li>L'objet <code>NA</code> en tant que <code>this</code>.</li>
</ul><p>Voici un exemple utilisant un module externe à NodeAtlas :</p><pre><code class="lang-json">{
    "controller": "common.js",
    "routes": {
        "/": {
            "view": "index.htm",
            "controller": "index.js"
        }
    }
}
</code></pre><p>avec cet ensemble de fichier :</p><pre><code>├─ controllers/
│  ├─ common.js
│  └─ index.js
├─ views/
│  └─ index.htm
└─ webconfig.json
</code></pre><p>En demandant la page <code>http://localhost/</code> les fichiers suivants (entre autre) seront utilisés :</p><p><em>views/index.htm</em></p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;Test Module&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="title"&gt;Test Module&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;h1&gt;Test Module&amp;lt;/h1&gt;
            &amp;lt;?- example ?&gt;
        &amp;lt;/div&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><p><em>controllers/common.js</em></p><pre><code class="lang-js">// On intervient avant que la phase de chargement des modules ne soit achevée.
// Ce code sera exécuté au lancement de NodeAtlas.
exports.setModules = function () {
    // Récupérer l'instance « NodeAtlas » du moteur.
    var NA = this;

    // Associations de chaque module pour y avoir accès partout.
    NA.modules.marked = require('marked');
};
</code></pre><p><em>controllers/index.js</em></p><pre><code class="lang-js">// On intervient avant que les variables soient injectées dans le système de template.
// Ce code sera exécuté uniquement lors de la demande de la page « / ».
exports.changeVariations = function (next, locals) {
    // Utiliser « NodeAtlas » depuis le moteur.
    var NA = this,
        marked = NA.modules.marked;

    locals.example = marked("J'utilise __markdown__.");

    // On passe à la suite.
    next();
};
</code></pre><p>ce qui produit la sortie suivante :</p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;Test Module&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="title"&gt;Test Module&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;h1&gt;Test Module&amp;lt;/h1&gt;
            &amp;lt;p&gt;I am using &amp;lt;strong&gt;markdown&amp;lt;/strong&gt;.&amp;lt;/p&gt;
        &amp;lt;/div&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><h4 id="setconfigurations">setConfigurations</h4><p>Pour configurer le serveur web de NodeAtlas (<a href="http://expressjs.com/">ExpressJs</a>) vous pouvez utiliser le contrôleur commun pour tout le site afin faire vos modifications avant le démarrage du serveur.</p><p><code>setConfigurations(next)</code> est une fonction a <code>exports</code> et fournissant :</p><ul>
<li>L'objet <code>NA</code> en tant que <code>this</code>.</li>
<li>En premier paramètre la fonction de retour <code>next()</code>.</li>
</ul><p>Voici un exemple utilisant un middleware pour <a href="http://expressjs.com/">ExpressJs</a> :</p><pre><code class="lang-json">{
    "controller": "common.js",
    "routes": {
        "/": {
            "view": "index.htm",
            "controller": "index.js"
        }
    }
}
</code></pre><p>avec cet ensemble de fichier :</p><pre><code>├─ controllers/
│  ├─ common.js
│  └─ index.js
├─ views/
│  └─ index.htm
└─ webconfig.json
</code></pre><p>En demandant la page <code>http://localhost/</code> les fichiers suivants (entre autre) seront utilisés :</p><p><em>views/index.htm</em></p><pre><code class="lang-html">&amp;lt;?- content ?&gt;
</code></pre><p><em>controllers/common.js</em></p><pre><code class="lang-js">// On intervient au niveau du serveur avant que celui-ci ne soit démarré.
// Ce code sera exécuté au lancement de NodeAtlas.
exports.setConfigurations = function (next) {
    // Récupérer l'instance « NodeAtlas » du moteur.
    var NA = this;

    // Middleware utilisé lors de chaque requête.
    NA.express.use(function (request, response, next) {
        response.setHeader("X-Frame-Options", "ALLOW-FROM https://www.lesieur.name/");
        next();
    });

    // On ré-injecte les modifications.
    next();
};
</code></pre><p><em>controllers/index.js</em></p><pre><code class="lang-js">// On intervient avant que les variables soient injectées dans le moteur de template.
// Ce code sera exécuté uniquement lors de la demande de la page « / ».
exports.changeVariations = function (next, locals) {

    // On prépare le fichier pour un affichage JSON.
    locals.routeParameters.headers = {
        "Content-Type": "application/json; charset=utf-8"
    };
    locals.content = JSON.stringify(locals, null, "    ");

    // On passe à la suite.
    next();
};
</code></pre><p>ce qui produit la sortie suivante :</p><pre><code class="lang-html">{
    "urlRootPath": "http://localhost",
    "urlSubPath": "",
    "urlBasePath": "http://localhost",
    "urlFilePath": "/",
    "urlQueryPath": "",
    "urlPath": "http://localhost/",
    "params": {},
    "query": {},
    "body": {},
    "routeParameters": { /* ... */ },
    "route": "/",
    "webconfig": { /* ... */ }
}
</code></pre><h4 id="setsessions">setSessions</h4><p>Pour configurer les sessions client-serveur de NodeAtlas vous pouvez utiliser le contrôleur commun pour tout le site afin de définir vos sessions avant le démarrage du serveur. Voici un exemple de management de Session avec <a href="http://redis.io/">Redis</a>.</p><p><code>setSessions(next)</code> est une fonction a <code>exports</code> et fournissant :</p><ul>
<li>L'objet <code>NA</code> en tant que <code>this</code>.</li>
<li>En premier paramètre la fonction de retour <code>next()</code>.</li>
</ul><p>Voici l'ensemble de fichier suivant :</p><pre><code>├─ controllers/
│  └─ common.js
├─ views/
│  └─ index.htm
├─ variations/
│  ├─ common.json
│  └─ index.json
└─ webconfig.json
</code></pre><p>Avec le <code>webconfig.json</code> :</p><pre><code class="lang-json">{
    "controller": "common.js",
    "routes": {
        "/": {
            "view": "index.htm"
        }
    }
}
</code></pre><p>et avec le fichier « common.js » contenant par exemple :</p><pre><code class="lang-js">// On intervient avant que la phase de chargement des modules ne soit achevée.
// Ce code sera exécuté au lancement de NodeAtlas.
exports.setModules = function () {
    // Récupérer l'instance « NodeAtlas » du moteur.
    var NA = this;

    // Associations de chaque module pour y avoir accès partout.
    NA.modules.RedisStore = require('connect-redis');
};

// On intervient au niveau du serveur pendant la configuration des sessions.
// Ce code sera exécuté au lancement de NodeAtlas.
exports.setSessions = function (next) {
    var NA = this,
        session = NA.modules.session,
        RedisStore = NA.modules.RedisStore(session);

    // On remplace la session par default.
    NA.sessionStore = new RedisStore();

    // On redonne la main à NodeAtlas pour la suite.
    next();
};
</code></pre><h4 id="setroutes">setRoutes</h4><p>Pour configurer les routes de NodeAtlas dynamiquement vous pouvez utiliser le contrôleur commun pour tout le site afin de les charger une seule fois et de les rendres disponible dans tous vos contrôleurs.</p><p><code>setRoutes(next)</code> est une fonction a <code>exports</code> et fournissant :</p><ul>
<li>L'objet <code>NA</code> en tant que <code>this</code>.</li>
<li>En premier paramètre la fonction de retour <code>next()</code>.</li>
</ul><p>Voici l'ensemble de fichier suivant :</p><pre><code>├─ controllers/
│  └─ common.js
├─ views/
│  ├─ content.htm
│  └─ index.htm
├─ variations/
│  └─ common.json
└─ webconfig.json
</code></pre><p>Avec le <code>webconfig.json</code> :</p><pre><code class="lang-json">{
    "controller": "common.js",
    "variation": "common.json",
    "routes": {
        "/index.html": {
            "view": "index.htm"
        }
    }
}
</code></pre><p>et avec le fichier « common.js » contenant par exemple :</p><pre><code class="lang-json">// On intervient au niveau des routes pendant qu'elles sont ajoutées.
// Ce code sera exécuté au lancement de NodeAtlas.
exports.setRoutes = function (next) {

    // On récupère l'instance de NodeAtlas en cours.
    var NA = this,

        // Et nous récupérons les routes en provenance du webconfig...
        route = NA.webconfig.routes;

    // ...pour ajouter la route "/content.html" à la liste de nos routes.
    route["/content.html"] = {
        "view": "content.htm"
    };

    // On redonne la main à NodeAtlas pour la suite.
    next();
};
</code></pre><h3 id="echange-client-serveur-en-temps-reel-avec-websockets">Échange client-serveur en temps réel avec websockets</h3><p>Afin de conserver une liaison ouverte entre la partie Cliente et la partie Serveur de vos applications, NodeAtlas utilise <a href="http://socket.io/">Socket.IO</a> dont vous trouverez plus de détail sur le site officiel.</p><p>Grâce à cela, vous pourrez changer des informations en temps réel sur votre page, mais également sur toutes les autres pages ouvertes à travers tous les autres navigateurs.</p><p>Avec l'ensemble de fichier suivant :</p><pre><code>├─ assets/
│  └─ javascripts/
│     └─ index.js
├─ controllers/
│  └─ index.js
├─ variations/
│  ├─ common.json
│  └─ index.json
├─ views/
│  ├─ partials/
│  │  └─ index.htm
│  └─ index.htm
└─ webconfig.json
</code></pre><p>Contenant le <code>webconfig.json</code> suivant :</p><pre><code class="lang-json">{
    "variation": "common.json",
    "routes": {
        "/": {
            "view": "index.htm",
            "variation": "index.json",
            "controller": "index.js"
        }
    }
}
</code></pre><p>et contenant les fichiers de template suivant :</p><p><em>views/partials/index.htm</em></p><pre><code class="lang-html">        &amp;lt;div class="title"&gt;&amp;lt;?- common.titleWebsite ?&gt;&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;h1&gt;&amp;lt;?- specific.titlePage ?&gt;&amp;lt;/h1&gt;
            &amp;lt;?- specific.content ?&gt;
            &amp;lt;div&gt;&amp;lt;?- new Date() ?&gt;&amp;lt;/div&gt;
        &amp;lt;/div&gt;
        &amp;lt;button&gt;Update&amp;lt;/button&gt;
</code></pre><p><em>Note : Chaque clique sur <code>button</code> raffraichira le contenu de <code>views/partials/index.htm</code>.</em></p><p><em>views/index.htm</em></p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;&amp;lt;?- common.titleWebsite ?&gt;&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="layout"&gt;
            &amp;lt;?- include('partials/index.htm') ?&gt;
        &amp;lt;/div&gt;
        &amp;lt;script type="text/javascript" src="socket.io/socket.io.js"&gt;&amp;lt;/script&gt;
        &amp;lt;script type="text/javascript" src="node-atlas/socket.io.js"&gt;&amp;lt;/script&gt;
        &amp;lt;script type="text/javascript" src="javascripts/index.js"&gt;&amp;lt;/script&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><p><em>Note : On construit ici la page d'accueil <code>/</code>.</em></p><p>ainsi que les fichiers de variations suivant :</p><p><em>variations/common.json</em></p><pre><code class="lang-json">{
    "titleWebsite": "Exemple Socket.IO"
}
</code></pre><p><em>variations/index.json</em></p><pre><code class="lang-json">{
    "titlePage": "Date",
    "content": "&amp;lt;p&gt;La date actuelle est :&amp;lt;/p&gt;"
}
</code></pre><p>Jusque là, rien d'inhabituel et tout fonctionnerait sans partie contrôleur. Mais nous allons mettre en place la communication via Socket.IO côté Serveur puis côté Client.</p><p>Côté serveur, nous utiliserons le contrôleur commun suivant :</p><p><em>controllers/index.js</em></p><pre><code class="lang-js">// Intégralité des actions Websocket possible avec `setSockets`.
exports.setSockets = function () {
    var NA = this,
        io = NA.io;

    // Dès qu'on a un lien valide entre le client et notre serveur...
    io.sockets.on("connection", function (socket) {

        // ...rester à l'écoute de la demande « create-article-button »...
        socket.on("server-render", function (data) {
            var sessionID = socket.request.sessionID,
                session = socket.request.session,
                locals = {};

            // On récupère les variations spécifiques dans la bonne langue.
            locals = NA.specific("index.json", data.lang, locals);

            // On récupère les variations communes dans la bonne langue.
            locals = NA.common(data.lang, locals);

            // On récupère le fragment HTML depuis le dossier `viewsRelativePath` et on applique les variations.
            data.render = NA.view("partials/index.htm", locals);

            // Et on répond à tous les clients avec un jeu de donnée dans data.
            io.sockets.emit("server-render", data);
        });
    });
};
</code></pre><p>Quand au côté client, nous utiliserons les fichiers suivant :</p><p><em>assets/javascripts/index.js</em></p><pre><code class="lang-js">var html = document.getElementsByTagName("html")[0],
    layout = document.getElementsByClassName("layout")[0];

// On associe sur le bouton l'action de communiquer avec le serveur en cliquant dessus.
function setServerRender() {
    var button = document.getElementsByTagName("button")[0];
    button.addEventListener("click", function () {
        NA.socket.emit("server-render", {
            lang: html.getAttribute("lang")
        });
    });
}

// On affecte l'action au bouton.
setServerRender();

// Quand le serveur répond après notre demande auprès de lui...
NA.socket.on("server-render", function (data) {

    // ...on met à jour le contenu...
    layout.innerHTML = data.render;

    // ...et ré-affectons l'action au bouton du nouveau contenu.
    setServerRender();
});
</code></pre><p>Lancer votre projet et rendez-vous à l'adresse <code>http://localhost/</code> dans deux onglets différent, voir même, dans deux navigateurs différent. Vous constaterez alors qu'à chaque clique sur « Update », la page se remettra à jour (comme le montre la date courante) sur tous les onglets ouvert.</p><p>Grâce à <code>NA.specific</code>, <code>NA.common</code> et <code>NA.view</code>, il est possible de générer une nouvelle compilation d'une vue et d'une variation commune et spécifique.</p><p>Si <code>data.lang</code> dans notre exemple est de type <code>undefined</code>, alors les fichiers seront cherchés à la racine. Si <code>locals</code> est de type <code>undefined</code> alors un objet contenant uniquement le scope demandé sera renvoyé.</p><p>Note : pour permettre à <code>view</code> d'utiliser le moteur Pug au lieu de celui d'EJS, il faut mettre la valeur <code>locals.pug</code> à <code>true</code> avant d'utiliser <code>NA.common</code> et <code>NA.specific</code>.</p><h3 id="utiliser-une-base-de-donnees-mysql-sql">Utiliser une base de données MySQL (SQL)</h3><p>Nous allons voir à présent comment utiliser des informations venant d'une base de données. Pour cela nous allons utiliser le module npm <code>mysql</code>. Il va également nous falloir <a href="https://dev.mysql.com/downloads/installer/">installer un serveur MySQL</a>.</p><p>Donc, depuis le dossier du <code>webconfig.json</code>, utilisez :</p><pre><code class="lang-bash">npm install mysql
</code></pre><h4 id="base-de-donn-es-mysql">Base de données MySQL</h4><p>Tout d'abord, nous allons alimenter la base de données avec la base <code>demo</code> :</p><pre><code class="lang-sql">CREATE DATABASE demo;
</code></pre><p>et la sélectionner :</p><pre><code class="lang-sql">USE demo
</code></pre><p>puis créer la table <code>user</code> :</p><pre><code class="lang-sql">CREATE TABLE user
(
    id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    lastname VARCHAR(100),
    firstname VARCHAR(100),
    email VARCHAR(255),
    birthdate DATE,
    gender TINYINT(1),
    country VARCHAR(255),
    town VARCHAR(255),
    zipcode VARCHAR(5),
    address VARCHAR(255)
);
</code></pre><p>et la remplir avec un jeu de données :</p><pre><code class="lang-sql">INSERT INTO user (
    lastname,
    firstname,
    email,
    birthdate,
    gender,
    country,
    town,
    zipcode,
    address
) VALUES (
    "Elric",
    "Edward",
    "edward.elric@fma.br",
    "2006/01/01",
    true,
    "Amestris",
    "Resembool",
    00000,
    "The Elric's house"
);
INSERT INTO user (
    lastname,
    firstname,
    email,
    birthdate,
    gender,
    country,
    town,
    zipcode,
    address
) VALUES (
    "Elric",
    "Alphonse",
    "alphonse.elric@fma.br",
    "2008/01/01",
    true,
    "Amestris",
    "Resembool",
    00000,
    "The Elric's house"
);
</code></pre><h4 id="fichiers-nodeatlas">Fichiers NodeAtlas</h4><p>Voyons à présent l'architecture de site que nous allons arbitrairement créer pour présenter notre exemple :</p><pre><code>├─ controllers/
│  ├─ common.js
│  └─ index.js
├─ models/
│  ├─ objects/
│  │  └─ user.js
│  └─ connectors/
│     └─ user.js
├─ views/
│  └─ index.htm
├─ variations/
│  ├─ common.json
│  └─ index.json
└─ webconfig.json
</code></pre><p>Nous allons utiliser le <code>webconfig.json</code> suivant avec une variable custom <code>_mysqlConfig</code> qui contiendra toutes les informations pour se connecter à la base de données :</p><pre><code class="lang-json">{
    "controller": "common.js",
    "variation": "common.json",
    "statics": {
        "/models": "models/objects"
    },
    "routes": {
        "/": {
            "view": "index.htm",
            "variation": "index.json",
            "controller": "index.js"
        }
    },
    "_mysqlConfig": {
        "host": "localhost",
        "user": "root",
        "password": "root",
        "database": "demo"
    }
}
</code></pre><p>Nous allons ensuite nous connecter à la base de données avec le contrôleur globale <code>controllers/common.js</code> :</p><pre><code class="lang-json">exports.setModules = function () {
    var NA = this;

    // Import du module `mysql`.
    NA.modules.mysql = require('mysql');

    // Création de la collection de modèle...
    NA.models = {};
    // ...et récupération du modèle User avec accès à Mysql.
    NA.models.User = require('../models/connectors/user.js');
};

exports.setConfigurations = function (next) {
    var NA = this,
        path = NA.modules.path,
        mysql = NA.modules.mysql;

    // Créer un pool de connexion à MySQL.
    NA.mySql = mysql.createPool(NA.webconfig._mysqlConfig);

    next();
};
</code></pre><p>Et afficher les résultats via le contrôleur spécifique <code>controllers/index.js</code> :</p><pre><code class="lang-json">exports.changeVariations = function (next, locals) {
    var NA = this,
        user = new NA.models.User(),
        user2 = new NA.models.User(),
        user3 = new NA.models.User(),
        user4 = new NA.models.User();

    NA.mySql.getConnection(function(err, connection) {
        if (err) {
            throw err;
        }

        // Exemple de lecture.
        user
        .setConnection(connection)
        .lastname("Elric")
        .read(function (allUsers) {
            locals.user = user;
            locals.users = allUsers;

            // Exemple de création.
            user2
            .setConnection(connection)
            .firstname("Winry")
            .lastname("Rockbell")
            .email("winry.rockbell@fma.br")
            .gender(true)
            .create(function (infos) {
                locals.insertId = infos.insertId;
                locals.user2 = user2;

                // Exemple de modification.
                user3
                .gender(false)
                .birthdate("2008-01-01")
                .country("Amestris")
                .town("Resembool")
                .zipcode("99999")
                .address("The Rockbell's house");

                user2.update(user3, function (infos) {
                    locals.affectedRows = infos.affectedRows;
                    locals.user2 = user2;

                    // Exemple de suppression.
                    user4
                    .setConnection(connection)
                    .gender(false)
                    .delete(function (infos) {
                        locals.deletedRows = infos.affectedRows;
                        next();
                    });
                });
            });
        });
    });
};
</code></pre><p>en utilisant le modèle <code>user</code> via le fichier de connexion à la base de données <code>models/connectors/user.js</code> :</p><pre><code class="lang-json">var user = require('../objects/user.js');

function User(connection) {
    var privates = {},
        publics = this;

    user.call(publics);

    privates.connection = connection;

    publics.setConnection = function (connection) {
        privates.connection = connection;
        return publics;
    };

    publics.read = function (callback) {
        var select = `SELECT
                    id,
                    lastname,
                    firstname,
                    email,
                    birthdate,
                    gender,
                    country,
                    town,
                    zipcode,
                    address
                FROM user`,
            where = "";

        if (publics.id()) { where += ' &amp;&amp; `id` = ' + publics.id(); }
        if (publics.lastname()) { where += ' &amp;&amp; `lastname` = "' + publics.lastname() + '"'; }
        if (publics.firstname()) { where += ' &amp;&amp; `firstname` = "' + publics.firstname() + '"'; }
        if (publics.email()) { where += ' &amp;&amp; `email` = "' + publics.email() + '"'; }
        if (publics.birthdate()) { where += ' &amp;&amp; `birthdate` = "' + publics.birthdate() + '"'; }
        if (typeof publics.gender() === "boolean") { where += ' &amp;&amp; `gender` = ' + (publics.gender() ? 1 : 0); }
        if (publics.country()) { where += ' &amp;&amp; `country` = "' + publics.country() + '"'; }
        if (publics.town()) { where += ' &amp;&amp; `town` = "' + publics.town() + '"'; }
        if (publics.zipcode()) { where += ' &amp;&amp; `zipcode` = "' + publics.zipcode() + '"'; }
        if (publics.address()) { where += ' &amp;&amp; `address` = "' + publics.address() + '"'; }

        where = where.replace("&amp;&amp;", "WHERE");

        privates.connection.query(select + where, function (err, rows) {
            var users = [],
                user;

            if (err) {
                throw err;
            }

            if (rows[0]) {
                publics.id(rows[0].id);
                publics.lastname(rows[0].lastname);
                publics.firstname(rows[0].firstname);
                publics.email(rows[0].email);
                publics.birthdate(rows[0].birthdate);
                publics.gender((rows[0].gender) ? true : false);
                publics.country(rows[0].country);
                publics.town(rows[0].town);
                publics.zipcode(rows[0].zipcode);
                publics.address(rows[0].address);
            }

            for (var i = 0; i &amp;lt; rows.length; i++) {
                user = new User();
                user.id(rows[i].id);
                user.lastname(rows[i].lastname);
                user.firstname(rows[i].firstname);
                user.email(rows[i].email);
                user.birthdate(rows[i].birthdate);
                user.gender((rows[i].gender) ? true : false);
                user.country(rows[i].country);
                user.town(rows[i].town);
                user.zipcode(rows[i].zipcode);
                user.address(rows[i].address);
                users.push(user);
            }

            if (callback) {
                callback(users);
            }
        });

        return publics;
    };

    publics.create = function (callback) {
        var insert = "INSERT INTO user (",
            values = ") VALUES (";

        if (publics.id()) {
            insert += "`id`, ";
            values += publics.id() + ', ';
        }
        if (publics.lastname()) {
            insert += "`lastname`, ";
            values += '"' + publics.lastname() + '", ';
        }
        if (publics.firstname()) {
            insert += "`firstname`, ";
            values += '"' + publics.firstname() + '", ';
        }
        if (publics.email()) {
            insert += "`email`, ";
            values += '"' + publics.email() + '", ';
        }
        if (publics.birthdate()) {
            insert += "`birthdate`, ";
            values += '"' + publics.birthdate() + '", ';
        }
        if (typeof publics.gender() === "boolean") {
            insert += "`gender`, ";
            values += (publics.gender() ? 1 : 0) + ', ';
        }
        if (publics.country()) {
            insert += "`country`, ";
            values += '"' + publics.country() + '", ';
        }
        if (publics.town()) {
            insert += "`town`, ";
            values += '"' + publics.town() + '", ';
        }
        if (publics.zipcode()) {
            insert += "`zipcode`, ";
            values += '"' + publics.zipcode() + '", ';
        }
        if (publics.address()) {
            insert += "`address`, ";
            values += '"' + publics.address() + '", ';
        }

        insert = insert.replace(/, $/g, "");
        values = values.replace(/, $/g, ")");

        privates.connection.query(insert + values, function (err, infos) {
            if (err) {
                throw err;
            }

            publics.id(infos.insertId);

            if (callback) {
                callback(infos);
            }
        });

        return publics;
    };

    publics.update = function (user, callback) {
        var update = "UPDATE user SET",
            where = "";

        if (user.id()) { update += '`id` = ' + user.id() + ', '; }
        if (user.lastname()) { update += '`lastname` = "' + user.lastname() + '", '; }
        if (user.firstname()) { update += '`firstname` = "' + user.firstname() + '", '; }
        if (user.email()) { update += '`email` = "' + user.email() + '", '; }
        if (user.birthdate()) { update += '`birthdate` = "' + user.birthdate() + '", '; }
        if (typeof user.gender() === "boolean") { update += '`gender` = ' + (user.gender() ? 1 : 0) + ', '; }
        if (user.country()) { update += '`country` = "' + user.country() + '", '; }
        if (user.town()) { update += '`town` = "' + user.town() + '", '; }
        if (user.zipcode()) { update += '`zipcode` = "' + user.zipcode() + '", '; }
        if (user.address()) { update += '`address` = "' + user.address() + '", '; }

        update = update.replace(/, $/g, "");

        if (publics.id()) { where += ' &amp;&amp; `id` = ' + publics.id(); }
        if (publics.lastname()) { where += ' &amp;&amp; `lastname` = "' + publics.lastname() + '"'; }
        if (publics.firstname()) { where += ' &amp;&amp; `firstname` = "' + publics.firstname() + '"'; }
        if (publics.email()) { where += ' &amp;&amp; `email` = "' + publics.email() + '"'; }
        if (publics.birthdate()) { where += ' &amp;&amp; `birthdate` = "' + publics.birthdate() + '"'; }
        if (typeof publics.gender() === "boolean") { where += ' &amp;&amp; `gender` = ' + (publics.gender() ? 1 : 0); }
        if (publics.country()) { where += ' &amp;&amp; `country` = "' + publics.country() + '"'; }
        if (publics.town()) { where += ' &amp;&amp; `town` = "' + publics.town() + '"'; }
        if (publics.zipcode()) { where += ' &amp;&amp; `zipcode` = "' + publics.zipcode() + '"'; }
        if (publics.address()) { where += ' &amp;&amp; `address` = "' + publics.address() + '"'; }

        where = where.replace("&amp;&amp;", "WHERE");

        privates.connection.query(update + where, function (err, infos) {
            if (err) {
                throw err;
            }

            if (user.id()) { publics.id(user.id()); }
            if (user.lastname()) { publics.lastname(user.lastname()); }
            if (user.firstname()) { publics.firstname(user.firstname()); }
            if (user.email()) { publics.email(user.email()); }
            if (user.birthdate()) { publics.birthdate(user.birthdate()); }
            if (typeof publics.gender() === "boolean") { publics.gender(user.gender()); }
            if (user.country()) { publics.country(user.country()); }
            if (user.town()) { publics.town(user.town()); }
            if (user.zipcode()) { publics.zipcode(user.zipcode()); }
            if (user.address()) { publics.address(user.address()); }

            if (callback) {
                callback(infos);
            }
        });

        return publics;
    };

    publics.delete = function (callback) {
        var del = "DELETE FROM user",
            where = "";

        if (publics.id()) { where += ' &amp;&amp; `id` = ' + publics.id(); }
        if (publics.lastname()) { where += ' &amp;&amp; `lastname` = "' + publics.lastname() + '"'; }
        if (publics.firstname()) { where += ' &amp;&amp; `firstname` = "' + publics.firstname() + '"'; }
        if (publics.email()) { where += ' &amp;&amp; `email` = "' + publics.email() + '"'; }
        if (publics.birthdate()) { where += ' &amp;&amp; `birthdate` = "' + publics.birthdate() + '"'; }
        if (typeof publics.gender() === "boolean") { where += ' &amp;&amp; `gender` = ' + (publics.gender() ? 1 : 0); }
        if (publics.country()) { where += ' &amp;&amp; `country` = "' + publics.country() + '"'; }
        if (publics.town()) { where += ' &amp;&amp; `town` = "' + publics.town() + '"'; }
        if (publics.zipcode()) { where += ' &amp;&amp; `zipcode` = "' + publics.zipcode() + '"'; }
        if (publics.address()) { where += ' &amp;&amp; `address` = "' + publics.address() + '"'; }

        where = where.replace("&amp;&amp;", "WHERE");

        privates.connection.query(del + where, function (err, infos) {
            if (err) {
                throw err;
            }

            if (publics.id()) { publics.id(undefined); }
            if (publics.lastname()) { publics.lastname(undefined); }
            if (publics.firstname()) { publics.firstname(undefined); }
            if (publics.email()) { publics.email(undefined); }
            if (publics.birthdate()) { publics.birthdate(undefined); }
            if (typeof publics.gender() === "boolean") { publics.gender(undefined); }
            if (publics.country()) { publics.country(undefined); }
            if (publics.town()) { publics.town(undefined); }
            if (publics.zipcode()) { publics.zipcode(undefined); }
            if (publics.address()) { publics.address(undefined); }

            if (callback) {
                callback(infos);
            }
        });

        return publics;
    };
}

User.prototype = Object.create(user.prototype);
User.prototype.constructor = User;

module.exports = User;
</code></pre><p>basé sur une classe <code>user</code> partagée entre la partie cliente et serveur <code>models/objects/user.js</code> :</p><pre><code class="lang-js">(function (expose, factory) {
    if (typeof module !== 'undefined' &amp;&amp; module.exports) {
        module.exports = factory;
    } else {
        expose.User = factory;
    }
}(this, function User() {
    var privates = {},
        publics = this;

    publics.id = function (id) {
        if (typeof id === 'undefined') {
            return privates.id;
        } else {
            privates.id = id;
            return publics;
        }
    };

    publics.lastname = function (lastname) {
        if (typeof lastname === 'undefined') {
            return privates.lastname;
        } else {
            privates.lastname = lastname;
            return publics;
        }
    };

    publics.firstname = function (firstname) {
        if (typeof firstname === 'undefined') {
            return privates.firstname;
        } else {
            privates.firstname = firstname;
            return publics;
        }
    };

    publics.email = function (email) {
        if (typeof email === 'undefined') {
            return privates.email;
        } else {
            privates.email = email;
            return publics;
        }
    };

    publics.birthdate = function (birthdate) {
        if (typeof birthdate === 'undefined') {
            return privates.birthdate;
        } else {
            privates.birthdate = birthdate;
            return publics;
        }
    };

    publics.gender = function (gender) {
        if (typeof gender === 'undefined') {
            return privates.gender;
        } else {
            privates.gender = gender;
            return publics;
        }
    };

    publics.country = function (country) {
        if (typeof country === 'undefined') {
            return privates.country;
        } else {
            privates.country = country;
            return publics;
        }
    };

    publics.town = function (town) {
        if (typeof town === 'undefined') {
            return privates.town;
        } else {
            privates.town = town;
            return publics;
        }
    };

    publics.zipcode = function (zipcode) {
        if (typeof zipcode === 'undefined') {
            return privates.zipcode;
        } else {
            privates.zipcode = zipcode;
            return publics;
        }
    };

    publics.address = function (address) {
        if (typeof address === 'undefined') {
            return privates.address;
        } else {
            privates.address = address;
            return publics;
        }
    };
}));
</code></pre><p>Avec les fichiers suivant pour afficher la page :</p><p><em>views/index.htm</em></p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;&amp;lt;?- common.titleWebsite ?&gt;&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="title"&gt;&amp;lt;?- common.titleWebsite ?&gt;&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;h1&gt;&amp;lt;?- specific.titlePage ?&gt;&amp;lt;/h1&gt;
            &amp;lt;div class="first"&gt;
                &amp;lt;?- specific.content ?&gt;
                &amp;lt;ul&gt;
                    &amp;lt;li&gt;Id: &amp;lt;strong&gt;&amp;lt;?- user.id() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Lastname: &amp;lt;strong&gt;&amp;lt;?- user.lastname() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Firstname: &amp;lt;strong&gt;&amp;lt;?- user.firstname() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Email: &amp;lt;strong&gt;&amp;lt;?- user.email() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Birthdate: &amp;lt;strong&gt;&amp;lt;?- user.birthdate() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Gender: &amp;lt;strong&gt;&amp;lt;?- user.gender() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Country: &amp;lt;strong&gt;&amp;lt;?- user.country() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Town: &amp;lt;strong&gt;&amp;lt;?- user.town() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Zipcode: &amp;lt;strong&gt;&amp;lt;?- user.zipcode() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Address: &amp;lt;strong&gt;&amp;lt;?- user.address() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;/ul&gt;
            &amp;lt;/div&gt;
            &amp;lt;div class="all"&gt;
                &amp;lt;?- specific.contents ?&gt;
                &amp;lt;? for (var i = 0; i &amp;lt; users.length; i++) { ?&gt;
                &amp;lt;ul&gt;
                    &amp;lt;li&gt;Id: &amp;lt;strong&gt;&amp;lt;?- users[i].id() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Lastname: &amp;lt;strong&gt;&amp;lt;?- users[i].lastname() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Firstname: &amp;lt;strong&gt;&amp;lt;?- users[i].firstname() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Email: &amp;lt;strong&gt;&amp;lt;?- users[i].email() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Birthdate: &amp;lt;strong&gt;&amp;lt;?- users[i].birthdate() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Gender: &amp;lt;strong&gt;&amp;lt;?- users[i].gender() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Country: &amp;lt;strong&gt;&amp;lt;?- users[i].country() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Town: &amp;lt;strong&gt;&amp;lt;?- users[i].town() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Zipcode: &amp;lt;strong&gt;&amp;lt;?- users[i].zipcode() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Address: &amp;lt;strong&gt;&amp;lt;?- users[i].address() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;/ul&gt;
                &amp;lt;? } ?&gt;
            &amp;lt;/div&gt;
            &amp;lt;div class="last"&gt;
                &amp;lt;?- specific.contentInsert ?&gt;
                &amp;lt;p&gt;insertId: &amp;lt;?- insertId ?&gt;&amp;lt;/p&gt;
                &amp;lt;p&gt;numberUpdate: &amp;lt;?- affectedRows ?&gt;&amp;lt;/p&gt;
                &amp;lt;ul&gt;
                    &amp;lt;li&gt;Id: &amp;lt;strong&gt;&amp;lt;?- user2.id() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Lastname: &amp;lt;strong&gt;&amp;lt;?- user2.lastname() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Firstname: &amp;lt;strong&gt;&amp;lt;?- user2.firstname() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Email: &amp;lt;strong&gt;&amp;lt;?- user2.email() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Birthdate: &amp;lt;strong&gt;&amp;lt;?- user2.birthdate() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Gender: &amp;lt;strong&gt;&amp;lt;?- user2.gender() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Country: &amp;lt;strong&gt;&amp;lt;?- user2.country() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Town: &amp;lt;strong&gt;&amp;lt;?- user2.town() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Zipcode: &amp;lt;strong&gt;&amp;lt;?- user2.zipcode() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Address: &amp;lt;strong&gt;&amp;lt;?- user2.address() ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;/ul&gt;
                &amp;lt;p&gt;numberDelete: &amp;lt;?- deletedRows ?&gt;&amp;lt;/p&gt;
            &amp;lt;/div&gt;
        &amp;lt;/div&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><p><em>variations/common.json</em></p><pre><code class="lang-json">{
    "titleWebsite": "Exemple MySql",
    "male": "Homme",
    "female": "Femme"
}
</code></pre><p><em>variations/index.json</em></p><pre><code class="lang-json">{
    "titlePage": "Table User",
    "content": "&amp;lt;p&gt;Détail de la première entrée.&amp;lt;/p&gt;",
    "contents": "&amp;lt;p&gt;Détail de toutes les entrées.&amp;lt;/p&gt;",
    "contentInsert": "&amp;lt;p&gt;Détail de l'utilisateur ajouté puis modifié.&amp;lt;/p&gt;"
}
</code></pre><p>Vous obtiendrez la sortie suivante :</p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;MySql Exemple&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="title"&gt;MySql Exemple&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;h1&gt;Table User&amp;lt;/h1&gt;
            &amp;lt;div class="first"&gt;
                &amp;lt;p&gt;Détail de la première entrée.&amp;lt;/p&gt;
                &amp;lt;ul&gt;
                    &amp;lt;li&gt;Id: &amp;lt;strong&gt;1&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Lastname: &amp;lt;strong&gt;Elric&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Firstname: &amp;lt;strong&gt;Edward&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Email: &amp;lt;strong&gt;edward.elric@fma.br&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Birthdate: &amp;lt;strong&gt;Sun Jan 01 2006 00:00:00 GMT+0100 (Paris, Madrid)&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Gender: &amp;lt;strong&gt;true&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Country: &amp;lt;strong&gt;Amestris&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Town: &amp;lt;strong&gt;Resembool&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Zipcode: &amp;lt;strong&gt;0&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Address: &amp;lt;strong&gt;The Elric's house&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;/ul&gt;
            &amp;lt;/div&gt;
            &amp;lt;div class="all"&gt;
                &amp;lt;p&gt;Détail de toutes les entrées.&amp;lt;/p&gt;
                &amp;lt;ul&gt;
                    &amp;lt;li&gt;Id: &amp;lt;strong&gt;1&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Lastname: &amp;lt;strong&gt;Elric&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Firstname: &amp;lt;strong&gt;Edward&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Email: &amp;lt;strong&gt;edward.elric@fma.br&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Birthdate: &amp;lt;strong&gt;Sun Jan 01 2006 00:00:00 GMT+0100 (Paris, Madrid)&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Gender: &amp;lt;strong&gt;true&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Country: &amp;lt;strong&gt;Amestris&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Town: &amp;lt;strong&gt;Resembool&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Zipcode: &amp;lt;strong&gt;0&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Address: &amp;lt;strong&gt;The Elric's house&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;/ul&gt;
                &amp;lt;ul&gt;
                    &amp;lt;li&gt;Id: &amp;lt;strong&gt;2&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Lastname: &amp;lt;strong&gt;Elric&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Firstname: &amp;lt;strong&gt;Alphonse&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Email: &amp;lt;strong&gt;alphonse.elric@fma.br&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Birthdate: &amp;lt;strong&gt;Tue Jan 01 2008 00:00:00 GMT+0100 (Paris, Madrid)&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Gender: &amp;lt;strong&gt;true&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Country: &amp;lt;strong&gt;Amestris&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Town: &amp;lt;strong&gt;Resembool&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Zipcode: &amp;lt;strong&gt;0&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Address: &amp;lt;strong&gt;The Elric's house&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;/ul&gt;
            &amp;lt;/div&gt;
            &amp;lt;div class="last"&gt;
                &amp;lt;p&gt;Détail de l'utilisateur ajouté puis modifié.&amp;lt;/p&gt;
                &amp;lt;p&gt;insertId: 3&amp;lt;/p&gt;
                &amp;lt;p&gt;numberUpdate: 1&amp;lt;/p&gt;
                &amp;lt;ul&gt;
                    &amp;lt;li&gt;Id: &amp;lt;strong&gt;3&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Lastname: &amp;lt;strong&gt;Rockbell&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Firstname: &amp;lt;strong&gt;Winry&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Email: &amp;lt;strong&gt;winry.rockbell@fma.br&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Birthdate: &amp;lt;strong&gt;2008-01-01&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Gender: &amp;lt;strong&gt;false&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Country: &amp;lt;strong&gt;Amestris&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Town: &amp;lt;strong&gt;Resembool&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Zipcode: &amp;lt;strong&gt;99999&amp;lt;/strong&gt;&amp;lt;/li&gt;
                    &amp;lt;li&gt;Address: &amp;lt;strong&gt;The Rockbell's house&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;/ul&gt;
                &amp;lt;p&gt;numberDelete: 1&amp;lt;/p&gt;
            &amp;lt;/div&gt;
        &amp;lt;/div&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><h3 id="utiliser-une-base-de-donnees-mongodb-nosql">Utiliser une base de données MongoDB (NoSQL)</h3><p>Nous allons voir à présent comment utiliser des informations venant d'une base de données non sql. Pour cela nous allons utiliser le module npm <code>mongoose</code>. Il va également nous falloir <a href="https://www.mongodb.com/">installer un serveur MongoDB</a>.</p><p>Donc, depuis le dossier du <code>webconfig.json</code>, utilisez :</p><pre><code class="lang-bash">npm install mongoose
</code></pre><h4 id="base-de-donn-es-mongodb">Base de données MongoDB</h4><p>Tout d'abord, nous allons alimenter la base de données avec la base <code>demo</code> et la sélectionner :</p><pre><code>use demo
</code></pre><p>puis créer la collection <code>user</code> :</p><pre><code>db.createCollection("user")
</code></pre><p>et la remplir avec un document :</p><pre><code>db.user.insert({
    email: "john.doe@unknown.com",
    identity: {
        lastname: "Doe",
        firstname: "John",
        gender: true,
        birthdate : new Date("1970/01/01")
    },
    location: {
        country: "Unknown",
        town: "Unknown",
        zipcode: "00000",
        address: "42 unknown"
    }
})
</code></pre><h4 id="fichiers-nodeatlas">Fichiers NodeAtlas</h4><p>Avec le jeu de fichier suivant :</p><pre><code>├─ controllers/
│  ├─ common.js
│  └─ index.js
├─ models/
│  └─ user.js
├─ views/
│  └─ index.htm
├─ variations/
│  ├─ common.json
│  └─ index.json
└─ webconfig.json
</code></pre><p>Nous allons utiliser le <code>webconfig.json</code> suivant avec une variable custom <code>_mongodbConfig</code> qui contiendra toutes les informations pour se connecter à la base de données :</p><pre><code class="lang-json">{
    "controller": "common.js",
    "variation": "common.json",
    "statics": {
        "/models": "models"
    },
    "routes": {
        "/": {
            "view": "index.htm",
            "variation": "index.json",
            "controller": "index.js"
        }
    },
    "_mongodbConfig": {
        "host": "localhost",
        "port": "27017",
        "database": "demo"
    }
}
</code></pre><p>Avec les fichiers suivant pour afficher la page :</p><p><em>views/index.htm</em></p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="&amp;lt;?- languageCode ?&gt;"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;&amp;lt;?- common.titleWebsite ?&gt;&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="title"&gt;&amp;lt;?- common.titleWebsite ?&gt;&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;h1&gt;&amp;lt;?- specific.titlePage ?&gt;&amp;lt;/h1&gt;
            &amp;lt;?- specific.content ?&gt;
            &amp;lt;ul&gt;
                &amp;lt;li&gt;Id: &amp;lt;strong&gt;&amp;lt;?- id ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Lastname: &amp;lt;strong&gt;&amp;lt;?- lastname ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Firstname: &amp;lt;strong&gt;&amp;lt;?- firstname ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Email: &amp;lt;strong&gt;&amp;lt;?- email ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Birthdate: &amp;lt;strong&gt;&amp;lt;?- birthdate ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Gender: &amp;lt;strong&gt;&amp;lt;?- gender ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Country: &amp;lt;strong&gt;&amp;lt;?- country ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Town: &amp;lt;strong&gt;&amp;lt;?- town ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Zipcode: &amp;lt;strong&gt;&amp;lt;?- zipcode ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Address: &amp;lt;strong&gt;&amp;lt;?- address ?&gt;&amp;lt;/strong&gt;&amp;lt;/li&gt;
            &amp;lt;/ul&gt;
        &amp;lt;/div&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><p><em>variations/common.json</em></p><pre><code class="lang-json">{
    "titleWebsite": "MongoDB Exemple",
    "male": "Homme",
    "female": "Femme"
}
</code></pre><p><em>variations/index.json</em></p><pre><code class="lang-json">{
    "titlePage": "Collection User",
    "content": "&amp;lt;p&gt;Détail du document `{ \"identity.firstname\": \"John\" }`.&amp;lt;/p&gt;"
}
</code></pre><p>Enfin nous allons nous connecter à la base de données avec le contrôleur globale <code>controllers/common.js</code> :</p><pre><code class="lang-js">exports.setModules = function () {
    var NA = this,
        path = NA.modules.path;

    NA.modules.mongoose = require('mongoose');
    NA.models = {};
    NA.models.User = require('../models/user.js');
};

exports.setConfigurations = function (next) {
    var NA = this,
        mongoose = NA.modules.mongoose,
        config = NA.webconfig._mongodbConfig;

    mongoose.Promise = global.Promise;
    mongoose.model("user", NA.models.User, "user");
    mongoose.connect("mongodb://" + config.host + ":" + config.port + "/" + config.database, function (error) {
        next();
    });
};
</code></pre><p>Et afficher les résultats via le contrôleur spécifique <code>controllers/index.js</code> :</p><pre><code class="lang-js">exports.changeVariations = function (next, locals) {
    var NA = this,
        mongoose = NA.modules.mongoose,
        User = mongoose.model('user');

    User
    .findOne({ "identity.firstname": "John" })
    .exec(function (err, user) {

        locals.id = user._id;
        locals.lastname = user.identity.lastname;
        locals.firstname = user.identity.firstname;
        locals.birthdate = user.identity.birthdate;
        locals.email = user.email;
        locals.gender = (user.identity.gender) ? locals.common.male : locals.common.female;
        locals.country = user.location.country;
        locals.town = user.location.town;
        locals.zipcode = user.location.zipcode;
        locals.address = user.location.address;

        next();
    });
};
</code></pre><p>en utilisant sur une classe <code>user</code> partagée entre la partie cliente et la partie serveur <code>models/user.js</code> :</p><pre><code class="lang-js">var mongoose;
if (typeof module !== 'undefined' &amp;&amp; module.exports) {
     mongoose = require('mongoose');
}

(function (expose, factory) {
    if (mongoose) {
        module.exports = factory;
    } else {
        expose.User = factory;
    }
}(this, new mongoose.Schema({
    _id: mongoose.Schema.Types.ObjectId,
    email: { type : String, match: /^\S+@\S+$/ },
    identity: {
        lastname: String,
        firstname: String,
        gender: Boolean,
        birthdate : { type : Date, default : Date.now }
    },
    location: {
        country: String,
        town: String,
        zipcode: String,
        address: String
    }
})));
</code></pre><p>Vous obtiendrez la sortie suivante :</p><pre><code class="lang-html">&amp;lt;!DOCTYPE html&gt;
&amp;lt;html lang="fr-fr"&gt;
    &amp;lt;head&gt;
        &amp;lt;meta charset="utf-8" /&gt;
        &amp;lt;title&gt;Exemple MongoDB&amp;lt;/title&gt;
    &amp;lt;/head&gt;
    &amp;lt;body&gt;
        &amp;lt;div class="title"&gt;Exemple MongoDB&amp;lt;/div&gt;
        &amp;lt;div&gt;
            &amp;lt;h1&gt;Collection User&amp;lt;/h1&gt;
            &amp;lt;p&gt;Détail de l'entrée `{ "identity.firstname": "John" }`.&amp;lt;/p&gt;
            &amp;lt;ul&gt;
                &amp;lt;li&gt;Id: &amp;lt;strong&gt;5804d4d530788ee2e52ea1c7&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Lastname: &amp;lt;strong&gt;Doe&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Firstname: &amp;lt;strong&gt;John&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Email: &amp;lt;strong&gt;john.doe@unknown.com&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Birthdate: &amp;lt;strong&gt;Mon Jan 01 1970 00:00:00 GMT+0200 (Paris, Madrid (heure d’été))&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Gender: &amp;lt;strong&gt;Homme&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Country: &amp;lt;strong&gt;Unknown&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Town: &amp;lt;strong&gt;Unknown&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Zipcode: &amp;lt;strong&gt;00000&amp;lt;/strong&gt;&amp;lt;/li&gt;
                &amp;lt;li&gt;Address: &amp;lt;strong&gt;42 unknown&amp;lt;/strong&gt;&amp;lt;/li&gt;
            &amp;lt;/ul&gt;
        &amp;lt;/div&gt;
    &amp;lt;/body&gt;
&amp;lt;/html&gt;
</code></pre><h3 id="utiliser-des-middlewares-depuis-express">Utiliser des middlewares depuis Express</h3><p>NodeAtlas repose en partie sur le module npm <a href="http://expressjs.com/">Express.js</a>. Vous pouvez accéder à l'objet Express d'une instance NodeAtlas par l'intermédiaire de <code>NA#express</code>. Cela vous permet d'ajouter des middlewares Express de la même manière que vous l'auriez fait avec Express seul.</p><p>En ce qui concerne la pré-configuration d'Express avec un webconfig vide, elle est faites ainsi :</p><pre><code class="lang-js">NA.express.set("strict routing", true);
/* ... */
NA.express.set("x-powered-by", false);
/* ... */
/* Activation de gzip, deflate et cie. */
NA.express.use(compress());
/* ... */
/* Parse le type d'encryption "x-www-form-urlencoded". */
NA.express.use(bodyParser.urlencoded({ extended: true }));
/* ... */
/* Parse le type d'encryption "application/json". */
NA.express.use(bodyParser.json());
/* ... */
/* Parse les cookies. */
NA.express.use(cookieParser());
/* ... */
/* Gére les cookies de session. */
NA.express.use(session(optionSession));
/* ... */
/* Gére de dossier `assets/` et son accès depuis le domain root ou un sous-dossier. */
NA.express.use(NA.webconfig.urlRelativeSubPath, express.static(path.join(NA.serverPath, NA.webconfig.assetsRelativePath), staticOptions));
</code></pre><p>Vous pouvez vous même ajouter des middlewares de plusieurs manière.</p><h4 id="avec-setconfigurations-">Avec <code>setConfigurations</code></h4><p>Vous pouvez obtenir l'objet <code>NA#express</code> près à accueillir des middlewares ici dans le point d'ancrage <code>setConfigurations</code>. Cela ajoutera les mécanismes à toutes les routes de votre site.</p><pre><code class="lang-js">exports.setConfigurations = function (next) {
    var NA = this;

    // Middleware fait main.
    NA.express.use(function (request, response, next) {
        response.setHeader("X-Frame-Options", "ALLOW-FROM https://www.lesieur.name/");
        next();
    });

    // Middleware ajoutant diverse entête http de sécurisation.
    NA.express.use(require("helmet")());

    next();
};
</code></pre><h4 id="avec-le-param-tre-middlewares-des-routes">Avec le paramètre <code>middlewares</code> des Routes</h4><p>Il est également possible de délivrer ses middlewares uniquement pour une seule route. Dans ce cas vous pouvez utilisez le paramètre <code>middlewares</code> comme suit :</p><p><strong>webconfig.json</strong></p><pre><code class="lang-js">{
    "middlewaresRelativePath": "middlewares",
    "routes": {
        "/upload-file": {
            "view": "upload.htm",
            "controller": "upload.js",
            "middlewares": "upload.js"
        }
    }
    "_jwt": {
        secret: "AUTH_CLIENT_SECRET",
        audience: "AUTH_CLIENT_ID"
    }
}
</code></pre><p>et utiliser le fichier suivant pour autoriser l'envoi de donnée POST encrypté en "multipart/data-form" uniquement si vous êtes authentifié par un token JSON :</p><p><strong>middlewares/upload.js</strong></p><pre><code class="lang-js">var multer  = require("multer"),
    jwt = require("express-jwt");

module.exports = function () {
    var NA = this,
        path = NA.modules.path,
        upload = multer({ dest: path.join(NA.serverPath, "uploads") });

    return [
        jwt({
            secret: NA.webconfig._jwt.secret,
            audience: NA.webconfig._jwt.audience
        }),
        upload.single("avatar"),
    ];
};
</code></pre><p><em>Note : Si</em> <code>middlewaresRelativePath</code> <em>n'est pas présent dans « webconfig.json », par défaut le dossier des contrôleurs est bien</em> <code>middlewares</code>. <code>middlewaresRelativePath</code> <em>est donc utile seulement pour changer le nom/chemin du répertoire.</em></p><h4 id="avec-le-param-tre-middlewares-en-global">Avec le paramètre <code>middlewares</code> en Global</h4><p>Il est également possible d'utiliser ce système pour toutes les routes, ainsi le webconfig se présenterait plutôt ainsi :</p><p><strong>webconfig.json</strong></p><pre><code class="lang-js">{
    "middlewares": "is-authenticated.js"
    "routes": {
        "/upload-file": {
            "view": "upload.htm",
            "controller": "upload.js"
        }
    }
    "_jwt": {
        secret: "AUTH_CLIENT_SECRET",
        audience: "AUTH_CLIENT_ID"
    }
}
</code></pre><p>Avec le fichier :</p><p><strong>middlewares/is-authenticated.js</strong></p><pre><code class="lang-js">var jwt = require("express-jwt");

module.exports = function () {
    var NA = this;

    return [
        jwt({
            secret: NA.webconfig._jwt.secret,
            audience: NA.webconfig._jwt.audience
        })
    ];
};
</code></pre><h4 id="tableau-de-middlewares-">Tableau de <code>middlewares</code></h4><p>Vous pouvez également fournir un tableau vers une liste de fichier de middleware Express que ce soit pour chaque route ou en global :</p><p><strong>webconfig.json</strong></p><pre><code class="lang-js">{
    "routes": {
        "/upload-file": {
            "view": "upload.htm",
            "controller": "upload.js",
            "middlewares": ["is-authenticated.js", "redirect.js"]
        }
    }
    "_jwt": {
        secret: "AUTH_CLIENT_SECRET",
        audience: "AUTH_CLIENT_ID"
    }
}
</code></pre><p>Avec l'utilisation de l'objet NA :</p><p><strong>middlewares/is-authenticated.js</strong></p><pre><code class="lang-js">var jwt = require("express-jwt");

module.exports = function () {
    var NA = this;

    return [jwt({
        secret: NA.webconfig._jwt.secret,
        audience: NA.webconfig._jwt.audience
    })];
};
</code></pre><p>où sans :</p><p><strong>middlewares/redirect.js</strong></p><pre><code class="lang-js">module.exports = function (request, response, next) {

    response.redirect('https://go.to.visitor.page/');

    next();
};
</code></pre><h3 id="creer-une-application-isomorphique">Créer une application isomorphique</h3><p>Une application isomorphique est une application dont le code JavaScript est en grande partie le même qu'il soit exécuté côté client ou exécuté côté serveur. NodeAtlas propose un exemple d'application isomorphique dans son template dédié à <a href="https://fr.vuejs.org/">Vue.js</a>.</p><p>Pour tester cela il vous suffit :</p><p>de créer un dossier de test</p><pre><code class="lang-bash">mkdir hello-vue
cd hello-vue
</code></pre><p>d'y placer les fichier de <code>hello-vue</code></p><pre><code class="lang-bash">node-atlas --create hello-vue
</code></pre><p>d'installer les dépendances</p><pre><code class="lang-bash">npm install
</code></pre><p>et de lancer le site en français</p><pre><code class="lang-bash">node-atlas --browse
</code></pre><p>ou en version internationale</p><pre><code class="lang-bash">node-atlas --browse --webconfig webconfig.en-us.json
</code></pre><p>Vous trouverrez tout ce qu'il faut pour appréhender la partie serveur du <code>constrollers/common.js</code> sur <a href="https://ssr.vuejs.org/">https://ssr.vuejs.org/</a> et seul la partie cliente du <code>assets/javascripts/common.js</code> sur <a href="https://vuejs.org/">https://vuejs.org/</a>.</p><div><div class="before">
							<a href="partie-vue-et-template.html">◄ Partie vue et template</a>
						</div><div class="after">
							<a href="pour-aller-plus-loin.html">Pour aller plus loin ►</a>
						</div></div>