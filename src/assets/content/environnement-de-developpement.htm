<h2 id="environnement-de-developpement">Environnement de Développement</h2><p>NodeAtlas utilise Node.js qui est développé sur le moteur V8. Le moteur V8 est également utilisé par les navigateurs Google Chrome et Chromium ce qui fait que NodeAtlas peut être complètement débuggué dans cet environnement.</p><h3 id="debug-du-front-end">Debug du front-end</h3><p>Vous pouvez débugguer vos rendu HTML, vos règles CSS et votre code JavaScript front-end de la même manière que vous l'auriez fait avec un simple site HTML ou une autre technologie. Vous avez donc accès via F12 à la console JavaScript, aux éléments du DOM éditables, à l'éditeur de propriétés et animations CSS ainsi qu'au débogueur de fichier JavaScript.</p><p>La nouveauté avec NodeAtlas vient de l'éditeur de CSS. Là où il vous indiquait les fichiers CSS et lignes pour vos fichiers source en CSS, il vous indique pour un fichier CSS généré avec Stylus ou Less le fichier Stylus ou Less ainsi que sa ligne.</p><h3 id="debug-du-back-end">Debug du back-end</h3><p>À partir de Node.js v6.6+, vous pouvez débugguer tout simplement votre code back-end dans Google Chrome. Il suffit pour cela d'utiliser l'option <code>--inspect</code> de node.</p><p>Créez vous par exemple un fichier de lancement comme celui-ci :</p><pre><code class="lang-javascript">require("node-start")().start()
</code></pre><p>puis lancez le avec la commande suivante :</p><pre><code>node --inspect server.js
</code></pre><p>Le moteur vous communiquera alors l'url d'une page à afficher dans Chrome. Rendez-vous sur cette page afin de voir les messages de la console dans l'onglet <code>console</code>, de debugguer votre code avec la totalité des fichiers utilisés dans <code>source</code> et des tests de performance avec <code>profile</code>.</p><h3 id="tests-de-peripheriques">Tests de Périphériques</h3><p>Pour tester votre site ou application web pendant la phase de développement sur vos téléphones mobiles et tablettes il suffit de connecter votre poste de développement et ces appareils sur le même réseau local.</p><p>Par exemple, connectez tous vos appareils sur le même réseau Wifi. Puis, trouvez sur ce réseau, l'ip de votre poste de développement. Sur Windows, cela ce fait à l'aide de la commande <code>ipconfig</code> par exemple.</p><p>Une fois votre ip connu, il ne vous reste qu'à définir le hostname et le port d'écoute pour votre instance de développement NodeAtlas :</p><pre><code>node-atlas --httpPort 7777 --httpHostname 192.168.1.24 --browse
</code></pre><p>Ce qui ouvrira votre site ici : <code>http://192.168.1.24:7777/</code>.</p><p>Il ne vous reste plus qu'à réclamer cette url depuis vos autres appareils et tester vos rendus et cas d'utilisations.</p><h3 id="auto-rechargement-a-chaud">Auto-rechargement à chaud</h3><p>Vous pouvez vous servir du module npm <a href="https://browsersync.io/">browserSync</a> ainsi que du module <a href="https://nodemon.io/">Nodemon</a> pour recharger les fichiers dans le navigateur automatiquement dès que ceux-ci ont bougés dans votre environnement de développement. Il vous faut installer les modules npm <code>gulp</code>, <code>browserSync</code> et <code>gulp-nodemon</code> pour faire de l'auto-rechargement à chaud.</p><h4 id="installer-les-d-pendances">Installer les dépendances</h4><p>Le plus simple est d'ajouter à votre <code>package.json</code> les lignes suivantes :</p><p><em>package.json</em></p><pre><code class="lang-json">{
  /* ... */
  "devDependencies": {
    "browser-sync": "2.18.x",
    "gulp": "3.9.x",
    "gulp-nodemon": "2.2.x"
  },
  /* ... */
}
</code></pre><p>et de lancer la commande</p><pre><code class="lang-bash">npm install
</code></pre><h4 id="cr-er-vos-configurations">Créer vos configurations</h4><p>Créez vous un fichier <code>server.js</code> (si vous n'en avez pas déjà un) et placez y (par exemple) ce code de lancement :</p><p><em>server.js</em></p><pre><code class="lang-js">require("node-atlas")().start();
</code></pre><p>Créez vous également un fichier <code>gulpfile.js</code> dans lequel vous mettrez ses instructions :</p><pre><code class="lang-js">/* jshint node: true */

/* Charger les modules */
var gulp = require('gulp'),
    browserSync = require('browser-sync'),
    nodemon = require('gulp-nodemon');

/* Dire que la première tâche après celle par défaut sera la tâche `browser-sync`. */
gulp.task('default', ['browser-sync']);

/* Dire que la tâche après `browser-sync` sera la `nodemon`. */
gulp.task('browser-sync', ['nodemon'], function() {

    /* En ce qui concerne la tâche courante nous allons
       lancer de quoi écoutez les fichiers pour le Front. */
    browserSync.init(null, {
        proxy: "http://localhost:7777", // Ça c'est le port httpPort de la config NodeAtlas.
        files: ["views/**", "assets/**", "variations/**"], // Ça c'est tous les fichiers que vous écoutez depuis la racine.
        port: 57776, // Ça c'est le port pour le développement à chaud.
    });
});

/* Dernière tâche `nodemon`. */
gulp.task('nodemon', function (next) {
   var started = false;

    /* En ce qui concerne la tâche courante nous allons
       lancer de quoi écoutez les fichiers pour le Back. */
    return nodemon({
        script: 'server.js', // Ceci est le script qui va être lancé.
        ext: 'js json', // Ceci sont les fichiers back que nous écoutons.
        ignore: ['gulpfile.js', 'variations/**', 'views/**', 'assets/**'] // Ceci sont les fichiers front que nous ignorons d'écouter.
    }).on('restart', function() {

        /* Quand le serveur redémarre, recharger la page courante. */
        setTimeout(function () {
             browserSync.reload();
        }, 500);
    }).on('start', function () {

        /* Empècher Nodemon de se lancer plusieurs fois. */
        if (!started) {
            next();
            started = true;
        }
    });
});
</code></pre><h4 id="lancement">Lancement</h4><p>Il ne vous reste plus qu'à lancer tout ça avec la commande</p><pre><code class="lang-bash">gulp
</code></pre><p>ou vous créer une commande npm dans votre <code>package.json</code> en ajoutant cette ligne :</p><pre><code class="lang-json">{
  /* ... */
  "scripts": {
    /* ... */
    "watch": "gulp"
    /* ... */
  },
  /* ... */
}
</code></pre><p>et lancer la commande</p><pre><code class="lang-bash">npm run watch
</code></pre><div><div class="before">
							<a href="nodeatlas-comme-simple-serveur-web.html">◄ NodeAtlas comme simple serveur web</a>
						</div><div class="after">
							<a href="environnement-de-production.html">Environnement de Production ►</a>
						</div></div>