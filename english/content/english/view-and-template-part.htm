<h2 id="view-and-template-part">View and Template Part</h2><p>NodeAtlas works with a configuration with usage of <code>webconfig.json</code> that allow its to scale and upgrade possibilities in a versatille way. For example, to create a website without JavaScript server-side (no controller), just add a <code>view</code> parameter to each route.</p><p>It&#39;s still possible to use JavaScript inline into views with the capabilities offer by template engine <a href="http://ejs.co/">EJS</a> used by NodeAtlas.</p><p>We will see all possibilities with couples of view files together.</p><h3 id="more-one-page">More one page</h3><p>Below is a sample configuration.</p><pre><code class="lang-json">{
    &quot;viewsRelativePath&quot;: &quot;views&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;
        },
        &quot;/member.html&quot;: {
            &quot;view&quot;: &quot;member.htm&quot;,
            &quot;postSupport&quot;: false
        },
        &quot;/member-without-extension/&quot;: {
            &quot;view&quot;: &quot;member.htm&quot;,
            &quot;getSupport&quot;: false
        },
        &quot;about.html&quot;: {
            &quot;view&quot;: &quot;about.htm&quot;
        },
        &quot;/error.html&quot;: {
            &quot;view&quot;: &quot;error.htm&quot;,
            &quot;statusCode&quot;: 404,
            &quot;mimeType&quot;: &quot;text/plain&quot;
        }
    }
}
</code></pre><p>To run this set of file:</p><pre><code>├─ views/
│  ├─ about.htm
│  ├─ error.htm
│  ├─ index.htm
│  └─ member.htm
└─ webconfig.json
</code></pre><p>with the addresses:</p><ul>
<li><em><a href="http://localhost/">http://localhost/</a></em> (responds to the root),,</li>
<li><em><a href="http://localhost/member.html">http://localhost/member.html</a></em> (will not respond if is POST requested)</li>
<li><em><a href="http://localhost/member-without-extension/">http://localhost/member-without-extension/</a></em> (will not respond if is GET requested),</li>
<li><em><a href="http://localhost/about.html">http://localhost/about.html</a></em> (return « Cannot GET about.html » because route path  <strong>must</strong> start by <code>/</code> to be referenced),</li>
<li><em><a href="http://localhost/error.html">http://localhost/error.html</a></em> (return of the plain-text content (without markup) with a 404).</li>
</ul><p><em>Note : If</em> <strong><em>viewsRelativePath</em></strong> <em>is not present in &quot;webconfig.json&quot;, views folder is</em> <strong><em>views</em></strong>. <strong><em>viewsRelativePath</em></strong> <em>is useful only to change the name/path of directory.</em></p><h3 id="manage-routes">Manage Routes</h3><p>The configuration below is equivalent to the configuration section just above</p><pre><code class="lang-json">{
    &quot;viewsRelativePath&quot;: &quot;views&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: &quot;index.htm&quot;,
        &quot;/member.html&quot;: {
            &quot;view&quot;: &quot;member.htm&quot;,
            &quot;postSupport&quot;: false
        },
        &quot;/member-without-extension/&quot;: {
            &quot;view&quot;: &quot;member.htm&quot;,
            &quot;getSupport&quot;: false
        },
        &quot;about.html&quot;: &quot;about.htm&quot;,
        &quot;/error.html&quot;: {
            &quot;view&quot;: &quot;error.htm&quot;,
            &quot;statusCode&quot;: 404,
            &quot;mimeType&quot;: &quot;text/plain&quot;
        }
    }
}
</code></pre><p>because</p><pre><code class="lang-json">&quot;/about.html&quot;: &quot;about.htm&quot;,
</code></pre><p>is a shortcut for</p><pre><code class="lang-json">&quot;about.html&quot;: {
    &quot;view&quot;: &quot;about.htm&quot;
}
</code></pre><p>Obviously this shortcut is used only if <code>view</code> is the only parameter to declare in the route.</p><p>It&#39;s also possible to place routes into an array, that allows you to ordonate routes for an advanced usage in controllers section.</p><p>In this case, the path become the <code>url</code> parameter.</p><pre><code class="lang-json">{
    &quot;viewsRelativePath&quot;: &quot;views&quot;,
    &quot;routes&quot;: [{
        &quot;url&quot;: &quot;/&quot;,
        &quot;view&quot;: &quot;index.htm&quot;,
    }, {
        &quot;url&quot;: &quot;/member.html&quot;,
        &quot;view&quot;: &quot;member.htm&quot;,
        &quot;postSupport&quot;: false
    }, {
        &quot;url&quot;: &quot;/member-without-extension/&quot;,
        &quot;view&quot;: &quot;member.htm&quot;,
        &quot;getSupport&quot;: false
    }, { 
        &quot;url&quot;: &quot;about.html&quot;,
        &quot;view&quot;: &quot;about.htm&quot;
    }, { 
        &quot;url&quot;: &quot;/error.html&quot;,
        &quot;view&quot;: &quot;error.htm&quot;,
        &quot;statusCode&quot;: 404,
        &quot;mimeType&quot;: &quot;text/plain&quot;
    }]
}
</code></pre><h3 id="deliver-images-fonts-css-js-etc.">Deliver images, fonts, CSS, JS, etc.</h3><p>You can also host any file on your site in a public folder. For example, with this configuration:</p><pre><code class="lang-json">{
    &quot;assetsRelativePath&quot;: &quot;assets&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;
        }
    }
}
</code></pre><p>and this set of files:</p><pre><code>├─ assets/
│  ├─ stylesheets/
│  │  └─ common.css
│  ├─ javascript/
│  │  └─ common.js
│  └─ media/
│     └─ images/
│        └─ logo.png
├─ views/
│  └─ index.htm
└─ webconfig.json
</code></pre><p>you will have access to the addresses:</p><ul>
<li><em><a href="http://localhost/">http://localhost/</a></em></li>
<li><em><a href="http://localhost/stylesheets/common.css">http://localhost/stylesheets/common.css</a></em></li>
<li><em><a href="http://localhost/javascript/common.js">http://localhost/javascript/common.js</a></em></li>
<li><em><a href="http://localhost/media/images/logo.png">http://localhost/media/images/logo.png</a></em></li>
</ul><p><em>Note : If</em> <strong><em>assetsRelativePath</em></strong> <em>is not present in &quot;webconfig.json&quot;, default public folder is</em> <strong><em>assets</em></strong>. <strong><em>assetsRelativePath</em></strong> <em>is useful only to change the name/path of directory.</em></p><h4 id="maxage-etag-etc-">maxAge, Etag, etc.</h4><p>It&#39;s possible to manage informations provided by NodeAtlas when a public ressource is requested (like <code>maxAge</code>, <code>Etag</code>, etc.) via the <code>staticOptions</code> property in webconfig. For more informations, see the <a href="http://expressjs.com/en/api.html">Express</a> documentation about static files.</p><h3 id="manage-include-of-partial-files">Manage Include of Partial Files</h3><p>You can segment your HTML codes to not repeat the redundant code such &quot;head&quot; part and &quot;foot&quot; part or any other code fragment:</p><p><em>webconfig.json</em></p><pre><code class="lang-json">{
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;
        },
        &quot;/list-of-members/&quot;: {
            &quot;view&quot;: &quot;members.htm&quot;
        }
    }
}
</code></pre><p>with the following files:</p><pre><code>├─ assets/
│  ├─ stylesheets/
│  │  └─ common.css
│  └─ javascript/
│     └─ common.js
├─ views/
│  ├─ partials/
│  │  ├─ head.htm
│  │  └─ foot.htm
│  ├─ index.htm
│  └─ members.htm
└─ webconfig.json
</code></pre><p><em>views/partials/head.htm</em></p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en-us&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;Hello world&lt;/title&gt;
        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;stylesheets/common.css&quot; media=&quot;all&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
</code></pre><p><em>views/partials/foot.htm</em></p><pre><code class="lang-html">        &lt;script async type=&quot;text/javascript&quot; src=&quot;javascript/common.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><em>views/index.htm</em></p><pre><code class="lang-html">    &lt;?- include(&quot;partials/head.htm&quot;) ?&gt;

    &lt;div&gt;
        &lt;h1&gt;Welcome&lt;/h1&gt;
        &lt;p&gt;This is the home page.&lt;/p&gt;
    &lt;/div&gt;

    &lt;?- include(&quot;partials/foot.htm&quot;) ?&gt;
</code></pre><p><em>views/members.htm</em></p><pre><code class="lang-html">    &lt;?- include(&quot;partials/head.htm&quot;) ?&gt;

    &lt;div&gt;
        &lt;h1&gt;List of members&lt;/h1&gt;
        &lt;p&gt;It is the Members page.&lt;/p&gt;
    &lt;/div&gt;

    &lt;?- include(&quot;partials/foot.htm&quot;) ?&gt;
</code></pre><p>you will have access to the addresses:</p><ul>
<li><em><a href="http://localhost/">http://localhost/</a></em></li>
<li><em><a href="http://localhost/list-of-members/">http://localhost/list-of-members/</a></em></li>
</ul><h3 id="manage-variations-within-the-same-view">Manage variations within the same view</h3><p>It is possible with the same view and the same includes, generating pages with different contents (useful in generation HTML assets mode). Activate the variations with the following configuration:</p><pre><code class="lang-json">{
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;variationsRelativePath&quot;: &quot;variations&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;template.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;,
        },
        &quot;/list-of-members/&quot;: {
            &quot;view&quot;: &quot;template.htm&quot;,
            &quot;variation&quot;: &quot;members.json&quot;,
        }
    }
}
</code></pre><p>with the following files:</p><pre><code>├─ assets/
│  ├─ stylesheets/
│  │  ├─ common.css
│  │  ├─ index.css
│  │  └─ members.css
│  └─ javascript/
│     ├─ common.js
│     ├─ index.js
│     └─ members.js
├─ variations/
│  ├─ common.json
│  ├─ index.json
│  └─ members.json
├─ views/
│  ├─ partials/
│  │  ├─ head.htm
│  │  └─ foot.htm
│  └─ template.htm
└─ webconfig.json
</code></pre><p><em>views/partials/head.htm</em></p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en-us&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;&lt;?- specific.titlePage ?&gt;&lt;/title&gt;

        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;stylesheets/&lt;?= common.classCssCommon ?&gt;.css&quot; media=&quot;all&quot; /&gt;
        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;stylesheets/&lt;?= specific.classPage ?&gt;.css&quot; media=&quot;all&quot; /&gt;
    &lt;/head&gt;
    &lt;body class=&quot;&lt;?= specific.classPage ?&gt;&quot;&gt;
</code></pre><p><em>views/partials/foot.htm</em></p><pre><code class="lang-html">        &lt;script async type=&quot;text/javascript&quot; src=&quot;javascript/&lt;?= common.classJsCommon ?&gt;.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><em>views/template.htm</em></p><pre><code class="lang-html">    &lt;?- include(&quot;partials/head.htm&quot;) ?&gt;

    &lt;div class=&quot;title&quot;&gt;&lt;?- common.titleWebsite ?&gt;&lt;/div&gt;

    &lt;div&gt;
        &lt;h1&gt;&lt;?- specific.titlePage ?&gt;&lt;/h1&gt;
        &lt;?- specific.content ?&gt;
    &lt;/div&gt;

    &lt;?- include(&quot;partials/foot.htm&quot;) ?&gt;
</code></pre><p><em>variations/common.json</em></p><pre><code class="lang-json">{
    &quot;titleWebsite&quot;: &quot;Website title&quot;,
    &quot;classCssCommon&quot;: &quot;common&quot;,
    &quot;classJsCommon&quot;: &quot;common&quot;
}
</code></pre><p><em>variations/index.json</em></p><pre><code class="lang-json">{
    &quot;titlePage&quot;: &quot;Welcome&quot;,
    &quot;classPage&quot;: &quot;index&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;This is the home page.&lt;/p&gt;&quot;
}
</code></pre><p><em>variations/members.json</em></p><pre><code class="lang-json">{
    &quot;titlePage&quot;: &quot;List of members&quot;,
    &quot;classPage&quot;: &quot;members&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;It is the Members page.&lt;/p&gt;&quot;
}
</code></pre><p>you will have access to the addresses:</p><ul>
<li><em><a href="http://localhost/">http://localhost/</a></em></li>
<li><em><a href="http://localhost/list-of-members/">http://localhost/list-of-members/</a></em></li>
</ul><p><em>Note : If</em> <strong><em>variationsRelativePath</em></strong> <em>is not present in &quot;webconfig.json&quot;, default variations folder is</em> <strong><em>variations</em></strong>. <strong><em>variationsRelativePath</em></strong> <em>is useful only to change the name/path of directory.</em></p><h3 id="manage-internationalization-i18n">Manage Internationalization (i18n)</h3><h4 id="all-languages-on-the-same-site">All languages on the same site</h4><p>On the same principle, the variations can be used to create the same page, but in different languages:</p><pre><code class="lang-json">{
    &quot;languageCode&quot;: &quot;en-us&quot;,
    &quot;variationsRelativePath&quot;: &quot;l10n&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;landing.htm&quot;,
            &quot;variation&quot;: &quot;landing.json&quot;
        },
        &quot;/home/&quot;: {
            &quot;view&quot;: &quot;home.htm&quot;,
            &quot;variation&quot;: &quot;home.json&quot;
        },
        &quot;/accueil/&quot;: {
            &quot;view&quot;: &quot;home.htm&quot;,
            &quot;variation&quot;: &quot;home.json&quot;,
            &quot;languageCode&quot;: &quot;fr-fr&quot;
        }
    }
}
</code></pre><p><em>Note : In this example I decided to do without a common variation file, because I did not specify</em> <strong><em>commonVariation</em></strong>. <em>I also completely arbitrarily decided to rename my folder</em> <strong><em>variations</em></strong> <em>to</em> <strong><em>l10n</em></strong> (localization).</p><p>with the following files:</p><pre><code>├─ l10n/
│  ├─ landing.json
│  ├─ en-us
│  │  └─ home.json
│  └─ fr-fr
│     └─ home.json
├─ views/
│  ├─ partials/
│  │  ├─ head.htm
│  │  └─ foot.htm
│  ├─ landing.htm
│  └─ home.htm
└─ webconfig.json
</code></pre><p><em>views/partials/head.htm</em></p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&lt;?= languageCode ?&gt;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;&lt;?= specific.titlePage ?&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body class=&quot;&lt;?= specific.classPage ?&gt;&quot;&gt;
</code></pre><p><em>views/partials/foot.htm</em></p><pre><code class="lang-html">    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><em>views/landing.htm</em></p><pre><code class="lang-html">    &lt;?- include(&quot;partials/head.htm&quot;) ?&gt;

    &lt;select&gt;
        &lt;? for (var i = 0; i &lt; specific.selectLabel.length; i++) { ?&gt;
        &lt;option&gt;&lt;?= specific.selectLabel[i] ?&gt;&lt;/option&gt;
        &lt;? } ?&gt;
    &lt;/select&gt;

    &lt;?- include(&quot;partials/foot.htm&quot;) ?&gt;
</code></pre><p><em>views/home.htm</em></p><pre><code class="lang-html">    &lt;?- include(&quot;partials/head.htm&quot;) ?&gt;

    &lt;div&gt;
        &lt;h1&gt;&lt;?- specific.titlePage ?&gt;&lt;/h1&gt;
        &lt;?- specific.content ?&gt;
    &lt;/div&gt;

    &lt;?- include(&quot;partials/foot.htm&quot;) ?&gt;
</code></pre><p><em>l10n/landing.json</em></p><pre><code class="lang-json">{
    &quot;titlePage&quot;: &quot;Landing&quot;,
    &quot;classPage&quot;: &quot;landing&quot;,
    &quot;selectLabel&quot;: [
        &quot;English&quot;,
        &quot;Français&quot;
    ]
}
</code></pre><p><em>l10n/en-us/home.json</em></p><pre><code class="lang-json">{
    &quot;titlePage&quot;: &quot;Welcome&quot;,
    &quot;classPage&quot;: &quot;home&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;This is a home page.&lt;/p&gt;&quot;
}
</code></pre><p><em>l10n/fr-fr/home.json</em></p><pre><code class="lang-json">{
    &quot;titlePage&quot;: &quot;Bienvenue&quot;,
    &quot;classPage&quot;: &quot;home&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;C&#39;est la page d&#39;accueil.&lt;/p&gt;&quot;
}
</code></pre><p>you will have access to the addresses:</p><ul>
<li><em><a href="http://localhost/">http://localhost/</a></em></li>
<li><em><a href="http://localhost/home/">http://localhost/home/</a></em></li>
<li><em><a href="http://localhost/accueil/">http://localhost/accueil/</a></em></li>
</ul><p><em>Note : By default is the</em> <strong><em>languageCode</em></strong> <em>root that determines the display language of the wesite. However, specifically by page language, we can be changed also the</em> <strong><em>languageCode*</em></strong>. <em>You should also know that once the site or page has a</em> <strong><em>languageCode</em></strong> <em>in the configuration, variations files must be placed in a subdirectory named with the</em> <strong><em>languageCode</em></strong>.</p><h4 id="use-both-variations-and-localizations">Use both variations and localizations</h4><p>You may have noticed in the previous example that the <code>landing.json</code> file was not in the <code>en-us/</code> or <code>fr-fr/</code>. This is quite possible and means that will be used in languages that do not have it in their file.</p><p>Also, when a <code>languageCode</code> is specified, NodeAtlas seek first hand the value in the corresponding folder file. If it was not there, so he went to fetch the parent folder (the one used as standard for variations without localization).</p><p>This will allow you, for example, to manage master language directly in the variation folder. So with the following example:</p><pre><code>┊┉
├─ variations/
│  ├─ common.json
│  ├─ home.json
│  ├─ fr-fr
│  │  ├─ common.json
│  │  └─ home.json
┊┉
</code></pre><p>you can</p><ul>
<li>manage the version <code>en-us</code> directly to the root of <code>variations/</code> (as NodeAtlas find nothing in<code>en-us</code> then it uses the values of the root files) and</li>
<li>manage the <code>fr-fr</code> release in the<code>fr-fr/</code>,</li>
</ul><p>thus, if a sentence has not yet translated into a file <code>fr-fr</code>, instead of returning an error, NodeAtlas return the root version or the version<code>en-us</code>.</p><h4 id="each-language-has-its-configuration">Each language has its configuration</h4><p>You can also choose to configure each language in a &quot;webconfig.json&quot; different. With the following set of file:</p><pre><code>├─ variations/
│  ├─ landing.json
│  ├─ en-us
│  │  ├─ home.json
│  │  └─ members.json
│  └─ fr-fr
│     ├─ home.json
│     └─ members.json
├─ views/
│  ├─ partials/
│  │  ├─ head.htm
│  │  └─ foot.htm
│  ├─ landing.htm
│  ├─ home.htm
│  └─ members.htm
├─ webconfig.json
├─ webconfig.en-us.json
└─ webconfig.fr-fr.json
</code></pre><p>you could have &quot;webconfig.json&quot; next:</p><p><em>webconfig.json</em></p><pre><code class="lang-json">{
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;landing.htm&quot;,
            &quot;variation&quot;: &quot;landing.json&quot;
        }
    }
}
</code></pre><p><em>webconfig.en-us.json</em></p><pre><code class="lang-json">{
    &quot;httpPort&quot;: 81,
    &quot;urlRelativeSubPath&quot;: &quot;english&quot;,
    &quot;languageCode&quot;: &quot;en-us&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;home.htm&quot;,
            &quot;variation&quot;: &quot;home.json&quot;
        },
        &quot;/members-list/&quot;: {
            &quot;view&quot;: &quot;members.htm&quot;,
            &quot;variation&quot;: &quot;members.json&quot;
        }
    }
}
</code></pre><p><em>webconfig.fr-fr.json</em></p><pre><code class="lang-json">{
    &quot;httpPort&quot;: 82,
    &quot;urlRelativeSubPath&quot;: &quot;francais&quot;,
    &quot;languageCode&quot;: &quot;fr-fr&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;home.htm&quot;,
            &quot;variation&quot;: &quot;home.json&quot;
        },
        &quot;/list-of-members/&quot;: {
            &quot;view&quot;: &quot;members.htm&quot;,
            &quot;variation&quot;: &quot;members.json&quot;
        }
    }
}
</code></pre><p>and have access to addresses:</p><ul>
<li><em><a href="http://localhost/">http://localhost/</a></em></li>
<li><em><a href="http://localhost:81/english/">http://localhost:81/english/</a></em></li>
<li><em><a href="http://localhost:81/english/">http://localhost:81/english/</a></em></li>
<li><em><a href="http://localhost:81/english/members-list/">http://localhost:81/english/members-list/</a></em></li>
<li><em><a href="http://localhost:82/francais/">http://localhost:82/francais/</a></em></li>
<li><em><a href="http://localhost:82/francais/list-of-members/">http://localhost:82/francais/list-of-members/</a></em></li>
</ul><p>It is then possible to reverse proxy with <a href="production-environment.html#proxy">Bouncy</a> (for example) to bring all URLs on port 80 to obtain:</p><ul>
<li><em><a href="http://www.website.ext/">http://www.website.ext/</a></em></li>
<li><em><a href="http://www.website.ext/english/">http://www.website.ext/english/</a></em></li>
<li><em><a href="http://www.website.ext/english/">http://www.website.ext/english/</a></em></li>
<li><em><a href="http://www.website.ext/english/members-list/">http://www.website.ext/english/members-list/</a></em></li>
<li><em><a href="http://www.website.ext/francais/">http://www.website.ext/francais/</a></em></li>
<li><em><a href="http://www.website.ext/francais/list-of-members/">http://www.website.ext/francais/list-of-members/</a></em></li>
</ul><h3 id="manage-the-urls-anatomy">Manage the URLs&#39; anatomy</h3><p>By default, if you use the following configuration:</p><p><em>webconfig.json</em></p><pre><code class="lang-json">{
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;
        }
    }
}
</code></pre><p>with the following view :</p><p><em>views/index.htm</em></p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en-us&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;URLs&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;&lt;?- urlRootPath ?&gt;&lt;/div&gt;
        &lt;div&gt;&lt;?- urlSubPath ?&gt;&lt;/div&gt;
        &lt;div&gt;&lt;?- urlBasePath ?&gt;&lt;/div&gt;
        &lt;div&gt;&lt;?- urlFilePath ?&gt;&lt;/div&gt;
        &lt;div&gt;&lt;?- urlQueryPath ?&gt;&lt;/div&gt;
        &lt;div&gt;&lt;?- urlPath ?&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>This is the same to using it:</p><p><em>webconfig.json</em></p><pre><code class="lang-json">{
    &quot;httpHostname&quot;: &quot;localhost&quot;,
    &quot;httpPort&quot;: 80,
    &quot;httpSecure&quot;: false,
    &quot;urlRelativeSubPath&quot;: &quot;&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;
        }
    }
}
</code></pre><p>and you will be access to the URL: <em><a href="http://localhost/">http://localhost/</a></em> to see this content:</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en-us&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;URLs&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;http://localhost&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;http://localhost&lt;/div&gt;
        &lt;div&gt;/&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;http://localhost/&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Then change the configuration to this:</p><pre><code class="lang-json">{
    &quot;httpHostname&quot;: &quot;127.0.0.1&quot;,
    &quot;httpPort&quot;: 7777,
    &quot;httpSecure&quot;: &quot;security/server&quot;,
    &quot;urlRelativeSubPath&quot;: &quot;sub/folder&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;
        }
    }
}
</code></pre><p>to access this time to : <em><a href="https://127.0.0.1:7777/sub/folder/index.html?test=ok">https://127.0.0.1:7777/sub/folder/index.html?test=ok</a></em> to see this content:</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en-us&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;URLs&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;https://127.0.0.1:7777&lt;/div&gt;
        &lt;div&gt;/sub/folder&lt;/div&gt;
        &lt;div&gt;https://127.0.0.1:7777/sub/folder&lt;/div&gt;
        &lt;div&gt;/index.html&lt;/div&gt;
        &lt;div&gt;?test=ok&lt;/div&gt;
        &lt;div&gt;https://127.0.0.1:7777/sub/folder/index.html&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Note : This example work only if you have <code>server.crt</code> and <code>server.key</code> files valide into <code>security/</code> folder. Try without <code>&quot;httpSecure&quot;: &quot;security/server&quot;</code> to see it work without <code>https</code> in URLs.</p><h3 id="create-your-own-webconfig-s-variables">Create your own Webconfig&#39;s Variables</h3><p>Imagine two webconfigs in which we create our own variables as follows:</p><ol>
<li>&quot;webconfig.json&quot;</li>
</ol><pre><code class="lang-json">{
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;
        }
    },
    &quot;_minified&quot;: &quot;&quot;
}
</code></pre><ol>
<li>&quot;webconfig.prod.json&quot;</li>
</ol><pre><code class="lang-json">{
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;
        }
    },
    &quot;_minified&quot;: &quot;.min&quot;
}
</code></pre><p>with this set of files</p><pre><code>├─ assets/
│  ├─ stylesheets/
│  │  ├─ common.css
│  │  └─ common.min.css
│  └─ javascript/
│     ├─ common.js
│     └─ common.min.js
├─ views/
│  └─ index.htm
├─ webconfig.json
└─ webconfig.prod.json
</code></pre><p>and &quot;index.htm&quot; containing:</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en-us&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;Hello world&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;stylesheets/common&lt;?= webconfig._minified ?&gt;.css&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;This is a test to get a file minify/unminify.&lt;/div&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/common&lt;?= webconfig._minified ?&gt;.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>To run (from the site folder) the the command:</p><pre><code class="lang-bash">\&gt; node &lt;/path/to/&gt;node-atlas/
</code></pre><p>We will have to address &quot;<a href="http://localhost/">http://localhost/</a>&quot; the following output with non-minified files:</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr-fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;Hello world&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;stylesheets/common.css&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;This is a test to get a file minify/unminify.&lt;/div&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/common.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>However, running the command:</p><pre><code class="lang-bash">\&gt; node &lt;/path/to/&gt;node-atlas/ --webconfig webconfig.prod.json
</code></pre><p>We will have to address &quot;<a href="http://localhost/">http://localhost/</a>&quot; the following output with minified files:</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr-fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;Hello world&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;stylesheets/common.min.css&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;This is a test to get a file minify/unminify.&lt;/div&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/common.min.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><em>Note : It is better to prefix his personal variables with &quot;_&quot; to avoid conflicts with existing or future configuration variables.</em></p><h3 id="generate-html-template">Generate HTML Template</h3><h4 id="generate-html-designs">Generate HTML Designs</h4><p>With the following configuration it is possible to generate HTML rendering assets of each page in a linked file. The file will be (re)created every display of page in your browser.</p><pre><code class="lang-json">{
    &quot;htmlGenerationBeforeResponse&quot;: true,
    &quot;assetsRelativePath&quot;: &quot;../HTML/&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../HTML/&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;,
            &quot;output&quot;: &quot;/index.html&quot;
        },
        &quot;/list-of-members/&quot;: {
            &quot;view&quot;: &quot;members.htm&quot;,
            &quot;output&quot;: &quot;/members/list.html&quot;
        },
        &quot;/list-of-members/?foo=bar&quot;: {
            &quot;view&quot;: &quot;members.htm&quot;,
            &quot;output&quot;: false
        },
        &quot;/no/output/parameter/&quot;: {
            &quot;view&quot;: &quot;members.htm&quot;
        }
    }
}
</code></pre><p>and the following set of files:</p><pre><code>├─ HTML/
│  ├─ stylesheets/
│  │  ├─ common.css
│  └─ javascript/
│     └─ common.js
├─ views/
│  ├─ index.htm
│  └─ members.htm
└─ webconfig.json
</code></pre><p>can physically create following output:</p><pre><code>├─ HTML/
│  ├─ stylesheets/
│  │  ├─ common.css
│  ├─ javascript/
│  │  └─ common.js
│  ├─ index.html
│  ├─ members/
│  │  └─ list.html
│  └─ no/
│     └─ output/
│        └─ parameter ⤆ Ceci est un fichier
├─ views/
│  ┊┉
└─ webconfig.json
</code></pre><p>by going to the address:</p><ul>
<li><em><a href="http://localhost/">http://localhost/</a></em></li>
<li><em><a href="http://localhost/list-of-members/">http://localhost/list-of-members/</a></em></li>
<li><em><a href="http://localhost/no/output/parameter/">http://localhost/no/output/parameter/</a></em></li>
</ul><p><em>Note : No output page are generated for &quot;/list-of-members/?foo=bar&quot; because <code>output</code> is set to <code>false</code>. Use this value to ignore a route generation.</em></p><p>The generation starts when displaying the page if <strong><em>htmlGenerationBeforeResponse</em></strong> exist and if it is <strong><em>true</em></strong>.</p><h4 id="generate-website-without-server-side">Generate website without server-side</h4><p>You can also manager a simple HTML website page with <code>--generate</code> command.</p><p>If <code>htmlGenerationBeforeResponse</code> is setted to <strong><em>false</em></strong> (or removed) the only way to generate all the pages of the website will be via the command <code>node &lt;/path/to/&gt;node-atlas/ --generate</code> will generate all pages once if <code>serverlessRelativePath</code> exist. Of course in all cases this command work and allow you to regenerate all pages after a change into all page (a change in a component called on all pages e.g.).</p><p>Also with <code>--generate</code> , the entire <code>assetsRelativePath</code> folder (public folder files) will be copied in the <code>serverlessRelativePath</code> if both folder does not have the same path, and if <code>serverlessRelativePath/</code> folder exist. It really allows you to get the stand-alone pages you want in output folder with all files which they call (CSS / JS / Images, etc.).</p><p>You could desactivate the HTML generation, even if a directory of <code>serverlessRelativePath</code> exist in the système file, with <code>htmlGenerationEnable</code> à <code>false</code>.</p><p>See this with the following configuration:</p><pre><code class="lang-json">{
    &quot;languageCode&quot;: &quot;fr-fr&quot;,
    &quot;enableIndex&quot;: true,
    &quot;serverlessRelativePath&quot;: &quot;serverless&quot;,
    &quot;routes&quot;: {
        &quot;/cv.html&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;
        },
        &quot;/en/cv.html&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;,
            &quot;languageCode&quot;: &quot;en&quot;
        }
    }
}
</code></pre><p>and the following set of files:</p><pre><code>├─ assets/
│  ├─ stylesheets/
│  │  └─ common.css
│  └─ javascript/
│     └─ common.js
├─ serverless/
├─ variations/
│  ├─ fr-fr/
│  │  └─ index.json
│  └─ en/
│     └─ index.json
├─ views/
│  └─ index.htm
└─ webconfig.json
</code></pre><p>With <code>node &lt;path/to/&gt;node-atlas/ --browse</code>, to address <em><a href="http://localhost/">http://localhost/</a></em> will show a list of pages your site components (with <strong>enableIndex</strong> set to <strong>true</strong>).</p><p>It will do more than, once <code>--generate</code> was used, enjoy your HTML site in the folder:</p><pre><code>┊┉
├─ serverless/
│  ├─ stylesheets/
│  │  └─ common.css
│  ├─ javascript/
│  │  └─ common.js
│  ├─ cv.html
│  └─ en/
│     └─ cv.html
┊┉
</code></pre><p><em>Note : If</em> <strong><em>serverlessRelativePath</em></strong> <em>is not present in &quot;webconfig.json&quot;, default folder for generated files is</em> <strong><em>serverless/</em></strong>. <strong><em>serverlessRelativePath</em></strong> <em>is useful only to change the name/path of directory.</em></p><h3 id="ejs-template-engine">EJS Template Engine</h3><p>By default, NodeAtlas already use <a href="http://ejs.co/">EJS template engine</a>, it&#39;s that allows you to use JavaScript between <code>&lt;?</code> and <code>?&gt;</code> tags. However, EJS works by default with <code>&lt;%</code> and <code>%&gt;</code>. You could set this values or set others values if you want.</p><pre><code class="lang-json">{
    &quot;templateEngineDelimiter&quot;: &quot;%&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.htm&quot;
        }
    }
}
</code></pre><p>For example, to include part of a file instruction is used <code>&lt;?- include(&quot;partials/head.htm&quot;) ?&gt;</code>. It would be possible to do it with <code>&lt;%- include(&quot;partials/head&quot;) %&gt;</code> with the configuration below:</p><p>See the exemple in files below:</p><p><em>webconfig.json</em></p><pre><code class="lang-json">{
    &quot;templateEngineDelimiter&quot;: true,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.ejs&quot;,
            &quot;variation&quot;: &quot;index.json&quot;
        }
    }
}
</code></pre><p><em>variations/common.json</em></p><pre><code class="lang-json">{
    &quot;titleWebsite&quot;: &quot;Website Title&quot;,
    &quot;classCssCommon&quot;: &quot;common&quot;,
    &quot;classJsCommon&quot;: &quot;common&quot;
}
</code></pre><p><em>variations/index.json</em></p><pre><code class="lang-json">{
    &quot;titlePage&quot;: &quot;Welcome&quot;,
    &quot;classPage&quot;: &quot;index&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;This is the Homepage.&lt;/p&gt;&quot;
}
</code></pre><p><em>views/partials/head.ejs</em></p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr-fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;&lt;%- specific.titlePage %&gt;&lt;/title&gt;
        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;stylesheets/&lt;%= common.classCssCommon %&gt;.css&quot; media=&quot;all&quot; /&gt;
        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;stylesheets/&lt;%= specific.classPage %&gt;.css&quot; media=&quot;all&quot; /&gt;
    &lt;/head&gt;
    &lt;body class=&quot;&lt;%= specific.classPage %&gt;&quot;&gt;
</code></pre><p><em>views/partials/foot.ejs</em></p><pre><code class="lang-html">        &lt;script async type=&quot;text/javascript&quot; src=&quot;javascript/&lt;%= common.classJsCommon %&gt;.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><em>views/index.ejs</em></p><pre><code class="lang-html">    &lt;%- include(&quot;partials/head&quot;) %&gt;

    &lt;div class=&quot;title&quot;&gt;&lt;%- common.titleWebsite %&gt;&lt;/div&gt;

    &lt;div&gt;
        &lt;h1&gt;&lt;%- specific.titlePage %&gt;&lt;/h1&gt;
        &lt;%- specific.content %&gt;
    &lt;/div&gt;

    &lt;%- include(&quot;partials/foot&quot;) %&gt;
</code></pre><p>Learn all about the possibilities of the template engine consult <a href="http://ejs.co/">the documentation EJS</a></p><p><em>Note : If nothing is set,</em> <strong><em>templateEngineDelimiter</em></strong> <em>is set to</em> <strong><em>?</em></strong>.</p><h3 id="pug-template-engine">PUG Template Engine</h3><p>It&#39;s also possible to change EJS template to <a href="https://pugjs.org/">PUG Template Engine</a> (new Jade template name) to generate pages with variations. This is possible for all pages like this:</p><pre><code class="lang-json">{
    &quot;enablePug&quot;: true,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.pug&quot;
        },
        &quot;/contenu/&quot;: {
            &quot;view&quot;: &quot;content.pug&quot;
        }
    }
}
</code></pre><p>or just for one page like this:</p><pre><code>{
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.pug&quot;
        },
        &quot;/contenu/&quot;: {
            &quot;enablePug&quot;: true,
            &quot;view&quot;: &quot;content.pug&quot;
        }
    }
}
</code></pre><p>It&#39;s also possible to reset EJS only for one page.</p><pre><code>{
    &quot;enablePug&quot;: true,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;enablePug&quot;: false,
            &quot;view&quot;: &quot;index.pug&quot;
        },
        &quot;/contenu/&quot;: {
            &quot;view&quot;: &quot;content.pug&quot;
        }
    }
}
</code></pre><p>We can see now an example with set of files below:</p><p><em>webconfig.json</em></p><pre><code>{
    &quot;enablePug&quot;: true,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;view&quot;: &quot;index.pug&quot;,
            &quot;variation&quot;: &quot;index.json&quot;
        }
    }
}
</code></pre><p><em>variations/common.json</em></p><pre><code class="lang-json">{
    &quot;titleWebsite&quot;: &quot;Titre du site&quot;,
    &quot;classCssCommon&quot;: &quot;common&quot;,
    &quot;classJsCommon&quot;: &quot;common&quot;
}
</code></pre><p><em>variations/index.json</em></p><pre><code class="lang-json">{
    &quot;titlePage&quot;: &quot;Bienvenue&quot;,
    &quot;classPage&quot;: &quot;index&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;C&#39;est la page d&#39;accueil.&lt;/p&gt;&quot;
}
</code></pre><p><em>views/partials/head.pug</em></p><pre><code class="lang-html">doctype html
html(lang=&quot;fr-fr&quot;)
    head
        meta(charset=&quot;utf-8&quot;)
        title #{specific.titlePage}
        link(type=&quot;text/css&quot;, rel=&quot;stylesheet&quot;, href=&quot;stylesheets/&quot; + common.classCssCommon + &quot;.css&quot;, media=&quot;all&quot;)
        link(type=&quot;text/css&quot;, rel=&quot;stylesheet&quot;, href=&quot;stylesheets/&quot; + specific.classPage + &quot;.css&quot;, media=&quot;all&quot;)
    body(class=specific.classPage)
</code></pre><p><em>views/partials/foot.pug</em></p><pre><code class="lang-html">script(async, type=&quot;text/javascript&quot;, src=&quot;javascript/&quot; + common.classJsCommon + &quot;.js&quot;)
</code></pre><p><em>views/index.pug</em></p><pre><code class="lang-html">include partials/head

div
    h1 #{specific.titlePage}
    | !{specific.content}

include partials/foot
</code></pre><p>Learn all about the possibilities of the template engine consult <a href="https://pugjs.org/">the documentation PUG</a></p><p><em>Note : If nothing is set,</em> <strong><em>enablePug</em></strong> <em>is set to</em> <strong><em>false</em></strong>.</p>