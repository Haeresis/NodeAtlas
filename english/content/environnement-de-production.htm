<h2 id="environnement-de-production">Environnement de Production</h2><p>C&#39;est bien de développer, mais il est temps de faire tourner vos réalisations sur des serveurs de production. Voici divers exemple.</p><h3 id="dans-un-environnement-windows-server-avec-iisnode">Dans un environnement Windows Server avec iisnode</h3><p>Dans un environnement Windows Server 2013 avec IIS8 il faut :</p><ol>
<li>Installer <a href="http://nodejs.org/download/">l’exécutable node.exe</a> capable d’exécuter du code JavaScript.</li>
<li>Installer <a href="http://www.iis.net/downloads/microsoft/url-rewrite">le module IIS8 UrlRewrite</a> pour mapper les pages exécutées à une Url de sortie.</li>
<li>Installer <a href="https://github.com/tjanczuk/iisnode/downloads">le module IIS8 issnode</a> pour lire des web.config et manager des site via IIS (Management de pool d’application, démarrage/arrêt de site, etc...).</li>
</ol><h4 id="cr-er-une-application">Créer une application</h4><p>Dans IIS8, créez un Website et créez une Application.</p><p>Le contenu de votre application sera celui du site mélangé à celui de NodeAtlas. Cela signifie donc que ceci :</p><pre><code>node-atlas/
├─ node_modules/
│  ┊┉
├─ languages/
│  ┊┉
│  └─ default.json
┊┉
└─ index.js
site-hello-world/
├─ assets/
│  ┊┉
├─ views/
│  └─ index.htm
└─ webconfig.json
</code></pre><p>devient ceci :</p><pre><code>site-hello-world/
├─ node_modules/
│  ┊┉
├─ languages/
│  ┊┉
│  └─ default.json
┊┉
├─ assets/
│  ┊┉
├─ views/
│  └─ index.htm
├─ index.js
└─ webconfig.json
</code></pre><p>Vous rajouterez à cet ensemble de fichiers, un fichier supplémentaire nommé <code>web.config</code> dont le contenu est le suivant :</p><pre><code class="lang-xml">&lt;configuration&gt;
    &lt;system.webServer&gt;
        &lt;handlers&gt;
            &lt;add name=&quot;iisnode&quot; path=&quot;node-atlas.js&quot; verb=&quot;*&quot; modules=&quot;iisnode&quot; /&gt;
        &lt;/handlers&gt;
        &lt;rewrite&gt;
            &lt;rules&gt;
                &lt;rule name=&quot;LogFile&quot; patternSyntax=&quot;ECMAScript&quot; stopProcessing=&quot;true&quot;&gt;
                     &lt;match url=&quot;^[a-zA-Z0-9_\-]+\.js\.logs\/\d+\.txt$&quot;/&gt;
                &lt;/rule&gt;
                &lt;rule name=&quot;NodeInspector&quot; patternSyntax=&quot;ECMAScript&quot; stopProcessing=&quot;true&quot;&gt;
                    &lt;match url=&quot;^node-atlas.js\/debug[\/]?&quot; /&gt;
                &lt;/rule&gt;
                &lt;rule name=&quot;StaticContent&quot;&gt;
                     &lt;action type=&quot;Rewrite&quot; url=&quot;assets{REQUEST_URI}&quot;/&gt;
                &lt;/rule&gt;
                &lt;rule name=&quot;DynamicContent&quot;&gt;
                     &lt;conditions&gt;
                          &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; negate=&quot;True&quot;/&gt;
                     &lt;/conditions&gt;
                     &lt;action type=&quot;Rewrite&quot; url=&quot;node-atlas.js&quot;/&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
        &lt;/rewrite&gt;
    &lt;/system.webServer&gt;
&lt;/configuration&gt;
</code></pre><p>pour au final obtenir :</p><pre><code>site-hello-world/
├─ node_modules/
│  ┊┉
├─ languages/
│  ┊┉
│  └─ default.json
┊┉
├─ assets/
│  ┊┉
├─ views/
│  └─ index.htm
├─ index.js
├─ webconfig.json
└─ web.config
</code></pre><p>Il ne vous restera plus qu&#39;à cliquer sur « Browse <url-of-site> » dans votre panneau d&#39;action IIS8. Vous pouvez dès lors manager votre site (Démarrage / Arrêt / Recyclage de Pool) comme pour n&#39;importe quelle autre application IIS8.</url-of-site></p><h4 id="webconfig-exemple">webconfig exemple</h4><p>Un webconfig exemple pour une production :</p><pre><code class="lang-js">{
    &quot;urlPort&quot;: 80,
    &quot;httpPort&quot;: 7777,
    &quot;httpHostname&quot;: &quot;www.example.fr&quot;,
    &quot;routes&quot;: {
        ...
    }
}
</code></pre><h3 id="dans-un-environnement-unix-avec-forever">Dans un environnement Unix avec forever</h3><p>Il faut pour cela :</p><ol>
<li>Installer <a href="http://nodejs.org/download/">l’exécutable node.exe</a> capable d’exécuter du code JavaScript.</li>
<li>Installer <a href="https://github.com/nodejitsu/forever">le CLI tool forever</a> pour manager vos sites en continue (démarrage, arrêt, redémarrage, etc.).</li>
<li>Faire tourner en plus de vos sites un reverse-proxy pour que toutes vos applications tournent sur le port 80.</li>
</ol><h4 id="quelques-commandes-forever">Quelques commandes forever</h4><p>Pour manager un nouveau site en continue il faut utiliser la commande :</p><pre><code>\&gt; forever start &lt;/path/to/&gt;node-atlas/ --directory &lt;/path/to/your/website/directory/&gt;
</code></pre><p>Pour le stopper, il faut repérer son <strong>uid</strong> avec la commande <code>forever list</code></p><pre><code>\&gt; forever list
</code></pre><p>puis utiliser la commande :</p><pre><code>\&gt; forever stop &lt;uid&gt;
</code></pre><p>ou <code>&lt;uid&gt;</code> est l&#39;<strong>uid</strong> du site qui tourne.</p><h4 id="webconfig-exemple">webconfig exemple</h4><p>Un webconfig exemple pour une production :</p><pre><code class="lang-js">{
    &quot;urlPort&quot;: 80,
    &quot;httpPort&quot;: 7777,
    &quot;httpHostname&quot;: &quot;www.example.fr&quot;,
    &quot;routes&quot;: {
        ...
    }
}
</code></pre><p>Il vous faudra ensuite utiliser un reverse-proxy pour rendre votre site accessible sur le port 80.</p><h4 id="dans-un-environnement-unix-avec-nginx">Dans un environnement Unix avec Nginx</h4><p>Voici un exemple de configuration pour Nginx :</p><pre><code class="lang-javascript">## Server an.example.fr

upstream websocket {
    server Ip_backend:7777;
}

server {

    listen   80;
    server_name an.example.fr;

        keepalive_timeout    60;

    access_log on;

        access_log /var/log/nginx/access.log logstash;
    error_log /var/log/nginx/error-an.example.fr.log;

    location /socket.io/ {
            proxy_pass http://websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection &quot;upgrade&quot;;
    }

    location / {
        proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;

            proxy_pass http://websocket;
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_redirect off;

    }

    error_page 400 401 402 403 405 406 407 408 409 410 411 412 413 414 415 416 417 500 501 502 503 504 505 506 507 /error.html;

    location = /error.html {
            root /var/www/nginx-default;
    }
}
</code></pre><p><code>Ip_backend</code> doit être remplacé par l&#39;IP de votre sous-réseaux privé. Cela peut être <code>127.0.0.1</code> si la node tourne sur le même serveur que Nginx.</p><p><code>websocket</code> peut être remplacé par n&#39;importe quel mot, il faudra alors aussi modifier le <code>proxy_pass</code>. Il doit être unique à chaque node.</p><h3 id="proxy">Proxy</h3><h4 id="bouncy">Bouncy</h4><p>Bouncy est un exemple de reverse-proxy que vous pouvez utiliser pour faire tourner divers sites NodeAtlas (avec d&#39;autres types de site) ensemble sur le même port (le 80).</p><p>Vous pouvez par exemple :</p><ul>
<li>lancer 3 applications Node.js sur les ports 7777, 7778 et 7779 avec forever,</li>
<li>et en plus lancer un server apache sur le port 81</li>
</ul><p>et rendre tous vos sites accessibles derrière des noms de domaines sur le port 80 avec Bouncy par exemple.</p><p>Voici un exemple de configuration avec Bouncy :</p><p><strong>global-server.js</strong></p><pre><code class="lang-javascript">var bouncy = require(&#39;bouncy&#39;);

var server = bouncy(function (request, response, bounce) {
    if (request.headers.host === &#39;beep.example.com&#39;) {
        bounce(7777);
    }
    else if (request.headers.host === &#39;blup.example.com&#39;) {
        bounce(7776);
    }
    else if (request.headers.host === &#39;boop.example.com&#39;) {
        bounce(81);
    }
    else {
        response.statusCode = 404;
        response.end(&#39;no such host&#39;);
    }
});

server.listen(80);
</code></pre><p>que vous pouvez lancer avec :</p><pre><code>\&gt; forever start &lt;/path/to/&gt;global-server.js
</code></pre><p><a href="https://github.com/substack/bouncy">Plus d&#39;informations sur Bouncy</a></p>