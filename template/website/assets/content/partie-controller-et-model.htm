<h2 id="partie-controller-et-model">Partie Controller et Model</h2><p>NodeAtlas ne se contente pas que de faciliter la génération de page web en fonction de variable dans les fichiers de variation. NodeAtlas vous permet également d&#39;intéragir avec le contenu des fichiers variations ou avec le DOM généré en fonction ;</p><ul>
<li>des paramètres dans la partie query de l&#39;url (GET),</li>
<li>des paramètres dans le body de la requête (POST),</li>
<li>de vous connecter à des bases de donner,</li>
<li>de maintenir des sessions, </li>
<li>de faire des échange AJAX ou même Websocket et</li>
<li>de faire bien plus encore !</li>
</ul><h3 id="cycle-de-vie-et-hooks">Cycle de vie et Hooks</h3><p>Pour cela, il vous est possible d&#39;intéragir à divers endroit (Hooks) du cycle de vie de création d&#39;une page grâce à un contrôleur commun (<code>commonController</code>) et à un controlleur spécifique à chaque page (<code>routes[&lt;route&gt;].controller</code>).</p><p>Voici à quoi peut ressembler un <code>webconfig.json</code> permettant d&#39;atteindre tous les points du cycle de vie d&#39;une page.</p><pre><code class="lang-js">{
    &quot;controllersRelativePath&quot;: &quot;controllers&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;,
            &quot;controller&quot;: &quot;index.json&quot;
        }
    }
}
</code></pre><p><em>Note : Si</em> <strong><em>controllersRelativePath</em></strong> <em>n&#39;est pas présent dans « webconfig.json », par défaut le dossier des controlleurs est bien</em> <strong><em>controllers</em></strong>. <strong><em>controllersRelativePath</em></strong> <em>est donc utile seulement pour changer le nom/chemin du répertoire.</em></p><p>et voici le détail des endroits ou vous pouvez intervenir :</p><p><strong>Démarrage de NodeAtlas</strong> </p><blockquote>
<p>Initialisation des modules</p>
<ul>
<li><em>loadModules</em> --&gt; à manipuler depuis le fichier <code>commonController</code> (<code>common.js</code> dans l&#39;exemple).</li>
</ul>
<p>Initialisation des Sessions</p>
<ul>
<li><em>setSessions</em> --&gt; à manipuler depuis le fichier <code>commonController</code> (<code>common.js</code> dans l&#39;exemple).</li>
</ul>
<p>Initialisation de la configuration du serveur</p>
<ul>
<li><em>setConfigurations</em> --&gt; à manipuler depuis le fichier <code>commonController</code> (<code>common.js</code> dans l&#39;exemple).</li>
</ul>
<p>Initialisation des routes</p>
<ul>
<li><em>setRoutes</em> --&gt; à manipuler depuis le fichier <code>commonController</code> (<code>common.js</code> dans l&#39;exemple).</li>
</ul>
<p>Lancement du serveur web</p>
</blockquote><p><strong>Requête/Réponse HTTP de NodeAtlas</strong> </p><blockquote>
<p>Traitement de la Request du Client</p>
<ul>
<li><p><em>changeVariation</em> --&gt; à manipuler depuis le fichier <code>commonController</code> (<code>common.js</code> dans l&#39;exemple).</p>
</li>
<li><p><em>changeVariation</em> --&gt; à manipuler depuis le fichier <code>routes[&lt;route&gt;].controller</code> (<code>index.js</code> dans l&#39;exemple).</p>
</li>
</ul>
<p>Assemblage des Templates et Compilation des Variations =&gt; DOM complet de la Réponse.</p>
<ul>
<li><p><em>changeDom</em> --&gt; à manipuler depuis le fichier <code>commonController</code> (<code>common.js</code> dans l&#39;exemple).</p>
</li>
<li><p><em>changeDom</em> --&gt; à manipuler depuis le fichier <code>routes[&lt;route&gt;].controller</code> (<code>index.js</code> dans l&#39;exemple).</p>
</li>
</ul>
<p>Envoi de la Response au Client</p>
</blockquote><h4 id="changevariation">changeVariation</h4><p>Pour intercepter les variations, vous pouvez soit utiliser le contrôleur commun pour tout le site et/ou également le contrôleur par page.</p><p>Voici un exemple utilisant les deux interceptions, d&#39;abord la commune au deux pages, puis celle de chaque page :</p><pre><code class="lang-js">{
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    }
}
</code></pre><p>avec cet ensemble de fichier :</p><pre><code>components/
— head.htm
— foot.htm
variations/
— common.json
— index.json
controllers/
— common.js
— index.js
templates/
— index.htm
webconfig.json
</code></pre><p>En demandant la page <code>http://localhost/?title=Haeresis</code> en POST avec une variable <code>example=Ceci+est+un+test</code> dans le corp de requête, les fichiers suivants (entre autre) seront utilisés :</p><p><em>variations/common.json</em></p><pre><code class="lang-js">{
    &quot;titleWebsite&quot;: &quot;Titre du site&quot;
}
</code></pre><p><em>variations/index.json</em></p><pre><code class="lang-js">{
    &quot;titlePage&quot;: &quot;Bienvenue&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;C&#39;est la page d&#39;accueil.&lt;/p&gt;&quot;
}
</code></pre><p><em>templates/index.htm</em></p><pre><code class="lang-html">    &lt;%- include(&#39;head.htm&#39;) %&gt;

    &lt;div class=&quot;title&quot;&gt;&lt;%- common.titleWebsite %&gt;&lt;/div&gt;

    &lt;div&gt;
        &lt;h1&gt;&lt;%- specific.titlePage %&gt;&lt;/h1&gt;
        &lt;%- specific.content %&gt;
    &lt;/div&gt;

    &lt;%- include(&#39;foot.htm&#39;) %&gt;
</code></pre><p><em>controllers/common.js</em></p><pre><code class="lang-js">// On intervient avant que les variables soient injectées dans le système de template.
// Ce code sera exécuté pour toute request HTTP, toute page confondue.
exports.changeVariation = function (params, next) {
    var variation = params.variation,
        request = params.request,
        response = params.response;

    // Ici on modifie les variables de variations.

    console.log(variation.common.titleWebsite); // &quot;Titre du site&quot;
    console.log(variation.specific.titlePage); // &quot;Bienvenue&quot;
    console.log(variation.specific.content); // &quot;C&#39;est la page d&#39;accueil.&quot;

    if (request.query[&quot;title&quot;]) {
        variation.specific.titlePage = variation.specific.titlePage + &quot; &quot; + request.query.title;
    }
    if (request.body[&quot;example&quot;]) {
        variation.specific.content = request.body.example;
    }

    console.log(variation.common.titleWebsite); // &quot;Titre du site&quot;
    console.log(variation.specific.titlePage); // &quot;Bienvenue Haeresis&quot;
    console.log(variation.specific.content); // &quot;Ceci est un test&quot;

    // On ré-injecte les modifications.
    next(variation);
};
</code></pre><p><em>controllers/index.js</em></p><pre><code class="lang-js">// On intervient avant que les variables soient injectées dans le système de template.
// Ce code sera exécuté uniquement lors de la demande de la page « / ».
exports.changeVariation = function (params, next) {
    var variation = params.variation,
        request = params.request,
        response = params.response;

    // Ici on modifie les variables de variations.

    console.log(variation.common.titleWebsite); // &quot;Titre du site&quot;
    console.log(variation.specific.titlePage); // &quot;Bienvenue Haeresis&quot;
    console.log(variation.specific.content); // &quot;Ceci est un test&quot;

    variation.common.titleWebsite = &quot;C&#39;est l&#39;accueil, c&#39;est tout.&quot;;
    variation.specific.content = &quot;C&#39;est l&#39;accueil, c&#39;est tout.&quot;;

    console.log(variation.common.titleWebsite); // &quot;C&#39;est l&#39;accueil, c&#39;est tout.&quot;
    console.log(variation.specific.titlePage); // &quot;Bienvenue Haeresis&quot;
    console.log(variation.specific.content); // &quot;C&#39;est l&#39;accueil, c&#39;est tout.&quot;

    // On ré-injecte les modifications.
    next(variation);
};
</code></pre><p>ce qui produit la sortie suivante :</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr-fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;C&#39;est l&#39;accueil, c&#39;est tout.&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;title&quot;&gt;C&#39;est l&#39;accueil, c&#39;est tout.&lt;/div&gt;
        &lt;div&gt;
            &lt;h1&gt;Bienvenue Haeresis&lt;/h1&gt;
            C&#39;est l&#39;accueil, c&#39;est tout.
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Si vous décidez de désabonner la variation spécifique avec le webconfig suivant :</p><pre><code class="lang-js">{
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;
        }
    }
}
</code></pre><p>alors la sortie sera :</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr-fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;Titre du site&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;title&quot;&gt;Titre du site&lt;/div&gt;
        &lt;div&gt;
            &lt;h1&gt;Bienvenue Haeresis&lt;/h1&gt;
            Ceci est un test
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><h4 id="changedom">changeDom</h4><p>Pour intercepter le DOM avant qu&#39;il ne soit renvoyé, vous pouvez soit utiliser le contrôleur commun pour tout le site et/ou également le contrôleur par page.</p><p>Voici un exemple utilisant les deux interceptions, d&#39;abord la commune au deux pages, puis celle de chaque page :</p><pre><code class="lang-js">{
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    }
}
</code></pre><p>avec cet ensemble de fichier :</p><pre><code>variations/
— index.json
controllers/
— common.js
— index.js
templates/
— index.htm
webconfig.json
</code></pre><p>En demandant la page <code>http://localhost/</code> les fichiers suivants (entre autre) seront utilisés :</p><p><em>variations/common.json</em></p><pre><code class="lang-js">{
    &quot;titleWebsite&quot;: &quot;Titre du site&quot;
}
</code></pre><p><em>variations/index.json</em></p><pre><code class="lang-js">{
    &quot;titlePage&quot;: &quot;Bienvenue&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;C&#39;est la page d&#39;accueil.&lt;/p&gt;&quot;
}
</code></pre><p><em>templates/index.htm</em></p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr-fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;&lt;%- common.titleWebsite %&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;title&quot;&gt;&lt;%- common.titleWebsite %&gt;&lt;/div&gt;
        &lt;div&gt;
            &lt;h1&gt;&lt;%- specific.titlePage %&gt;&lt;/h1&gt;
            &lt;%- specific.content %&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><em>controllers/common.js</em></p><pre><code class="lang-js">// On intervient avant que le DOM ne soit renvoyé au Client.
// Ce code sera exécuté pour toute request HTTP, toute page confondue.
exports.changeDom = function (params, next) {
    var NA = this,
        dom = params.dom,
        request = params.request,
        response = params.response,
        cheerio = NA.modules.cheerio, // Récupération de jsdom pour parcourir le DOM avec jQuery.
        $ = cheerio.load(dom, { decodeEntities: false }); // On charge les données pour les manipuler comme un DOM.

    // Après tous les h1 de la sortie HTML « dom »,
    $(&quot;h1&quot;).each(function () {
        var $this = $(this);

        // ...on créé une div,
        $this.after(
            // ... on injecte le contenu du h1 dans la div,
            $(&quot;&lt;div&gt;&quot;).html($this.html())
        );
        // ...et supprime le h1.
        $this.remove();
    });

    // On recrée une nouvelle sortie HTML avec nos modifications.
    dom = $.html();

    // On réinjecte les modifications.
    next(dom);
};
</code></pre><p><em>controllers/index.js</em></p><pre><code class="lang-js">// On intervient avant que le DOM ne soit renvoyé au Client.
// Ce code sera exécuté uniquement lors de la demande de la page « / ».
exports.changeDom = function (params, next) {
    var NA = this,
        dom = params.dom,
        request = params.request,
        response = params.response,
        cheerio = NA.modules.cheerio, // Récupération de jsdom pour parcourir le DOM avec jQuery.
        $ = cheerio.load(dom, { decodeEntities: false }); // On charge les données pour les manipuler comme un DOM.

    // On modifie tous les contenu des noeuds avec la classe `.title`.
    $(&quot;.title&quot;).text(&quot;Modification de Contenu&quot;);

    // On recrée une nouvelle sortie HTML avec nos modifications.
    dom = $.html();

    // On réinjecte les modifications.
    next(dom);
};
</code></pre><p>ce qui produit la sortie suivante :</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr-fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;Titre du site&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;title&quot;&gt;Modification de Contenu&lt;/div&gt;
        &lt;div&gt;
            &lt;div&gt;Bienvenue&lt;/div&gt;
            &lt;p&gt;C&#39;est la page d&#39;accueil.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><h4 id="loadmodules">loadModules</h4><p>Pour charger d&#39;autres modules qui ne sont pas fournis avec NodeAtlas vous pouvez utiliser le contrôleur commun pour tout le site afin de les charger une seule fois et de les rendres disponible dans tous vos controlleurs.</p><p>Voici un exemple utilisant un module externe à NodeAtlas :</p><pre><code class="lang-js">{
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    }
}
</code></pre><p>avec cet ensemble de fichier :</p><pre><code>controllers/
— common.js
— index.js
templates/
— index.htm
webconfig.json
</code></pre><p>En demandant la page <code>http://localhost/</code> les fichiers suivants (entre autre) seront utilisés :</p><p><em>templates/index.htm</em></p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr-fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;Test Module&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;title&quot;&gt;Test Module&lt;/div&gt;
        &lt;div&gt;
            &lt;h1&gt;Test Module&lt;/h1&gt;
            &lt;%- example %&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><em>controllers/common.js</em></p><pre><code class="lang-js">// On intervient avant que la phase de chargement des modules ne soit achevée.
// Ce code sera exécuté au lancement de NodeAtlas.
exports.loadModules = function () {
    // Récupérer l&#39;instance « NodeAtlas » du moteur.
    var NA = this;

    // Associations de chaque module pour y avoir accès partout.
    NA.modules.marked = require(&#39;marked&#39;);
};
</code></pre><p><em>controllers/index.js</em></p><pre><code class="lang-js">// On intervient avant que les variables soient injectées dans le système de template.
// Ce code sera exécuté uniquement lors de la demande de la page « / ».
exports.changeVariation = function (params, next) {
    // Récupérer l&#39;instance « NodeAtlas » du moteur.
    var NA = this,
        variation = params.variation,
        marked = NA.modules.marked;

    variation.example = marked(&quot;I am using __markdown__.&quot;);

    // On ré-injecte les modifications.
    next(variation);
};
</code></pre><p>ce qui produit la sortie suivante :</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr-fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;Test Module&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;title&quot;&gt;Test Module&lt;/div&gt;
        &lt;div&gt;
            &lt;h1&gt;Test Module&lt;/h1&gt;
            &lt;p&gt;I am using &lt;strong&gt;markdown&lt;/strong&gt;.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><h4 id="setconfigurations">setConfigurations</h4><p>Pour configurer le serveur web de NodeAtlas (<a href="http://expressjs.com/">ExpressJs</a>) vous pouvez utiliser le contrôleur commun pour tout le site afin de les charger une seule fois et de les rendres disponible dans tous vos controlleurs.</p><p>Voici un exemple utilisant un middleware pour <a href="http://expressjs.com/">ExpressJs</a> :</p><pre><code class="lang-js">{
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    }
}
</code></pre><p>avec cet ensemble de fichier :</p><pre><code>controllers/
— common.js
templates/
— index.htm
webconfig.json
</code></pre><p>En demandant la page <code>http://localhost/</code> les fichiers suivants (entre autre) seront utilisés :</p><p><em>templates/index.htm</em></p><pre><code class="lang-html">&lt;%- content %&gt;
</code></pre><p><em>controllers/common.js</em></p><pre><code class="lang-js">// On intervient au niveau du serveur avant que celui-ci ne soit démarré.
// Ce code sera exécuté au lancement de NodeAtlas.
exports.setConfigurations = function (next) {
    // Récupérer l&#39;instance « NodeAtlas » du moteur.
    var NA = this;

    // Middleware utilisé lors de chaque requête.
    NA.httpServer.use(function (request, response, next) {
        response.setHeader(&quot;X-Frame-Options&quot;, &quot;ALLOW-FROM http://www.lesieur.name/&quot;);
        next();
    });

    // On ré-injecte les modifications.
    next();
};
</code></pre><p><em>controllers/index.js</em></p><pre><code class="lang-js">// On intervient avant que les variables soient injectées dans le système de template.
// Ce code sera exécuté uniquement lors de la demande de la page « / ».
exports.changeVariation = function (params, next) {
    var variation = params.variation;

    // On prépare le fichier pour un affichage JSON.
    variation.currentRouteParameters.headers = {
        &quot;Content-Type&quot;: &quot;application/json; charset=utf-8&quot;
    };
    variation.content = JSON.stringify(variation, null, &quot;    &quot;);

    // On ré-injecte les modifications.
    next(variation);
};
</code></pre><p>ce qui produit la sortie suivante :</p><pre><code class="lang-html">{
    &quot;urlBasePathSlice&quot;: &quot;http://localhost&quot;,
    &quot;urlBasePath&quot;: &quot;http://localhost/&quot;,
    &quot;urlPath&quot;: &quot;http://localhost/&quot;,
    &quot;pathname&quot;: /* ... */,
    &quot;filename&quot;: /* ... */,
    &quot;params&quot;: {},
    &quot;currentRouteParameters&quot;: { /* ... */ },
    &quot;currentRoute&quot;: &quot;/&quot;,
    &quot;webconfig&quot;: { /* ... */ }
}
</code></pre><h4 id="setsessions">setSessions</h4><p>Pour configurer les sessions client-serveur de NodeAtlas vous pouvez utiliser le contrôleur commun pour tout le site afin de les charger une seule fois et de les rendres disponible dans tous vos controlleurs, voici un exemple de management de Session avec <a href="http://redis.io/">Redis</a>.</p><p>Voici l&#39;ensemble de fichier suivant :</p><pre><code>controllers/
— common.js
templates/
— index.htm
variations/
— common.json
— index.json
webconfig.json
</code></pre><p>Avec le <code>webconfig.json</code> :</p><pre><code class="lang-js">{
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;
        }
    }
}
</code></pre><p>et avec le fichier « common.js » contenant par exemple :</p><pre><code class="lang-js">// On intervient avant que la phase de chargement des modules ne soit achevée.
// Ce code sera exécuté au lancement de NodeAtlas.
exports.loadModules = function () {
    // Récupérer l&#39;instance « NodeAtlas » du moteur.
    var NA = this;

    // Associations de chaque module pour y avoir accès partout.
    NA.modules.RedisStore = require(&#39;connect-redis&#39;);
};

// On intervient au niveau du serveur pendant la configuration des Sessions.
// Ce code sera exécuté au lancement de NodeAtlas.
exports.setSessions = function (next) {
    var NA = this,
        session = NA.modules.session,
        RedisStore = NA.modules.RedisStore(session);

    // On remplace la session par default.
    NA.sessionStore = new RedisStore();

    // On redonne la main à NodeAtlas pour la suite.
    next();
};
</code></pre><h4 id="setroutes">setRoutes</h4><p>Pour configurer les routes de NodeAtlas dynamiquement vous pouvez utiliser le contrôleur commun pour tout le site afin de les charger une seule fois et de les rendres disponible dans tous vos controlleurs.</p><p>Voici l&#39;ensemble de fichier suivant :</p><pre><code>controllers/
— common.js
templates/
— content.htm
— index.htm
variations/
— common.json
webconfig.json
</code></pre><p>Avec le <code>webconfig.json</code> :</p><pre><code class="lang-js">{
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;
        }
    }
}
</code></pre><p>et avec le fichier « common.js » contenant par exemple :</p><pre><code class="lang-js">// On intervient au niveau des routes pendant qu&#39;elles sont ajoutées.
// Ce code sera exécuté au lancement de NodeAtlas.
exports.setConfigurations = function (next) {

    // On récupère l&#39;instance de NodeAtlas en cours.
    var NA = this,

        // Et nous récupérons les routes en provenance du webconfig...
        route = NA.webconfig.routes;

    // ...pour ajouter la route &quot;/content.html&quot; à la liste de nos routes.
    route[&quot;/content.html&quot;] = {
        &quot;template&quot;: &quot;content.htm&quot;
    };

    // On redonne la main à NodeAtlas pour la suite.
    next(); 
};
</code></pre><h3 id="utiliser-les-websocket-à-la-place-des-échanges-ajax">Utiliser les Websocket à la place des échanges AJAX</h3><p>Afin de conserver une liaison ouverte entre la partie Frontale et la partie Serveur de vos applications, NodeAtlas est à même d&#39;utiliser <a href="http://socket.io/">Socket.IO</a> dont vous trouverez plus de détail sur le site officiel.</p><p>Grâce à cela, vous pourrez changer des informations en temps réel sur votre page, mais également sur toutes les autres page ouvertes à travers tous les autres navigateurs.</p><p>Avec l&#39;ensemble de fichier suivant :</p><pre><code>assets/
— javascript/
—— common.js
—— index.js
components/
— foot.htm
— head.htm
— index.htm
controllers/
— common.js
- index.js
variations/
— common.json
— index.json
templates/
— index.htm
webconfig.json
</code></pre><p>Contenant le <code>webconfig.json</code> suivant :</p><pre><code class="lang-json">{
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    }
}
</code></pre><p>et contenant les fichiers de template suivant :</p><p><strong>components/head.htm</strong></p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&lt;%= languageCode %&gt;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;&lt;%- common.titleWebsite %&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body data-hostname=&quot;&lt;%= webconfig.urlWithoutFileName %&gt;&quot; data-subpath=&quot;&lt;%= webconfig.urlRelativeSubPath.slice(1) %&gt;&quot; data-variation=&quot;&lt;%= currentRouteParameters.variation.replace(/\.json/,&#39;&#39;) %&gt;&quot;&gt;
</code></pre><p><em>Note : <code>data-hostname</code> et <code>data-subpath</code> va nous aider à paramètrer Socket.io côté Front.</em></p><p><strong>components/foot.htm</strong></p><pre><code class="lang-html">        &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.socket.io/socket.io-1.2.0.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;javascript/common.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><em>Note : Le fichier frontal de Socket.IO s&#39;injecte ici en global.</em></p><p><strong>components/index.htm</strong></p><pre><code class="lang-html">        &lt;div class=&quot;title&quot;&gt;&lt;%- common.titleWebsite %&gt;&lt;/div&gt;
        &lt;div&gt;
            &lt;h1&gt;&lt;%- specific.titlePage %&gt;&lt;/h1&gt;
            &lt;%- specific.content %&gt;
            &lt;div&gt;&lt;%- new Date() %&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;button&gt;Update&lt;/button&gt;
</code></pre><p><em>Note : Chaque clique sur <code>button</code> raffraichira le contenu de <code>components/index.htm</code>.</em></p><p><strong>templates/index.htm</strong></p><pre><code class="lang-html">    &lt;%- include(&#39;head.htm&#39;) %&gt;
    &lt;div class=&quot;layout&quot;&gt;
    &lt;%- include(&#39;index.htm&#39;) %&gt;
    &lt;/div&gt;
    &lt;script src=&quot;javascript/index.js&quot;&gt;&lt;/script&gt;
    &lt;%- include(&#39;foot.htm&#39;) %&gt;
</code></pre><p><em>Note : On construit ici la page d&#39;accueil <code>/</code>.</em></p><p>ainsi que les fichiers de variations suivant :</p><p><strong>variations/common.json</strong></p><pre><code class="lang-json">{
    &quot;titleWebsite&quot;: &quot;Socket.IO Exemple&quot;
}
</code></pre><p><strong>variations/index.json</strong></p><pre><code class="lang-json">{
    &quot;titlePage&quot;: &quot;Date&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;La date actuelle est :&lt;/p&gt;&quot;
}
</code></pre><p>Jusque là, rien d&#39;inhabituel et tout fonctionnerait sans partie contrôleur. Mais nous allons mettre en place la communication via Socket.IO côté Serveur puis côté Client.</p><p>Côté serveur, nous utiliserons les fichiers suivant :</p><p><strong>controllers/common.js</strong></p><pre><code class="lang-js">var privates = {};

// Chargement des modules pour ce site dans l&#39;objet NodeAtlas.
exports.loadModules = function () {
    // Récupérer l&#39;instance « NodeAtlas » du moteur.
    var NA = this;

    // Associations de chaque module pour y avoir accès partout.
    NA.modules.socketio = require(&#39;socket.io&#39;);
    NA.modules.cookie = require(&#39;cookie&#39;);
};

// Exemple d&#39;utilisation de Socket.IO.
privates.socketIoInitialisation = function (socketio, NA, next) {
    var optionIo = (NA.webconfig.urlRelativeSubPath) ? { path: NA.webconfig.urlRelativeSubPath + &#39;/socket.io&#39;, secure: ((NA.webconfig.httpSecure) ? true : false) } : undefined,
        io = socketio(NA.server, optionIo),
        cookie = NA.modules.cookie,
        cookieParser = NA.modules.cookieParser;

    // Synchronisation des Sessions avec Socket.IO.
    io.use(function(socket, next) {
        var handshakeData = socket.request;

        // Fallback si les cookies ne sont pas gérés.
        if (!handshakeData.headers.cookie) {
            return next(new Error(&#39;Cookie de session requis.&#39;));
        }

        // Transformation de la String cookie en Objet JSON.
        handshakeData.cookie = cookie.parse(handshakeData.headers.cookie);

        // Vérification de la signature du cookie.
        handshakeData.cookie = cookieParser.signedCookies(handshakeData.cookie, NA.webconfig.session.secret);

        // Garder à portée l&#39;ID de Session.
        handshakeData.sessionID = handshakeData.cookie[NA.webconfig.session.key];

        // Accepter le cookie.
        NA.sessionStore.load(handshakeData.sessionID, function (error, session) {
            if (error || !session) {
                return next(new Error(&#39;Aucune session récupérée.&#39;));
            } else {
                handshakeData.session = session;
                next();
            }
        });
    });

    // Suite.
    next(io);
};

// Ajout d&#39;évènements d&#39;écoute pour un controller spécifique « index.js » (voir exemple dans le fichier d&#39;après).
privates.socketIoEvents = function (io, NA) {
    var params = {};

    params.io = io;

    // Evènements pour la page index (voir exemple dans le fichier d&#39;après).
    require(&#39;./index&#39;).asynchrone.call(NA, params);
};

// Configuration de tous les modules.
exports.setConfigurations = function (next) {
    var NA = this,
        socketio = NA.modules.socketio;

    // Initialisation de Socket IO.
    privates.socketIoInitialisation(socketio, NA, function (io) {

        // Écoute d&#39;action Socket IO.
        privates.socketIoEvents(io, NA);

        // Étapes suivante du moteur.
        next();
    });
};
</code></pre><p><em>Note : Ceci est la configuration global de Socket.IO côté serveur.</em></p><p><strong>controllers/index.js</strong></p><pre><code class="lang-js">// Intégralité des actions Websocket possible pour ce template.
// Utilisé non pas par « NodeAtlas » mais par « common.js » (voir fichier précédent).
exports.asynchrone = function (params) {
    var NA = this,
        io = params.io;

    // Dès qu&#39;on a un lien valide entre le client et notre back...
    io.sockets.on(&quot;connection&quot;, function (socket) {

        // ...rester à l&#39;écoute de la demande « create-article-button »...
        socket.on(&quot;server-render&quot;, function (data) {
            var sessionID = socket.request.sessionID,
                session = socket.request.session,
                variation = {};

            // On récupère les variations spécifiques dans la bonne langue.
            variation = NA.addSpecificVariation(&quot;index.json&quot;, data.lang, variation);

            // On récupère les variations communes dans la bonne langue.
            variation = NA.addCommonVariation(data.lang, variation);

            // On récupère le fragment HTML depuis le dossier `componentsRelativePath` et on applique les variations.
            data.render = NA.newRender(&quot;index.htm&quot;, variation);

            // Et on répond à tous les clients avec un jeu de donnée dans data.
            io.sockets.emit(&#39;server-render&#39;, data);
        });
    });
};
</code></pre><p>Quand au côté client, nous utiliserons les fichiers suivant :</p><p><strong>assets/javascript/common.js</strong></p><pre><code class="lang-js">window.website = window.website || {};

(function (publics) {
    &quot;use strict&quot;;

    var privates = {},
        optionsSocket,
        body = document.getElementsByTagName(&quot;body&quot;)[0];

    // On configure Socket.IO côté Client.
    optionsSocket = (body.getAttribute(&quot;data-subpath&quot;) !== &quot;&quot;) ? { path: &quot;/&quot; + body.getAttribute(&quot;data-subpath&quot;) + ((body.getAttribute(&quot;data-subpath&quot;)) ? &quot;/&quot; : &quot;&quot;) + &quot;socket.io&quot; } : undefined;
    publics.socket = io.connect((body.getAttribute(&quot;data-subpath&quot;) !== &quot;&quot;) ? body.getAttribute(&quot;data-hostname&quot;) : undefined, optionsSocket);
}(website));

// On exécute le JavaScript Spécifique à la page en cours, ici [&quot;index&quot;].
website[document.getElementsByTagName(&quot;body&quot;)[0].getAttribute(&quot;data-variation&quot;)].init();
</code></pre><p><em>Note : Ceci est la configuration global de Socket.IO côté client en ce basant sur <code>data-subpath</code> et <code>data-hostname</code>.</em></p><p><strong>assets/javascript/index.js</strong></p><pre><code class="lang-js">window.website = window.website || {};

(function (publics) {
    &quot;use strict&quot;;

    var html = document.getElementsByTagName(&quot;html&quot;)[0],
        body = document.getElementsByTagName(&quot;body&quot;)[0],
        layout = document.getElementsByClassName(&quot;layout&quot;)[0];

    // On associe sur le bouton l&#39;action de communiquer avec le serveur en cliquant dessus.
    function setServerRender() {
        var button = document.getElementsByTagName(&quot;button&quot;)[0];
        button.addEventListener(&quot;click&quot;, function () {
            website.socket.emit(&quot;server-render&quot;, {
                lang: html.getAttribute(&quot;lang&quot;),
                variation: body.getAttribute(&quot;data-variation&quot;)
            });
        });
    }

    // On créer le code qui s&#39;exécutera au lancement de la page.
    publics.init = function () {

        // On affecte l&#39;action au bouton.
        setServerRender();

        // Quand le serveur répond après notre demande auprès de lui...
        website.socket.on(&quot;server-render&quot;, function (data) {

            // ...on met à jour le contenu...
            layout.innerHTML = data.render;

            // ...et ré-affectons l&#39;action au bouton du nouveau contenu.
            setServerRender();
        });
    };
}(website.index = {}));
</code></pre><p>Lancer votre projet et rendez-vous à l&#39;adresse <code>http://localhost/</code> dans deux onglets différent, voir même, dans deux navigateurs différent. Vous constaterez alors qu&#39;à chaque clique sur « Update », la page se remettra à jour (comme le montre la date courante) sur tous les onglets ouvert.</p><p>Grâce à <code>NA.addSpecificVariation</code>, <code>NA.addCommonVariation</code> et <code>NA.newRender</code>, il est possible de générer une nouvelle compilation d&#39;un template (composant) et d&#39;une variation commune et spécifique.</p><p>Si <code>data.lang</code> dans notre exemple est de type <code>undefined</code>, alors les fichiers seront cherchés à la racine. Si <code>variation</code> est de type <code>undefined</code> alors un objet contenant uniquement le scope demandé sera renvoyé.</p><h3 id="utiliser-une-base-de-donnée-mysql-sql">Utiliser une base de donnée MySQL (SQL)</h3><p>Nous allons voir à présent comment utiliser des informations venant d&#39;une base de donnée. Pour cela nous allons utiliser le module npm <code>mysql</code>. Il va également nous falloir <a href="https://dev.mysql.com/downloads/installer/">installer un serveur MySQL</a>.</p><h4 id="base-de-donn-e-mysql">Base de donnée MySQL</h4><p>Tout d&#39;abord, nous allons alimenter la base de donnée avec la base <code>demo</code> :</p><pre><code>CREATE DATABASE demo;
</code></pre><p>et la sélectionner :</p><pre><code>USE demo
</code></pre><p>puis créer la table <code>user</code> :</p><pre><code>CREATE TABLE user
(
    id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    lastname VARCHAR(100),
    firstname VARCHAR(100),
    email VARCHAR(255),
    birthdate DATE,
    gender TINYINT(1),
    country VARCHAR(255),
    town VARCHAR(255),
    zipcode VARCHAR(5),
    address VARCHAR(255)
);
</code></pre><p>et la remplir avec un jeu de données :</p><pre><code>INSERT INTO user (
    lastname,
    firstname,
    email,
    birthdate,
    gender,
    country,
    town,
    zipcode,
    address
) VALUES (
    &quot;Lesieur&quot;,
    &quot;Bruno&quot;,
    &quot;bruno.lesieur@gmail.com&quot;,
    &quot;1988/07/18&quot;,
    true,
    &quot;France&quot;,
    &quot;Annecy&quot;,
    74000,
    &quot;66 avenue de Genève&quot;
);
</code></pre><h4 id="fichiers-nodeatlas">Fichiers NodeAtlas</h4><p>Avec le jeu de fichier suivant :</p><pre><code>assets/
— javascript/
—— models/
——— user.js
controllers/
— common.js
— index.js
models/
— user.js
templates/
— index.htm
variations/
— common.json
— index.json
webconfig.json
</code></pre><p>Nous allons utiliser le <code>webconfig.json</code> suivant avec une variable custom <code>_mysqlConfig</code> qui contiendra toutes les informations pour se connecter à la base de donnée :</p><pre><code>{
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_mysqlConfig&quot;: {
        &quot;host&quot;: &quot;localhost&quot;,
        &quot;user&quot;: &quot;root&quot;,
        &quot;password&quot;: &quot;root&quot;,
        &quot;database&quot;: &quot;demo&quot;
    }
}
</code></pre><p>Avec les fichiers suivant pour afficher la page :</p><p><strong>templates/index.htm</strong></p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&lt;%- languageCode %&gt;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;&lt;%- common.titleWebsite %&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;title&quot;&gt;&lt;%- common.titleWebsite %&gt;&lt;/div&gt;
        &lt;div&gt;
            &lt;h1&gt;&lt;%- specific.titlePage %&gt;&lt;/h1&gt;
            &lt;%- specific.content %&gt;
            &lt;ul&gt;
                &lt;li&gt;Id: &lt;strong&gt;&lt;%- id %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Lastname: &lt;strong&gt;&lt;%- lastname %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Firstname: &lt;strong&gt;&lt;%- firstname %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Email: &lt;strong&gt;&lt;%- email %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Birthdate: &lt;strong&gt;&lt;%- birthdate %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Gender: &lt;strong&gt;&lt;%- gender %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Country: &lt;strong&gt;&lt;%- country %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Town: &lt;strong&gt;&lt;%- town %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Zipcode: &lt;strong&gt;&lt;%- zipcode %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Address: &lt;strong&gt;&lt;%- address %&gt;&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><strong>variations/common.json</strong></p><pre><code class="lang-js">{
    &quot;titleWebsite&quot;: &quot;Exemple MySql&quot;,
    &quot;male&quot;: &quot;Homme&quot;,
    &quot;female&quot;: &quot;Femme&quot;
}
</code></pre><p><strong>variations/index.json</strong></p><pre><code class="lang-js">{
    &quot;titlePage&quot;: &quot;Table User&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;Détail de l&#39;entrée `bruno`.&lt;/p&gt;&quot;
}
</code></pre><p>Enfin nous allons nous connecter à la base de donnée avec le controlleur globale <code>controllers/common.js</code> :</p><pre><code class="lang-js">exports.loadModules = function () {
    var NA = this;

    NA.modules.mysql = require(&#39;mysql&#39;);
    NA.models = {};
    NA.models.User = require(&#39;../models/user.js&#39;);
};

exports.setConfigurations = function (next) {
    var NA = this,
        mysql = NA.modules.mysql;

    NA.mySql = mysql.createPool(NA.webconfig._mysqlConfig);

    next();
};
</code></pre><p>Et afficher les résultats via le controlleur spécifique <code>controllers/index.js</code> :</p><pre><code class="lang-js">exports.changeVariation = function (params, mainCallback) {
    var NA = this,
        variation = params.variation,
        User = NA.models.User,
        bruno = User();

    NA.mySql.getConnection(function(err, connection) {
        if (err) {
            console.log(err);
            return false;
        }

        bruno
        .setConnection(connection)
        .firstname(&quot;bruno&quot;)
        .readFirst(function () {

            variation.id = bruno.id();
            variation.lastname = bruno.lastname();
            variation.firstname = bruno.firstname();
            variation.email = bruno.email();
            variation.birthdate = bruno.birthdate();
            variation.gender = (bruno.gender()) ? variation.common.male : variation.common.female;
            variation.country = bruno.country();
            variation.town = bruno.town();
            variation.zipcode = bruno.zipcode();
            variation.address = bruno.address();

            mainCallback(variation);
        });
    });
};
</code></pre><p>en utilisant le model <code>user</code> via le fichier de connexion à la base de donnée <code>models/user.js</code> :</p><pre><code class="lang-js">/* jslint esversion: 6 */
var user = require(&#39;../assets/javascript/models/user.js&#39;);

function User(connection) {
    var privates = {},
        publics = this;

    privates.connection = connection;

    if (!(publics instanceof User)) {
        return new User();
    }

    publics.setConnection = function (connection) {
        privates.connection = connection;
        return publics;
    };

    user.call(publics);

    publics.readFirst = function (callback) {
        var select = `SELECT
                    id,
                    lastname,
                    firstname,
                    email,
                    birthdate,
                    gender,
                    country,
                    town,
                    zipcode,
                    address
                FROM user`, 
            where = &quot;&quot;, 
            limit = &quot; LIMIT 0,1 &quot;,
            addWhere = &quot; WHERE &quot;;

        if (publics.id()) { where += addWhere + &quot;`id` = &#39;&quot; + publics.id().replace(/&#39;/g, &quot;&#39;&#39;&quot;) + &quot;&#39;&quot;; addWhere = &#39; &amp;&amp; &#39;; }
        if (publics.lastname()) { where += addWhere + &quot;`lastname` = &#39;&quot; + publics.lastname().replace(/&#39;/g, &quot;&#39;&#39;&quot;) + &quot;&#39;&quot;; addWhere = &#39; &amp;&amp; &#39;; }
        if (publics.firstname()) { where += addWhere + &quot;`firstname` = &#39;&quot; + publics.firstname().replace(/&#39;/g, &quot;&#39;&#39;&quot;) + &quot;&#39;&quot;; addWhere = &#39; &amp;&amp; &#39;; }
        if (publics.email()) { where += addWhere + &quot;`email` = &#39;&quot; + publics.email().replace(/&#39;/g, &quot;&#39;&#39;&quot;) + &quot;&#39;&quot;; addWhere = &#39; &amp;&amp; &#39;; }
        if (publics.birthdate()) { where += addWhere + &quot;`birthdate` = &#39;&quot; + publics.birthdate().replace(/&#39;/g, &quot;&#39;&#39;&quot;) + &quot;&#39;&quot;; addWhere = &#39; &amp;&amp; &#39;; }
        if (publics.gender()) { where += addWhere + &quot;`gender` = &#39;&quot; + publics.gender().replace(/&#39;/g, &quot;&#39;&#39;&quot;) + &quot;&#39;&quot;; addWhere = &#39; &amp;&amp; &#39;; }
        if (publics.country()) { where += addWhere + &quot;`country` = &#39;&quot; + publics.country().replace(/&#39;/g, &quot;&#39;&#39;&quot;) + &quot;&#39;&quot;; addWhere = &#39; &amp;&amp; &#39;; }
        if (publics.town()) { where += addWhere + &quot;`town` = &#39;&quot; + publics.town().replace(/&#39;/g, &quot;&#39;&#39;&quot;) + &quot;&#39;&quot;; addWhere = &#39; &amp;&amp; &#39;; }
        if (publics.zipcode()) { where += addWhere + &quot;`zipcode` = &#39;&quot; + publics.zipcode().replace(/&#39;/g, &quot;&#39;&#39;&quot;) + &quot;&#39;&quot;; addWhere = &#39; &amp;&amp; &#39;; }
        if (publics.address()) { where += addWhere + &quot;`address` = &#39;&quot; + publics.address().replace(/&#39;/g, &quot;&#39;&#39;&quot;) + &quot;&#39;&quot;; addWhere = &#39; &amp;&amp; &#39;; }

        privates.connection.query(select + where + limit, function(err, rows, fields) {
            if (err) console.log(err);

            if (rows[0]) {
                publics.id(rows[0].id);
                publics.lastname(rows[0].lastname);
                publics.firstname(rows[0].firstname);
                publics.email(rows[0].email);
                publics.birthdate(rows[0].birthdate);
                publics.gender((rows[0].gender) ? true : false);
                publics.country(rows[0].country);
                publics.town(rows[0].town);
                publics.zipcode(rows[0].zipcode);
                publics.address(rows[0].address);
            }

            callback();
        });
    };
}

User.prototype = Object.create(user.prototype);
User.prototype.constructor = User;

module.exports = User;
</code></pre><p>basé sur une classe <code>user</code> partagé entre le Front et le Back <code>assets/javascript/models/user.js</code> :</p><pre><code class="lang-js">(function (expose, factory) {
    if (typeof module !== &#39;undefined&#39; &amp;&amp; module.exports) {
        module.exports = factory;
    } else {
        expose.User = factory;
    }
}(this, function User() {
    var privates = {},
        publics = this;

    if (!(publics instanceof User)) {
        return new User();
    }

    publics.id = function (id) {
        if (typeof id === &#39;undefined&#39;) {
            return privates.id;
        } else {
            privates.id = id;
            return publics;
        }
    };

    publics.lastname = function (lastname) {
        if (typeof lastname === &#39;undefined&#39;) {
            return privates.lastname;
        } else {
            privates.lastname = lastname;
            return publics;
        }
    };

    publics.firstname = function (firstname) {
        if (typeof firstname === &#39;undefined&#39;) {
            return privates.firstname;
        } else {
            privates.firstname = firstname;
            return publics;
        }
    };

    publics.email = function (email) {
        if (typeof email === &#39;undefined&#39;) {
            return privates.email;
        } else {
            privates.email = email;
            return publics;
        }
    };

    publics.birthdate = function (birthdate) {
        if (typeof birthdate === &#39;undefined&#39;) {
            return privates.birthdate;
        } else {
            privates.birthdate = birthdate;
            return publics;
        }
    };

    publics.gender = function (gender) {
        if (typeof gender === &#39;undefined&#39;) {
            return privates.gender;
        } else {
            privates.gender = gender;
            return publics;
        }
    };

    publics.country = function (country) {
        if (typeof country === &#39;undefined&#39;) {
            return privates.country;
        } else {
            privates.country = country;
            return publics;
        }
    };

    publics.town = function (town) {
        if (typeof town === &#39;undefined&#39;) {
            return privates.town;
        } else {
            privates.town = town;
            return publics;
        }
    };

    publics.zipcode = function (zipcode) {
        if (typeof zipcode === &#39;undefined&#39;) {
            return privates.zipcode;
        } else {
            privates.zipcode = zipcode;
            return publics;
        }
    };

    publics.address = function (address) {
        if (typeof address === &#39;undefined&#39;) {
            return privates.address;
        } else {
            privates.address = address;
            return publics;
        }
    };
}));
</code></pre><p>Vous obtiendrez la sortie suivante :</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;Exemple MySql&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;title&quot;&gt;Exemple MySql&lt;/div&gt;
        &lt;div&gt;
            &lt;h1&gt;Table User&lt;/h1&gt;
            &lt;p&gt;Détail de l&#39;entrée `bruno`.&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Id: &lt;strong&gt;1&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Lastname: &lt;strong&gt;Lesieur&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Firstname: &lt;strong&gt;Bruno&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Email: &lt;strong&gt;bruno.lesieur@gmail.com&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Birthdate: &lt;strong&gt;Mon Jul 18 1988 00:00:00 GMT+0200 (Paris, Madrid (heure d’été))&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Gender: &lt;strong&gt;Homme&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Country: &lt;strong&gt;France&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Town: &lt;strong&gt;Annecy&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Zipcode: &lt;strong&gt;74000&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Address: &lt;strong&gt;66 avenue de Genève&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="utiliser-une-base-de-donnée-mongodb-nosql">Utiliser une base de donnée MongoDB (NoSQL)</h3><p>Nous allons voir à présent comment utiliser des informations venant d&#39;une base de donnée non sql. Pour cela nous allons utiliser le module npm <code>mongoose</code>. Il va également nous falloir <a href="https://www.mongodb.com/">installer un serveur MongoDB</a>.</p><h4 id="base-de-donn-e-mongodb">Base de donnée MongoDB</h4><p>Tout d&#39;abord, nous allons alimenter la base de donnée avec la base <code>demo</code> et la sélectionner :</p><pre><code>use demo
</code></pre><p>puis créer la collection <code>user</code> :</p><pre><code>db.createCollection(&quot;user&quot;)
</code></pre><p>et la remplir avec un document :</p><pre><code>db.user.insert({
    email: &quot;bruno.lesieur@gmail.com&quot;,
    identity: {
        lastname: &quot;Lesieur&quot;,
        firstname: &quot;Bruno&quot;,
        gender: true,
        birthdate : new Date(&quot;1988/07/18&quot;)
    },
    location: {
        country: &quot;France&quot;,
        town: &quot;Annecy&quot;,
        zipcode: &quot;74000&quot;,
        address: &quot;66 avenue de Genève&quot;
    }
})
</code></pre><h4 id="fichiers-nodeatlas">Fichiers NodeAtlas</h4><p>Avec le jeu de fichier suivant :</p><pre><code>assets/
— javascript/
—— models/
——— user.js
controllers/
— common.js
— index.js
templates/
— index.htm
variations/
— common.json
— index.json
webconfig.json
</code></pre><p>Nous allons utiliser le <code>webconfig.json</code> suivant avec une variable custom <code>_mongodbConfig</code> qui contiendra toutes les informations pour se connecter à la base de donnée :</p><pre><code>{
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: {
            &quot;template&quot;: &quot;index.htm&quot;,
            &quot;variation&quot;: &quot;index.json&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_mongodbConfig&quot;: {
        &quot;host&quot;: &quot;localhost&quot;,
        &quot;port&quot;: &quot;27017&quot;,
        &quot;database&quot;: &quot;demo&quot;
    }
}
</code></pre><p>Avec les fichiers suivant pour afficher la page :</p><p><strong>templates/index.htm</strong></p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&lt;%- languageCode %&gt;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;&lt;%- common.titleWebsite %&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;title&quot;&gt;&lt;%- common.titleWebsite %&gt;&lt;/div&gt;
        &lt;div&gt;
            &lt;h1&gt;&lt;%- specific.titlePage %&gt;&lt;/h1&gt;
            &lt;%- specific.content %&gt;
            &lt;ul&gt;
                &lt;li&gt;Id: &lt;strong&gt;&lt;%- id %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Lastname: &lt;strong&gt;&lt;%- lastname %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Firstname: &lt;strong&gt;&lt;%- firstname %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Email: &lt;strong&gt;&lt;%- email %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Birthdate: &lt;strong&gt;&lt;%- birthdate %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Gender: &lt;strong&gt;&lt;%- gender %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Country: &lt;strong&gt;&lt;%- country %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Town: &lt;strong&gt;&lt;%- town %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Zipcode: &lt;strong&gt;&lt;%- zipcode %&gt;&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Address: &lt;strong&gt;&lt;%- address %&gt;&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><strong>variations/common.json</strong></p><pre><code class="lang-js">{
    &quot;titleWebsite&quot;: &quot;MongoDB Exemple&quot;,
    &quot;male&quot;: &quot;Homme&quot;,
    &quot;female&quot;: &quot;Femme&quot;
}
</code></pre><p><strong>variations/index.json</strong></p><pre><code class="lang-js">{
    &quot;titlePage&quot;: &quot;Collection User&quot;,
    &quot;content&quot;: &quot;&lt;p&gt;Détail du document `{ \&quot;identity.firstname\&quot;: \&quot;Bruno\&quot; }`.&lt;/p&gt;&quot;
}
</code></pre><p>Enfin nous allons nous connecter à la base de donnée avec le controlleur globale <code>controllers/common.js</code> :</p><pre><code class="lang-js">exports.loadModules = function () {
    var NA = this,
        path = NA.modules.path;

    NA.modules.mongoose = require(&#39;mongoose&#39;);
    NA.models = {};
    NA.models.User = require(&#39;../assets/javascript/models/user.js&#39;);
};

exports.setConfigurations = function (next) {
    var NA = this,
        mongoose = NA.modules.mongoose,
        config = NA.webconfig._mongodbConfig;

    mongoose.Promise = global.Promise;
    mongoose.model(&quot;user&quot;, NA.models.User, &quot;user&quot;);
    mongoose.connect(&quot;mongodb://&quot; + config.host + &quot;:&quot; + config.port + &quot;/&quot; + config.database, function (error) {
        next();
    });
};
</code></pre><p>Et afficher les résultats via le controlleur spécifique <code>controllers/index.js</code> :</p><pre><code class="lang-js">exports.changeVariation = function (params, mainCallback) {
    var NA = this,
        variation = params.variation,
        mongoose = NA.modules.mongoose,
        User = mongoose.model(&#39;user&#39;);

    User
    .findOne({ &quot;identity.firstname&quot;: &quot;Bruno&quot; })
    .exec(function (err, bruno) {

        variation.id = bruno._id;
        variation.lastname = bruno.identity.lastname;
        variation.firstname = bruno.identity.firstname;
        variation.birthdate = bruno.identity.birthdate;
        variation.email = bruno.email;
        variation.gender = (bruno.identity.gender) ? variation.common.male : variation.common.female;
        variation.country = bruno.location.country;
        variation.town = bruno.location.town;
        variation.zipcode = bruno.location.zipcode;
        variation.address = bruno.location.address;

        mainCallback(variation);
    });
};
</code></pre><p>en utilisant sur une classe <code>user</code> partagé entre le Front et le Back <code>assets/javascript/models/user.js</code> :</p><pre><code class="lang-js">var mongoose;
if (typeof module !== &#39;undefined&#39; &amp;&amp; module.exports) {
     mongoose = require(&#39;mongoose&#39;);
}

(function (expose, factory) {
    if (mongoose) {
        module.exports = factory;
    } else {
        expose.User = factory;
    }
}(this, new mongoose.Schema({
    _id: mongoose.Schema.Types.ObjectId,
    email: { type : String, match: /^\S+@\S+$/ },
    identity: {
        lastname: String,
        firstname: String,
        gender: Boolean,
        birthdate : { type : Date, default : Date.now }
    },
    location: {
        country: String,
        town: String,
        zipcode: String,
        address: String
    }
})));
</code></pre><p>Vous obtiendrez la sortie suivante :</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;Exemple MongoDB&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;title&quot;&gt;Exemple MongoDB&lt;/div&gt;
        &lt;div&gt;
            &lt;h1&gt;Collection User&lt;/h1&gt;
            &lt;p&gt;Détail de l&#39;entrée `{ &quot;identity.firstname&quot;: &quot;Bruno&quot; }`.&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Id: &lt;strong&gt;5804d4d530788ee2e52ea1c7&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Lastname: &lt;strong&gt;Lesieur&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Firstname: &lt;strong&gt;Bruno&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Email: &lt;strong&gt;bruno.lesieur@gmail.com&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Birthdate: &lt;strong&gt;Mon Jul 18 1988 00:00:00 GMT+0200 (Paris, Madrid (heure d’été))&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Gender: &lt;strong&gt;Homme&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Country: &lt;strong&gt;France&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Town: &lt;strong&gt;Annecy&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Zipcode: &lt;strong&gt;74000&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Address: &lt;strong&gt;66 avenue de Genève&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>