<h2 id="api-nodeatlas-as-npm-module">API / NodeAtlas as npm module</h2><p>You could run NodeAtlas via JavaScript code.</p><h3 id="lt-node-atlas-instance-gt-.init">&lt;node-atlas-instance&gt;.init()</h3><p>Execute a simple NodeAtlas running with <code>init()</code>. By default, it use <code>webconfig.json</code> from directory where file is executed. If no <code>webconfig.json</code> is set, a Simple Web Server will be launched.</p><p><em>server.js</em></p><pre><code class="lang-javascript">require(&quot;node-atlas&quot;)().init();
</code></pre><pre><code>\&gt; server server.js
``



### &amp;lt;node-atlas-instance&gt;.config(Object) ###

You can also configure the launch with `config(Object)`:

*server.js*

```javascript
require(&quot;node-atlas&quot;)().config({
    directory: &quot;/path/to/your/website/directory/&quot;,
    webconfig: &quot;webconfig.alternatif.json&quot;,
    browse: true,
    httpHostname: &quot;192.168.1.1&quot;,
    httpPort: 7778,
    generate: true
}).init();
</code></pre><pre><code>\&gt; node server.js
</code></pre><h3 id="lt-node-atlas-instance-gt-.run-object">&lt;node-atlas-instance&gt;.run(Object)</h3><p>With <code>run(Object)</code> you could configure and lanch NodeAtlas with one command.</p><p>You can for example run multiple websites in same time. Each webconfig must listen a different port.</p><p><em>servers.js</em></p><pre><code class="lang-javascript">var nodeAtlas = require(&quot;node-atlas&quot;),
    websiteEn = new nodeAtlas(),
    websiteFr = new nodeAtlas();

websiteEn.run({
    &quot;browse&quot;: true,
    &quot;webconfig&quot;: &quot;webconfig.english.json&quot;
});
websiteFr.run({
    &quot;browse&quot;: true,
    &quot;webconfig&quot;: &quot;webconfig.french.json&quot;
});
</code></pre><h3 id="lt-node-atlas-instance-gt-.aftergeneration-function">&lt;node-atlas-instance&gt;.afterGeneration(Function)</h3><p>With <code>afterGeneration(Function)</code>, you could also execute other tasks after assets generation:</p><p><em>servers.js</em></p><pre><code class="lang-javascript">require(&quot;node-atlas&quot;)().afterGeneration(function() {
    require(&#39;child_process&#39;).exec(__dirname + &quot;/documentation.bat&quot;, function (err, stdout, stderr) {
        console.log(&quot;Documentation generation...&quot;);
        console.log(stdout);
        console.log(&quot;Documentation generation done !&quot;);
    });
}).run({
    generate: true
});
</code></pre><h3 id="lt-node-atlas-instance-gt-.afterinitproject-function">&lt;node-atlas-instance&gt;.afterInitProject(Function)</h3><p>With <code>afterInitProject(Function)</code>, you could also execute other tasks after init the current directory with template website:</p><p><em>servers.js</em></p><pre><code class="lang-javascript">var nodeAtlas = require(&quot;node-atlas&quot;),
    website = nodeAtlas();

website.config({
    &quot;init&quot;: true
}).afterInitProject(function() {
    website.run({
        &quot;browse&quot;: true
    });
}).init();
</code></pre>