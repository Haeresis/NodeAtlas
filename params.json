{
  "name": "NodeAtlas",
  "tagline": "NodeAtlas is a MVC2 Javascript Framework Front-end-oriented, SEO and W3C compliant.",
  "body": "# node-atlas #\r\n\r\n[![Donate](https://img.shields.io/badge/donate-%3C3-ddddff.svg)](https://www.paypal.me/BrunoLesieur/5) [![Travis CI](https://travis-ci.org/Haeresis/NodeAtlas.svg)](https://travis-ci.org/Haeresis/NodeAtlas/) [![Version 1.6](https://img.shields.io/badge/version-1.6-brightgreen.svg)](https://github.com/Haeresis/NodeAtlas) [![Package NPM](https://badge.fury.io/js/node-atlas.svg)](https://www.npmjs.com/package/node-atlas) [![Node.js](https://img.shields.io/badge/nodejs-0.10%2C_6.9-brightgreen.svg)](https://nodejs.org/en/) [![Technical Debt Ratio](https://img.shields.io/badge/quality_code-A-brightgreen.svg)](http://docs.sonarqube.org/display/PLUG/JavaScript+Plugin) [![Dependency Status](https://gemnasium.com/Haeresis/NodeAtlas.svg)](https://gemnasium.com/Haeresis/NodeAtlas)\r\n\r\n**Vous êtes français ? Le README [derrière ce lien](https://github.com/Haeresis/NodeAtlas) vous sera peut-être plus agréable.**\r\n\r\n\r\n\r\n\r\n\r\n## Overview ##\r\n\r\n### For What ? ###\r\n\r\nNodeAtlas is a Server-side MVC(2) JavaScript Framework as an [npm module](https://www.npmjs.com/package/node-atlas) ([node-atlas](https://www.npmjs.com/package/node-atlas)) and designed to run on all [Node.js](https://nodejs.org/en/) verision. NodeAtlas allows you to :\r\n\r\n   - Create, maintain and document a set of assets HTML/CSS/JavaScript as user interfaces to provide solid Guidelines for the realization of website or webapp (i.e. for brands).\r\n\r\n   - Create and maintain and run internationalized wesites without use a single JavaScript file. That's it's perfect for beginners or for develop presentational website with high performance quickly.\r\n\r\n   - Develop Node.js internationalized websites or scalable [Node.js](https://nodejs.org/en/) applications running of all sizes with server-based source code for high performance, indexability for SEO and W3C compliancy. Distant REST APIs are also easily to create.\r\n\r\n\r\n\r\n### Why NodeAtlas ###\r\n\r\nNodeAtlas is designed to create scalable websites and to allow Front-end and Back-end developers to embrace [Node.js](https://nodejs.org/en/).\r\n\r\nStarting with a single HTML page,\r\n\r\n- then internationalize it,\r\n- then create other pages,\r\n- then minify/obfuscate/optimized your sources,\r\n- then use Less or/and Stylus,\r\n- then use files for drive back-end part with code,\r\n- then connect you to [MySQL](https://www.mysql.fr/), [MongoDB](https://www.mongodb.org/), [ElasticSearch](https://www.elastic.co/)...,\r\n- then use [Socket.io](http://socket.io/) for real time,\r\n- then be component-based with [ComponentAtlas](https://github.com/Haeresis/ComponentAtlas)\r\n- then let your customer edit website itself with [EditAtlas](https://github.com/Haeresis/EditAtlas)\r\n- then create plugins,\r\n- then...\r\n\r\n\r\n\r\n### And what about others JavaScript Frameworks? ###\r\n\r\nIn opposition to others JavaScript Frameworks like Angular, Aurelia ou React, NodeAtlas run server-side and provide some real url by Response HTTP. Websites are indexale and W3C compliant that means each page are construct by HTTP response and after by websocket mechanisms. So, NodeAtlas is not an alternative to others Front-end JavaScript Frameworks that only use [Node.js](https://nodejs.org/en/) for use after [npm](https://www.npmjs.com/), [jspm](http://jspm.io/) or [gulp](http://gulpjs.com/). And that means NodeAtlas is a substituant to PHP, JAVA or C# server-side. In the same way as [Meteor.js](https://www.meteor.com/), NodeAtlas allow you to set your working environment and you have not need of [gulp](http://gulpjs.com/) but to oposition of [Meteor.js](https://www.meteor.com/), the `NA` object is not provided client-side. It's your responsability to spread server-side mechanism to front.\r\n\r\nTo comparate NodeAtlas with others JavaScript Server-side Library/Framework/API, [you could check this grid](#nodeatlas-vs-others).\r\n\r\n\r\n\r\n### Examples of websites with NodeAtlas ###\r\n\r\nThis is a list of repository you could analyse to understand NodeAtlas:\r\n\r\n- [Generation and HTML template maintenance](https://github.com/Haeresis/ResumeAtlas/).\r\n- [HTML website maintenance (no Back-end)](https://github.com/Haeresis/ResumeAtlas/).\r\n- [Node.js website with Websocket and PopState](https://github.com/Haeresis/BookAtlas/).\r\n- [Node.js website with MongoDB database and Redis](https://github.com/Haeresis/BlogAtlas/).\r\n- [Node.js example of content filling in real time without Back-office](https://github.com/Haeresis/EditAtlas/).\r\n- [Simple web server for a file](https://github.com/Haeresis/SimpleAtlas/).\r\n- [API REST example](https://github.com/Haeresis/ApiAtlas/).\r\n- [CSS-driven usage with Less preprocessor with CSS Framework](https://github.com/Haeresis/LessAtlas/).\r\n- [Plugin to boost standard capabilities](https://github.com/Haeresis/ComponentAtlas/).\r\n\r\n\r\n\r\n### Table of Contents ###\r\n\r\n- [Overview](#overview)\r\n - [For What ?](#for-what-)\r\n - [Why NodeAtlas](#why-nodeatlas)\r\n - [And what about others JavaScript Frameworks?](#and-what-about-others-javascript-frameworks)\r\n - [Examples of websites with NodeAtlas](#examples-of-websites-with-nodeatlas)\r\n - [Table of Contents](#table-of-contents)\r\n - [Documentation](#documentation)\r\n - [Contributing](#contributing)\r\n- [Installation](#installation)\r\n- [Start with NodeAtlas](#start-with-nodeatlas)\r\n - [Fileset](#fileset)\r\n - [Minimum Requirements](#minimum-requirements)\r\n - [Run the site with NodeAtlas](#run-the-site-with-nodeatlas)\r\n- [Create Website (Front-end Part)](#create-website-front-end-part)\r\n - [More one page](#more-one-page)\r\n - [Template shortcut](#template-shortcut)\r\n - [Host images, fonts, CSS, JS, etc.](#host-images-fonts-css-js-etc)\r\n - [Manage inclusions to avoid redundancy code](#manage-inclusions-to-avoid-redundancy-code)\r\n - [Manage variations within the same template](#manage-variations-within-the-same-template)\r\n - [Manage Multilingual](#manage-multilingual)\r\n - [Change the url parameters](#change-the-url-parameters)\r\n - [Create your own webconfig variables](#create-your-own-webconfig-variables)\r\n - [NodeAtlas use to generate HTML assets](#nodeatlas-use-to-generate-html-assets)\r\n- [JavaScript Development (Back-end Part)](#javascript-development-back-end-part)\r\n - [Use NodeAtlas to run a website](#use-nodeatlas-to-run-a-website)\r\n - [Use Websocket instead of AJAX](#use-websocket-instead-of-ajax)\r\n - [Use MySQL Database (SQL)](#use-mysql-database-sql)\r\n - [Use MongoDB Database (NoSQL)](#use-mongodb-database-nosql)\r\n- [More features](#more-features)\r\n - [Manage routing (URL Rewriting)](#manage-routing-url-rewriting)\r\n - [Manage a page not found](#manage-a-page-not-found)\r\n - [Manage redirects](#manage-redirects)\r\n - [Manage Headers](#manage-headers)\r\n - [Run Website with HTTPs](#run-website-with-https)\r\n - [Minify CSS / JS](#minify-css--js)\r\n - [CSS generation with Less](#css-generation-with-less)\r\n - [CSS generation with Stylus](#css-generation-with-stylus)\r\n - [Optimize Images files](#optimize-images-files)\r\n - [CSS Inline Injection for Manage Email Assets](#css-inline-injection-for-manage-email-assets)\r\n - [Allow / Disallow GET / POST requests](#allow--disallow-get--post-requests)\r\n - [Allow / Disallow PUT / DELETE requests](#allow--disallow-put--delete-requests)\r\n - [Change settings of Sessions](#change-settings-of-sessions)\r\n - [External Storage Sessions](#external-storage-sessions)\r\n - [Changing the template engine brackets <% %>](#Changing-the-template-engine-brackets--)\r\n - [Change the url hostname and listening port](#change-the-url-hostname-and-listening-port)\r\n - [Generate urls dynamically](#generate-urls-dynamically)\r\n- [CLI / Running commands](#cli--running-commands)\r\n - [--directory &lt;path>](#--directory-path)\r\n - [--webconfig &lt;webconfigName>](#--webconfig-webconfigname)\r\n - [--browse [subpath]](#--browse-subpath)\r\n - [--httpHostname &lt;httpHostname>](#--httphostname-httphostname)\r\n - [--httpPort &lt;httpPort>](#--httpport-httpport)\r\n - [--generate](#--generate)\r\n- [API / NodeAtlas as npm module](#api--nodeatlas-as-npm-module)\r\n- [NodeAtlas as a simple web server](#nodeatlas-as-a-simple-web-server)\r\n- [Running NodeAtlas on online server](#running-nodeatlas-on-online-server)\r\n - [In a Windows Server environment with iisnode](#in-a-windows-server-environment-with-iisnode)\r\n - [In a Unix environment with forever](#in-a-unix-environment-with-forever)\r\n - [In a Unix environment with Nginx](#in-a-unix-environment-with-nginx)\r\n - [Proxy](#proxy)\r\n- [More About NodeAtlas](#more-about-nodeatlas)\r\n\r\n\r\n\r\n### Documentation ###\r\n\r\nIn addition to this README, you also have access to,\r\n- [tl;dr](https://www.npmjs.com/package/node-atlas) and,\r\n- [details of functions in the NA object](http://haeresis.github.io/NodeAtlas/doc/index.html).\r\n\r\n\r\n\r\n### Contributing ###\r\n\r\nIf you would like to contribute with:\r\n\r\n - Code enhancements and fixes,\r\n - French correct spelling mistake or\r\n - Decent english translation\r\n\r\nPlease do the following:\r\n\r\n 1. Fork the NodeAtlas repository.\r\n 2. Hack on a separate topic branch created from the latest master.\r\n 3. Commit and push the topic branch.\r\n 4. Make a pull request.\r\n 5. Be patient. ;-)\r\n\r\nPlease note that modications should follow these coding guidelines:\r\n\r\n- [Pass Sonarqube JS with rank A](http://www.sonarqube.org/) : Bugs, Vulnerabilities and Debt Ratio.\r\n\r\nThank you for helping out!\r\n\r\n\r\n\r\n\r\n\r\n## Installation ##\r\n\r\n*Before install NodeAtlas, install [Node.js](https://nodejs.org/en/) and [Python 2.7](https://www.python.org/download/releases/2.7/) as pre-require.*\r\n\r\nThere are several ways to install NodeAtlas:\r\n\r\n- Download NodeAtlas from the official repository [NodeAtlas](https://haeresis.github.com/NodeAtlas).\r\n\r\n   _Once downloaded, unzip **NodeAtlas** in the folder that will suit you._\r\n\r\n   **Start at least once NodeAtlas with the command line `\\> node </path/to/>node-atlas/index.js`, to install the _node_modules_ or use `npm install` command from `</path/to/>node-atlas/` directory.**\r\n\r\n- `npm install node-atlas` (recommended for [use as a module](#api--nodeatlas-as-npm-module) in a project).\r\n\r\n   _This will install **NodeAtlas** in the `node_modules/node-atlas` directory of the execution of the command._\r\n\r\n- `npm install -g node-atlas` (recommended for [use as a module](#api--nodeatlas-as-npm-module) in large amount of project or for [a command line utilisation](#cli--running-commands)).\r\n\r\n   _This will install **NodeAtlas** in the global `node_modules/node-atlas`._\r\n\r\n- Clone the directory from [GitHub](https://github.com/Haeresis/NodeAtlas/) (recommended for participating to project).\r\n\r\n   _This will install **NodeAtlas** in cloning home folder._\r\n\r\n   **Start at least once NodeAtlas the with the command line `\\> node </path/to/>node-atlas/`, to install the _node_modules_.**\r\n\r\n\r\n\r\n\r\n\r\n## Start with NodeAtlas ##\r\n\r\n### Fileset ###\r\n\r\nAfter installing NodeAtlas somewhere on your machine, you create a set of files representing a site anywhere else like structure below.\r\n\r\n```\r\nsite-hello-world/\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nHere is the \"/site-hello-world/templates/index.htm\" file:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n    </head>\r\n    <body>\r\n        <div>This is a Hello World!</div>\r\n    </body>\r\n</html>\r\n```\r\n\r\nand following, the \"/site-hello-world/webconfig.json\" file.\r\n\r\n### Minimum Requirements ###\r\n\r\nYou can turn a simple page with minimal configuration \"webconfig.json\" below\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nequivalent to\r\n\r\n```js\r\n{ \"routes\": { \"/\": \"index.htm\" } }\r\n```\r\n\r\n\r\n\r\n### Run the site with NodeAtlas ###\r\n\r\n#### With a command line ####\r\n\r\nPosition yourself with the prompt console in the folder \"/Site-hello-world/\" and run the following command.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/\r\n```\r\n\r\nIn your first run, NodeAtlas install all the \"node_modules\" necessary for running (if you downloaded out of npm).\r\n\r\nRerun.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/\r\n```\r\n\r\nYou will have access to your \"Hello World\" to the page: *http://localhost/* in a browser.\r\n\r\n\r\n#### With an executable on your OS ####\r\n\r\n**If you have installed NodeAtlas with `npm install -g node-atlas`** you can also use the `nodeatlas` command. `nodeatlas` is a shortcut for `node </path/to/>node-atlas/`.\r\n\r\nPosition yourself with the prompt console in the folder « /site-hello-world/ » and run the following command.\r\n\r\n```\r\n\\> nodeatlas\r\n```\r\n\r\n*Note : *if the `nodeatlas` command do not work on unix OS after installation, it's probably because of right problem. If you are root, the command `chown -R root:root /usr/local/bin/` before re-execuse `npm install -g node-atlas` command will fix issue, else, use the command `sudo npm install -g node-atlas`.*\r\n\r\n\r\n#### Via a JavaScript file ####\r\n\r\nYou can also use NodeAtlas as a npm module.\r\n\r\n*server.js*\r\n\r\n```javascript\r\nvar nodeAtlas = require(\"node-atlas\");\r\n\r\nnodeAtlas().run();\r\n```\r\n\r\n```\r\n\\> node server.js\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## Create Website (Front-end Part) ##\r\n\r\n### More one page ###\r\n\r\nBelow is a sample configuration.\r\n\r\n```js\r\n{\r\n    \"templatesRelativePath\": \"templates\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/member.html\": {\r\n            \"template\": \"member.htm\",\r\n            \"postSupport\": false\r\n        },\r\n        \"/member-without-extension/\": {\r\n            \"template\": \"member.htm\",\r\n            \"getSupport\": false\r\n        },\r\n        \"about.html\": {\r\n            \"template\": \"about.htm\"\r\n        },\r\n        \"/error.html\": {\r\n            \"template\": \"error.htm\",\r\n            \"statusCode\": 404,\r\n            \"mimeType\": \"text/plain\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTo run this set of file:\r\n\r\n```\r\ntemplates/\r\n— index.htm\r\n— member.htm\r\n— error.htm\r\nwebconfig.json\r\n```\r\n\r\nwith the addresses:\r\n\r\n- *http://localhost/* (responds to the root)\r\n- *http://localhost/member.html* (will not respond if is POST requested)\r\n- *http://localhost/member-without-extension/* (will not respond if is GET requested)\r\n- *http://localhost/error.html* (return of the plain-text content (without markup) with a 404)\r\n\r\n*Note : If* ***templatesRelativePath*** *is not present in \"webconfig.json\", template folder is* ***templates***. ***templatesRelativePath*** *is useful only to change the name/path of directory.*\r\n\r\n\r\n\r\n### Template shortcut ###\r\n\r\nThe configuration below is equivalent to the configuration section just above\r\n\r\n```js\r\n{\r\n    \"templatesRelativePath\": \"templates\",\r\n    \"routes\": {\r\n        \"/\": \"index.htm\",\r\n        \"/member.html\": {\r\n            \"template\": \"member.htm\",\r\n            \"postSupport\": false\r\n        },\r\n        \"/member-without-extension/\": {\r\n            \"template\": \"member.htm\",\r\n            \"getSupport\": false\r\n        },\r\n        \"about.html\": \"about.htm\",\r\n        \"/error.html\": {\r\n            \"template\": \"error.htm\",\r\n            \"statusCode\": 404,\r\n            \"mimeType\": \"text/plain\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nbecause\r\n\r\n```js\r\n\"about.html\": \"about.htm\",\r\n```\r\n\r\nis a shortcut for\r\n\r\n```js\r\n\"about.html\": {\r\n    \"template\": \"about.htm\"\r\n}\r\n```\r\n\r\nObviously this shortcut is used only if `template` is the only parameter to declare in the route.\r\n\r\n\r\n\r\n### Host images, fonts, CSS, JS, etc. ###\r\n\r\nYou can also host any file on your site in a public folder. For example, with this configuration:\r\n\r\n```js\r\n{\r\n    \"assetsRelativePath\": \"assets\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand this set of files:\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\n— media/\r\n—— images/\r\n——— logo.png\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nyou will have access to the addresses:\r\n\r\n- *http://localhost/*\r\n- *http://localhost/stylesheets/common.css*\r\n- *http://localhost/javascript/common.js*\r\n- *http://localhost/media/images/logo.png*\r\n\r\n*Note : If* ***assetsRelativePath*** *is not present in \"webconfig.json\", default public folder is* ***assets***. ***assetsRelativePath*** *is useful only to change the name/path of directory.*\r\n\r\n#### maxAge, Etag, etc. ####\r\n\r\nIt's possible to manage informations provided by NodeAtlas when a ressource is requested (like `maxAge`, `etag`, etc.) via the `staticOptions` property in webconfig. For more informations, see the [Express](http://expressjs.com/api.html#express.static) documentation about static files.\r\n\r\nFor exemple, for a devlopment webconfig, it's interresting to put the `maxAge` to 0 in order to always get the last modifications into a file and avoid frenetic browser reload.\r\n\r\n```\r\n{\r\n    \"staticOptions\": {\r\n        \"maxAge\": 0\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Manage inclusions to avoid redundancy code ###\r\n\r\nYou can segment your HTML codes to not repeat the redundant code such \"head\" part and \"foot\" part or any other code fragment:\r\n\r\n```js\r\n{\r\n    \"componentsRelativePath\": \"components\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/list-of-members/\": {\r\n            \"template\": \"members.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith the following files:\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/common.css\" media=\"all\" />\r\n    </head>\r\n    <body>\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n        <script async type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <div>\r\n        <h1>Welcome</h1>\r\n        <p>This is the home page.</p>\r\n    </div>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\n*templates/members.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <div>\r\n        <h1>List of members</h1>\r\n        <p>It is the Members page.</p>\r\n    </div>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\nyou will have access to the addresses:\r\n\r\n- *http://localhost/*\r\n- *http://localhost/list-of-members/*\r\n\r\n*Note : If* ***componentsRelativePath*** *is not present in \"webconfig.json\", default include folder is* ***components***. ***componentsRelativePath*** *is useful only to change the name/path of directory.*\r\n\r\n\r\n\r\n### Manage variations within the same template ###\r\n\r\nIt is possible with the same template and the same includes, generating pages with different content (useful in generation HTML assets mode). Activate the variations with the following configuration:\r\n\r\n```js\r\n{\r\n    \"commonVariation\": \"common.json\",\r\n    \"variationsRelativePath\": \"variations\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"template.htm\",\r\n            \"variation\": \"index.json\",\r\n        },\r\n        \"/list-of-members/\": {\r\n            \"template\": \"template.htm\",\r\n            \"variation\": \"members.json\",\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith the following files:\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— home.css\r\n—— members.css\r\n— javascript/\r\n—— common.js\r\n—— home.js\r\n—— members.js\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nvariations/\r\n— common.json\r\n— index.json\r\n— members.json\r\ntemplates/\r\n— template.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><%- specific.titlePage %></title>\r\n\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<%= common.classCssCommon %>.css\" media=\"all\" />\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<%= specific.classPage %>.css\" media=\"all\" />\r\n    </head>\r\n    <body class=\"<%= specific.classPage %>\">\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n        <script async type=\"text/javascript\" src=\"javascript/<%= common.classJsCommon %>.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/template.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <div class=\"title\"><%- common.titleWebsite %></div>\r\n\r\n    <div>\r\n        <h1><%- specific.titlePage %></h1>\r\n        <%- specific.content %>\r\n    </div>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\n*variations/common.json*\r\n\r\n```js\r\n{\r\n    \"titleWebsite\": \"Website title\",\r\n    \"classCssCommon\": \"common\",\r\n    \"classJsCommon\": \"common\"\r\n}\r\n```\r\n\r\n*variations/index.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Welcome\",\r\n    \"classPage\": \"index\",\r\n    \"content\": \"<p>This is the home page.</p>\"\r\n}\r\n```\r\n\r\n*variations/members.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"List of members\",\r\n    \"classPage\": \"members\",\r\n    \"content\": \"<p>It is the Members page.</p>\"\r\n}\r\n```\r\n\r\nyou will have access to the addresses:\r\n\r\n- *http://localhost/*\r\n- *http://localhost/list-of-members/*\r\n\r\n*Note : If* ***variationsRelativePath*** *is not present in \"webconfig.json\", default variations folder is* ***variations***. ***variationsRelativePath*** *is useful only to change the name/path of directory.*\r\n\r\n\r\n\r\n### Manage Multilingual ###\r\n\r\n#### All languages on the same site ####\r\n\r\nOn the same principle, the variations can be used to create the same page, but in different languages:\r\n\r\n```js\r\n{\r\n    \"languageCode\": \"en-gb\",\r\n    \"variationsRelativePath\": \"languages\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"landing.htm\",\r\n            \"variation\": \"landing.json\"\r\n        },\r\n        \"/home/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\"\r\n        },\r\n        \"/accueil/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\",\r\n            \"languageCode\": \"fr-fr\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : In this example I decided to do without a common variation file, because I did not specify* ***commonVariation***. *I also completely arbitrarily decided to rename my folder* ***variations*** *to* ***languages***.\r\n\r\nwith the following files:\r\n\r\n```\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nlanguages/\r\n— landing.json\r\n— en-gb\r\n—— home.json\r\n— fr-fr\r\n—— home.json\r\ntemplates/\r\n— landing.htm\r\n— home.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"<%= languageCode %>\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><%= specific.titlePage %></title>\r\n    </head>\r\n    <body class=\"<%= specific.classPage %>\">\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/landing.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <select>\r\n        <% for (var i = 0; i < specific.selectLabel.length; i++) { %>\r\n        <option><%= specific.selectLabel[i] %></option>\r\n        <% } %>\r\n    </select>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\n*templates/home.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <div>\r\n        <h1><%- specific.titlePage %></h1>\r\n        <%- specific.content %>\r\n    </div>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\n*languages/landing.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Landing\",\r\n    \"classPage\": \"landing\",\r\n    \"selectLabel\": [\r\n        \"English\",\r\n        \"Français\"\r\n    ]\r\n}\r\n```\r\n\r\n*languages/en-gb/home.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Welcome\",\r\n    \"classPage\": \"home\",\r\n    \"content\": \"<p>This is a home page.</p>\"\r\n}\r\n```\r\n\r\n*languages/fr-fr/home.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Bienvenue\",\r\n    \"classPage\": \"home\",\r\n    \"content\": \"<p>C'est la page d'accueil.</p>\"\r\n}\r\n```\r\n\r\nyou will have access to the addresses:\r\n\r\n- *http://localhost/*\r\n- *http://localhost/home/*\r\n- *http://localhost/accueil/*\r\n\r\n*Note : By default is the* ***languageCode*** *root that determines the display language of the wesite. However, specifically by page language, we can be changed also the* ***languageCode****. *You should also know that once the site or page has a* ***languageCode*** *in the configuration, variations files must be placed in a subdirectory named with the* ***languageCode***.\r\n\r\n\r\n#### Use only changes with the active multilingual ####\r\n\r\nYou may have noticed in the previous example that the `landing.json` file was not in the `en-gb/` or `fr-fr/`. This is quite possible and means that will be used in languages that do not have it in their file.\r\n\r\nAlso, when a `languageCode` is specified, NodeAtlas seek first hand the value in the corresponding folder file. If it was not there, so he went to fetch the parent folder (the one used as standard for variations without multilingual).\r\n\r\nThis will allow you, for example, to manage master language directly in the variation folder. So with the following example:\r\n\r\n```\r\n...\r\nvariations/\r\n— common.json\r\n— home.json\r\n— fr-fr\r\n—— common.json\r\n—— home.json\r\n...\r\n```\r\n\r\nyou can\r\n\r\n- manage the version `en-gb` directly to the root of `variations/` (as NodeAtlas find nothing in` en-gb` then it uses the values of the root files) and\r\n- manage the `fr-fr` release in the` fr-fr / `,\r\n\r\nthus, if a sentence has not yet translated into a file `fr-fr`, instead of returning an error, NodeAtlas return the root version or the version` en-gb`.\r\n\r\n\r\n#### Each language has its configuration ####\r\n\r\nYou can also choose to configure each language in a \"webconfig.json\" different. With the following set of file:\r\n\r\n```\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nvariations/\r\n— landing.json\r\n— en-gb\r\n—— home.json\r\n—— members.json\r\n— fr-fr\r\n—— home.json\r\n—— members.json\r\ntemplates/\r\n— landing.htm\r\n— home.htm\r\n— members.htm\r\nwebconfig.json\r\nwebconfig.en-gb.json\r\nwebconfig.fr-fr.json\r\n```\r\n\r\nyou could have \"webconfig.json» next:\r\n\r\n*webconfig.json*\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"landing.htm\",\r\n            \"variation\": \"landing.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*webconfig.en-gb.json*\r\n\r\n```js\r\n{\r\n    \"httpPort\": 81,\r\n    \"urlRelativeSubPath\": \"english\",\r\n    \"languageCode\": \"en-gb\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\"\r\n        },\r\n        \"/members-list/\": {\r\n            \"template\": \"members.htm\",\r\n            \"variation\": \"members.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*webconfig.fr-fr.json*\r\n\r\n```js\r\n{\r\n    \"httpPort\": 82,\r\n    \"urlRelativeSubPath\": \"francais\",\r\n    \"languageCode\": \"fr-fr\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\"\r\n        },\r\n        \"/list-of-members/\": {\r\n            \"template\": \"members.htm\",\r\n            \"variation\": \"members.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand have access to addresses:\r\n\r\n- *http://localhost/*\r\n- *http://localhost:81/english/*\r\n- *http://localhost:81/english/*\r\n- *http://localhost:81/english/members-list/*\r\n- *http://localhost:82/francais/*\r\n- *http://localhost:82/francais/list-of-members/*\r\n\r\nIt is then possible to reverse proxy with [Bouncy](#proxy) (for example) to bring all urls on port 80 to obtain:\r\n\r\n- *http://www.website.ext/*\r\n- *http://www.website.ext/english/*\r\n- *http://www.website.ext/english/*\r\n- *http://www.website.ext/english/members-list/*\r\n- *http://www.website.ext/francais/*\r\n- *http://www.website.ext/francais/list-of-members/*\r\n\r\n\r\n\r\n### Change the url parameters ###\r\n\r\nBy default, if you use the following configuration:\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis is the same to using it:\r\n\r\n```js\r\n{\r\n    \"httpHostname\": \"localhost\",\r\n    \"httpPort\": 80,\r\n    \"httpSecure\": false,\r\n    \"urlRelativeSubPath\": \"\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand you will be access to the url: *http://localhost/*.\r\n\r\nThen change the configuration to this:\r\n\r\n```js\r\n{\r\n    \"httpHostname\": \"127.0.0.1\",\r\n    \"httpPort\": 7777,\r\n    \"httpSecure\": true,\r\n    \"urlRelativeSubPath\": \"sub/folder\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nfor access to : *https://127.0.0.1:7777/sub/folder/*\r\n\r\n\r\n\r\n### Create your own webconfig variables ###\r\n\r\nImagine two webconfigs in which we create our own variables as follows:\r\n\r\n1. \"webconfig.json\"\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    },\r\n    \"_minified\": \"\"\r\n}\r\n```\r\n\r\n2. \"webconfig.prod.json\"\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    },\r\n    \"_minified\": \".min\"\r\n}\r\n```\r\n\r\nwith this set of files\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common.min.css\r\n— javascript/\r\n—— common.js\r\n—— common.min.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\nand \"index.htm\" containing:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common<%= webconfig._minified %>.css\" />\r\n    </head>\r\n    <body>\r\n        <div>This is a test to get a file minify/unminify.</div>\r\n        <script type=\"text/javascript\" src=\"javascript/common<%= webconfig._minified %>.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\nTo run (since the site folder) the the command:\r\n\r\n```\r\n\\> node </path/to/>node-atlas/\r\n```\r\n\r\nWe will have to address \"http://localhost/\" the following output with non-minified files:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.css\" />\r\n    </head>\r\n    <body>\r\n        <div>This is a test to get a file minify/unminify.</div>\r\n        <script type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\nHowever, running the command:\r\n\r\n```\r\n\\> node </path/to/>node-atlas/server.js --webconfig webconfig.prod.json\r\n```\r\n\r\nWe will have to address \"http://localhost/\" the following output with minified files:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.min.css\" />\r\n    </head>\r\n    <body>\r\n        <div>This is a test to get a file minify/unminify.</div>\r\n        <script type=\"text/javascript\" src=\"javascript/common.min.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*Note : It is better to prefix his personal variables with \"_\" to avoid conflicts with existing or future configuration variables.*\r\n\r\n\r\n\r\n### NodeAtlas use to generate HTML assets ###\r\n\r\n#### Generate HTML assets ####\r\n\r\nWith the following configuration it is possible to generate HTML rendering assets of each page in a linked file. The file will be (re)created every display of page in your browser.\r\n\r\n```js\r\n{\r\n    \"htmlGeneratesBeforeResponse\": true,\r\n    \"generatesRelativePath\": \"generates\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"generate\": \"/index.html\"\r\n        },\r\n        \"/list-of-members/\": {\r\n            \"template\": \"members.htm\",\r\n            \"generate\": \"/members/list.html\"\r\n        },\r\n        \"/list-of-members/?foo=bar\": {\r\n            \"template\": \"members.htm\",\r\n            \"generate\": false\r\n        },\r\n        \"/no/generate/property/\": {\r\n            \"template\": \"members.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand the following set of files:\r\n\r\n```\r\n{\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\ngenerates/\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n}\r\n```\r\n\r\ncan physically create assets:\r\n\r\n```\r\n{\r\ngenerates/\r\n— index.html\r\n— members/\r\n—— list.html\r\n— no/\r\n—— generates/\r\n——— property <== Ceci est un fichier\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n}\r\n```\r\n\r\nby going to the address:\r\n\r\n- *http://localhost/*\r\n- *http://localhost/list-of-members/*\r\n- *http://localhost/no/generate/property/*\r\n\r\n*Note : No generate page are generated for \"/list-of-members/?foo=bar\" because `generate` is set to `false`. Use this value to ignore a route generation.*\r\n\r\nThe generation starts when displaying the page if ***htmlGeneratesBeforeResponse*** exist and if it is ***true***. If it is passed ***false*** (or removed) the only way to generate all the pages of the website will be via the command `node </path/to/>node-atlas/server.js --generate` will generate all pages once if `generatesRelativePath` exist. Of course in all cases this command work and allow you to regenerate all pages after a change into all page (a change in a component called on all pages e.g.).\r\n\r\nAlso with `--generate` , the entire ` assetsRelativePath` folder (public folder files) will be copied in the `generatesRelativePath` if both folder does not have the same path, and if `generatesRelativePath` exist. It really allows you to get the stand-alone pages you want in output folder with all files which they call (CSS / JS / Images, etc.).\r\n\r\nYou could desactivate the HTML generation, even if a directory `generatesRelativePath` exist in the système file, with `htmlGenerateEnable` à `false`.\r\n\r\n*Note : If* ***generatesRelativePath*** *is not present in \"webconfig.json\", default generates folder is* ***generates/***. ***generatesRelativePath*** *is useful only to change the name/path of directory.*\r\n\r\n\r\n#### Generate website without server side ####\r\n\r\nYou can also manager a simple HTML website page with the following configuration:\r\n\r\n```js\r\n{\r\n    \"languageCode\": \"fr-fr\",\r\n    \"enableIndex\": true,\r\n    \"htmlGeneratesBeforeResponse\": true,\r\n    \"generatesRelativePath\": \"../HTML/\",\r\n    \"assetsRelativePath\": \"../HTML/\",\r\n    \"routes\": {\r\n        \"/cv.html\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/en/cv.html\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\",\r\n            \"languageCode\": \"en\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand the following set of files:\r\n\r\n```\r\nHTML/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\nengine/\r\n— variations/\r\n—— fr-fr/\r\n——— index.json\r\n—— en/\r\n——— index.json\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nTo address *http://localhost/* will show a list of pages your site components (with **enableIndex** set to **true**).\r\n\r\nIt will do more than, once your work is done, enjoy your HTML site in the folder:\r\n\r\n```\r\nHTML/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\n— cv.html\r\n— en/\r\n—— cv.html\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## JavaScript Development (Back-end Part) ##\r\n\r\n### Use NodeAtlas to run a website ###\r\n\r\nNodeAtlas is useful for more than simply generate template web page easily based on your variation files. NodeAtlas allow you to dynamicly interact with variations var and with the DOM with;\r\n\r\n- parameters in query part of url (GET),\r\n- parameters in request body (POST),\r\n- connection with database or,\r\n- management of sessions or,\r\n- do AJAX or Websocket request/response and\r\n- do more !\r\n\r\nFor that, you could hook to some point of life cycle of the page generation with common controller (`commonController`) and with specific controller for each page (`routes[<route>].controller`).\r\n\r\nThis is a `webconfig.json` allows you to manipulate each part of life cycle of a page.\r\n\r\n```js\r\n{\r\n    \"controllersRelativePath\": \"controllers\",\r\n    \"commonController\": \"common.js\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\",\r\n            \"controller\": \"index.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : If* ***controllersRelativePath*** *is not present in \"webconfig.json\", default controller folder is* ***controllers***. ***controllersRelativePath*** *is useful only to change the name/path of directory.*\r\n\r\nand this is the detail of all hooks :\r\n\r\n**Start NodeAtlas** \r\n> Init of Modules\r\n\r\n> - *loadModules* --> into `commonController` file (`common.js` for example).\r\n\r\n> Init of Sessions\r\n\r\n> - *setSessions* --> into `commonController` file (`common.js` for example).\r\n\r\n> Init of server configuration\r\n\r\n> - *setConfigurations* --> into `commonController` file (`common.js` for example).\r\n\r\n> Init of routes\r\n\r\n> - *setRoutes* --> à manipuler depuis le fichier `commonController` (`common.js` dans l'exemple).\r\n\r\n> Start Web Server\r\n\r\n**HTTP Request/Response of NodeAtlas**\r\n> Client Request Processing\r\n\r\n> - *changeVariation* --> into `commonController` file (`common.js` for example).\r\n\r\n> - *changeVariation* --> into `routes[<route>].controller` file (`index.js` for example).\r\n\r\n> Templates and Variations Compilation => Complete DOM.\r\n\r\n> - *changeDom* --> into `commonController` file (`common.js` for example).\r\n\r\n> - *changeDom* --> into `routes[<route>].controller` file (`index.js` for example).\r\n\r\n> Sending of Response to Client\r\n\r\n#### changeVariation ####\r\n\r\nIn order to intercept variations, you could use common controller for all the website page and/or also a specific controller per page.\r\n\r\nThis is an example using the two hooks, the common in first and after the specific:\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"commonVariation\": \"common.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\",\r\n            \"controller\": \"index.js\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith this files :\r\n\r\n```\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nvariations/\r\n— common.json\r\n— index.json\r\ncontrollers/\r\n— common.js\r\n— index.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nDo a POST request on `http://localhost/?title=Haeresis` with `example=This+is+a+test` variable in body will use the following files:\r\n\r\n*variations/common.json*\r\n\r\n```js\r\n{\r\n    \"titleWebsite\": \"Site Title\"\r\n}\r\n```\r\n\r\n*variations/index.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Welcome\",\r\n    \"content\": \"<p>This is the Home Page.</p>\"\r\n}\r\n```\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <div class=\"title\"><%- common.titleWebsite %></div>\r\n\r\n    <div>\r\n        <h1><%- specific.titlePage %></h1>\r\n        <%- specific.content %>\r\n    </div>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\n*controllers/common.js*\r\n\r\n```js\r\n// This code is executed before variation are injected into template engine.\r\n// This code is executed for all HTTP request, for all pages.\r\nexports.changeVariation = function (params, next) {\r\n    var variation = params.variation,\r\n        request = params.request,\r\n        response = params.response;\r\n\r\n    // Here we update variations variable.\r\n\r\n    console.log(variation.common.titleWebsite); // \"Site Title\"\r\n    console.log(variation.specific.titlePage); // \"Welcome\"\r\n    console.log(variation.specific.content); // \"This is the Home Page.\"\r\n\r\n    if (request.query[\"title\"]) {\r\n        variation.specific.titlePage = variation.specific.titlePage + \" \" + request.query.title;\r\n    }\r\n    if (request.body[\"example\"]) {\r\n        variation.specific.content = request.body.example;\r\n    }\r\n    \r\n    console.log(variation.common.titleWebsite); // \"Site Title\"\r\n    console.log(variation.specific.titlePage); // \"Welcome Haeresis\"\r\n    console.log(variation.specific.content); // \"This is a test\"\r\n\r\n    // We update modification here.\r\n    next(variation);\r\n};\r\n```\r\n\r\n*controllers/index.js*\r\n\r\n```js\r\n// This code is executed before variation are injected into template engine.\r\n// This code is executed only for the « / » page .\r\nexports.changeVariation = function (params, next) {\r\n    var variation = params.variation,\r\n        request = params.request,\r\n        response = params.response;\r\n\r\n    // Here we update variations variable.\r\n\r\n    console.log(variation.common.titleWebsite); // \"Site Title\"\r\n    console.log(variation.specific.titlePage); // \"Welcome Haeresis\"\r\n    console.log(variation.specific.content); // \"This is a test\"\r\n\r\n    variation.common.titleWebsite = \"It's Home, no way.\";\r\n    variation.specific.content = \"It's Home, no way.\";\r\n\r\n    console.log(variation.common.titleWebsite); // \"It's Home, no way.\"\r\n    console.log(variation.specific.titlePage); // \"Welcome Haeresis\"\r\n    console.log(variation.specific.content); // \"It's Home, no way.\"\r\n\r\n    // We update modification here.\r\n    next(variation);\r\n};\r\n```\r\n\r\nen this produce the following output :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>It's Home, no way.</title>\r\n    </head>\r\n    <body>\r\n        <div class=\"title\">It's Home, no way.</div>\r\n        <div>\r\n            <h1>Welcome Haeresis</h1>\r\n            It's Home, no way.\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n\r\nIf you delete the variation entry of specific page from webconfig:\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"commonVariation\": \"common.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nthe output will be as following:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Site Title</title>\r\n    </head>\r\n    <body>\r\n        <div class=\"title\">Site Title</div>\r\n        <div>\r\n            <h1>Welcome Haeresis</h1>\r\n            This is a test\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n\r\n#### changeDom ####\r\n\r\nIn order to intercept DOM before it was sent, you could use common controller for all the website page and/or also a specific controller per page.\r\n\r\nThis is an example using the two hooks, the common in first and after the specific:\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"commonVariation\": \"common.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\",\r\n            \"controller\": \"index.js\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith this files :\r\n\r\n```\r\nvariations/\r\n— index.json\r\ncontrollers/\r\n— common.js\r\n— index.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nDo a POST request on `http://localhost/` will use the following files:\r\n\r\n*variations/common.json*\r\n\r\n```js\r\n{\r\n    \"titleWebsite\": \"Site Title\"\r\n}\r\n```\r\n\r\n*variations/index.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Welcome\",\r\n    \"content\": \"<p>This is Home Page.</p>\"\r\n}\r\n```\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><%- common.titleWebsite %></title>\r\n    </head>\r\n    <body>\r\n        <div class=\"title\"><%- common.titleWebsite %></div>\r\n        <div>\r\n            <h1><%- specific.titlePage %></h1>\r\n            <%- specific.content %>\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*controllers/common.js*\r\n\r\n```js\r\n// This code is executed before DOM was sent to Client.\r\n// This code is executed for all HTTP request, for all pages.\r\nexports.changeDom = function (params, next) {\r\n    var NA = this,\r\n        dom = params.dom,\r\n        request = params.request,\r\n        response = params.response,\r\n        cheerio = NA.modules.cheerio, // jsdom for manipulate DOM with jQuery.\r\n        $ = cheerio.load(dom, { decodeEntities: false }); // We load datas for manipulate it as a DOM.\r\n\r\n    // Just after eath h1 from HTML DOM...\r\n    $(\"h1\").each(function () {\r\n        var $this = $(this);\r\n\r\n        // ...we create a div,\r\n        $this.after(\r\n            // ...we inject the content of h1 into the div,\r\n            $(\"<div>\").html($this.html())\r\n        );\r\n        // ...and we delete the h1.\r\n        $this.remove();\r\n    });\r\n\r\n    // We create a new HTML output with updates.\r\n    dom = $.html();\r\n\r\n    // We update modification here.\r\n    next(dom);\r\n};\r\n```\r\n\r\n*controllers/index.js*\r\n\r\n```js\r\n// This code is executed before DOM was sent to Client.\r\n// This code is executed only for the « / » page .\r\nexports.changeDom = function (params, next) {\r\n    var NA = this,\r\n        dom = params.dom,\r\n        request = params.request,\r\n        response = params.response,\r\n        cheerio = NA.modules.cheerio, // jsdom for manipulate DOM with jQuery.\r\n        $ = cheerio.load(dom, { decodeEntities: false }); // We load datas for manipulate it as a DOM.\r\n\r\n    // We update nodes contents with `.title` class.\r\n    $(\".title\").text(\"Content Update\");\r\n\r\n    // We create a new HTML output with updates.\r\n    dom = $.html();\r\n\r\n    // We update modification here.\r\n    next(dom);\r\n};\r\n```\r\n\r\nthe output will be as following:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <title>Site Title</title>\r\n    </head>\r\n    <body>\r\n        <div class=\"title\">Content Update</div>\r\n        <div>\r\n            <div>Welcome</div>\r\n            <p>This is Home Page.</p>\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n\r\n#### loadModules ####\r\n\r\nTo load others modules which not include into NodeAtlas, you can use the common controller for all the website in order to load it once and use modules anywhere in all controllers.\r\n\r\nThis is an exemple using an external module of NodeAtlas:\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"controller\": \"index.js\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith this set of files:\r\n\r\n```\r\ncontrollers/\r\n— common.js\r\n— index.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nDo a POST request on `http://localhost/` will use the following files:\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Test Module</title>\r\n    </head>\r\n    <body>\r\n        <div class=\"title\">Test Module</div>\r\n        <div>\r\n            <h1>Test Module</h1>\r\n            <%- example %>\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*controllers/common.js*\r\n\r\n```js\r\n// This code is executing during the modules loading phase.\r\n// This code will be executed when NodeAtlas starting.\r\nexports.loadModules = function () {\r\n    // Use the « NodeAtlas » instance from engine.\r\n    var NA = this;\r\n\r\n    // Associate each modules to allow us to use them anywhare.\r\n    NA.modules.marked = require('marked');\r\n};\r\n```\r\n\r\n*controllers/index.js*\r\n\r\n```js\r\n// This code is executed before variation are injected into template engine.\r\n// This code is executed only for the « / » page .\r\nexports.changeVariation = function (params, next) {\r\n    // Use the « NodeAtlas » instance from engine.\r\n    var NA = this,\r\n        variation = params.variation,\r\n        marked = NA.modules.marked;\r\n\r\n    variation.example = marked(\"I am using __markdown__.\");\r\n\r\n    // We update modification here.\r\n    next(variation);\r\n};\r\n```\r\n\r\nthis will produce the following output:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Test Module</title>\r\n    </head>\r\n    <body>\r\n        <div class=\"title\">Test Module</div>\r\n        <div>\r\n            <h1>Test Module</h1>\r\n            <p>I am using <strong>markdown</strong>.</p>\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n\r\n#### setConfigurations ####\r\n\r\nTo configure NodeAtlas web server others ([ExpressJs](http://expressjs.com/)), you can use the common controller for all the website in order to load it once and use modules anywhere in all controllers.\r\n\r\nThis is an exemple using a middleware for [ExpressJs](http://expressjs.com/):\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"controller\": \"index.js\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith this set of files:\r\n\r\n```\r\ncontrollers/\r\n— common.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nDo a POST request on `http://localhost/` will use the following files:\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n<%- content %>\r\n```\r\n\r\n*controllers/common.js*\r\n\r\n```js\r\n// This code is executing before starting of the web server.\r\n// This code will be executed when NodeAtlas starting.\r\nexports.setConfigurations = function (next) {\r\n    // Use the « NodeAtlas » instance from engine.\r\n    var NA = this;\r\n\r\n    // Middleware utilisé lors de chaque requête.\r\n    NA.httpServer.use(function (request, response, next) {\r\n        response.setHeader(\"X-Frame-Options\", \"ALLOW-FROM http://www.lesieur.name/\");\r\n        next();\r\n    });\r\n\r\n    // We update modification here.\r\n    next();\r\n};\r\n```\r\n\r\n*controllers/index.js*\r\n\r\n```js\r\n// This code is executing before starting of the web server.\r\n// This code is executed only for the « / » page .\r\nexports.changeVariation = function (params, next) {\r\n    var variation = params.variation;\r\n\r\n    // We prepare file for JSON displaying.\r\n    variation.currentRouteParameters.headers = {\r\n        \"Content-Type\": \"application/json; charset=utf-8\"\r\n    };\r\n    variation.content = JSON.stringify(variation, null, \"    \");\r\n\r\n    // We update modification here.\r\n    next(variation);\r\n};\r\n```\r\n\r\nthis will produce the following output:\r\n\r\n```html\r\n{\r\n    \"urlBasePathSlice\": \"http://localhost\",\r\n    \"urlBasePath\": \"http://localhost/\",\r\n    \"urlPath\": \"http://localhost/\",\r\n    \"pathname\": /* ... */,\r\n    \"filename\": /* ... */,\r\n    \"params\": {},\r\n    \"currentRouteParameters\": { /* ... */ },\r\n    \"currentRoute\": \"/\",\r\n    \"webconfig\": { /* ... */ }\r\n}\r\n```\r\n\r\n#### setSessions ####\r\n\r\nTo configure client-server Sessions of NodeAtlas, you can use the common controller for all the website in order to load it once and use modules anywhere in all controllers, this is an example with [Redis](http://redis.io/) sessions.\r\n\r\nThis is all files for example:\r\n\r\n```\r\ncontrollers/\r\n— common.js\r\ntemplates/\r\n— index.htm\r\nvariations/\r\n— common.json\r\n— index.json\r\nwebconfig.json\r\n```\r\n\r\nWith the `webconfig.json`:\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"commonVariation\": \"common.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd \"common.js\" file containing e.g.:\r\n\r\n```js\r\n// This code is executing during the modules loading phase.\r\n// This code will be executed when NodeAtlas starting.\r\nexports.loadModules = function () {\r\n    // Find instance of « NodeAtlas » engine.\r\n    var NA = this;\r\n\r\n    // Associations of each module to access it anywhere.\r\n    NA.modules.RedisStore = require('connect-redis');\r\n};\r\n\r\n// This code is executing while configuration of session.\r\n// This code will be executed when NodeAtlas starting.\r\nexports.setSessions = function (next) {\r\n    var NA = this,\r\n        session = NA.modules.session,\r\n        RedisStore = NA.modules.RedisStore(session);\r\n\r\n    // We replace the default session.\r\n    NA.sessionStore = new RedisStore();\r\n\r\n    // We update modification here.\r\n    next();\r\n};\r\n```\r\n\r\n#### setRoutes ####\r\n\r\nTo configure routes of NodeAtlas by programmation, you can use the common controller for all the website in order to load it once and use modules anywhere in all controllers.\r\n\r\nThis is all files for example:\r\n\r\n```\r\ncontrollers/\r\n— common.js\r\ntemplates/\r\n— content.htm\r\n— index.htm\r\nvariations/\r\n— common.json\r\nwebconfig.json\r\n```\r\n\r\nWith the `webconfig.json`:\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"commonVariation\": \"common.json\",\r\n    \"routes\": {\r\n        \"/index.html\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd \"common.js\" file containing e.g.:\r\n\r\n```js\r\n// This code is executing while route are added.\r\n// This code will be executed when NodeAtlas starting.\r\nexports.setConfigurations = function (next) {\r\n\r\n    // We use instance of NodeAtlas.\r\n    var NA = this,\r\n\r\n        // And we keep routes from NodeAtlas webconfig...\r\n        route = NA.webconfig.routes;\r\n\r\n    // ...to add \"/content.html\" route amongs others routes.\r\n    route[\"/content.html\"] = {\r\n        \"template\": \"content.htm\"\r\n    };\r\n\r\n    // We update modification here.\r\n    next(); \r\n};\r\n```\r\n\r\n\r\n\r\n### Use Websocket instead of AJAX ###\r\n\r\nTo keep a link between Front and Back part of website, NodeAtlas can use [Socket.IO](http://socket.io/) (more details on official website).\r\n\r\nThanks to this, you could change in real time data on your page, but also change data from another tabs or browsers.\r\n\r\nWith this following files:\r\n\r\n```\r\nassets/\r\n— javascript/\r\n—— common.js\r\n—— index.js\r\ncomponents/\r\n— foot.htm\r\n— head.htm\r\n— index.htm\r\ncontrollers/\r\n— common.js\r\n- index.js\r\nvariations/\r\n— common.json\r\n— index.json\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nWith this `webconfig.json`:\r\n\r\n```json\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"commonVariation\": \"common.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\",\r\n            \"controller\": \"index.js\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand with this templates files:\r\n\r\n**components/head.htm**\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"<%= languageCode %>\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><%- common.titleWebsite %></title>\r\n    </head>\r\n    <body data-hostname=\"<%= webconfig.urlWithoutFileName %>\" data-subpath=\"<%= webconfig.urlRelativeSubPath.slice(1) %>\" data-variation=\"<%= currentRouteParameters.variation.replace(/\\.json/,'') %>\">\r\n```\r\n\r\n*Note : `data-hostname` and `data-subpath` will help us to set Socket.IO front configuration.*\r\n\r\n**components/foot.htm**\r\n\r\n```html\r\n        <script type=\"text/javascript\" src=\"https://cdn.socket.io/socket.io-1.2.0.js\"></script>\r\n        <script src=\"javascript/common.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*Note : The Front file of Socket.IO is calling here.*\r\n\r\n**components/index.htm**\r\n\r\n```html\r\n        <div class=\"title\"><%- common.titleWebsite %></div>\r\n        <div>\r\n            <h1><%- specific.titlePage %></h1>\r\n            <%- specific.content %>\r\n            <div><%- new Date() %></div>\r\n        </div>\r\n        <button>Update</button>\r\n```\r\n\r\n*Note : Each click on `button` will update content from `components/index.htm`.*\r\n\r\n**templates/index.htm**\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n    <div class=\"layout\">\r\n    <%- include('index.htm') %>\r\n    </div>\r\n    <script src=\"javascript/index.js\"></script>\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\n*Note : We parse here the home page `/`.*\r\n\r\nand the following variations files :\r\n\r\n**variations/common.json**\r\n\r\n```json\r\n{\r\n    \"titleWebsite\": \"Socket.IO Example\"\r\n}\r\n```\r\n\r\n**variations/index.json**\r\n\r\n```json\r\n{\r\n    \"titlePage\": \"Date\",\r\n    \"content\": \"<p>Current date is:</p>\"\r\n}\r\n```\r\n\r\nAll work fine here, but see what we will do with controller part on Server-side and on Client-side. \r\n\r\nOn server, we will use the following files:\r\n\r\n**controllers/common.js**\r\n\r\n```js\r\nvar privates = {};\r\n\r\n// Load modules for this site in the NodeAtlas object.\r\nexports.loadModules = function () {\r\n    // Find instance of « NodeAtlas » engine.\r\n    var NA = this;\r\n\r\n    // Associations of each module to access it anywhere.\r\n    NA.modules.socketio = require('socket.io');\r\n    NA.modules.cookie = require('cookie');\r\n};\r\n\r\n// Example using Socket.IO.\r\nprivates.socketIoInitialisation = function (socketio, NA, next) {\r\n    var optionIo = (NA.webconfig.urlRelativeSubPath) ? { path: NA.webconfig.urlRelativeSubPath + '/socket.io', secure: ((NA.webconfig.httpSecure) ? true : false) } : undefined,\r\n        io = socketio(NA.server, optionIo),\r\n        cookie = NA.modules.cookie,\r\n        cookieParser = NA.modules.cookieParser;\r\n\r\n    // Synchronizing sessions with Socket.IO.\r\n    io.use(function(socket, next) {\r\n        var handshakeData = socket.request;\r\n\r\n        // Fallback if cookies are not supported.\r\n        if (!handshakeData.headers.cookie) {\r\n            return next(new Error('Session cookie required.'));\r\n        }\r\n\r\n        // Transformation of the cookie String to JSON object.\r\n        handshakeData.cookie = cookie.parse(handshakeData.headers.cookie);\r\n\r\n        // Verification of the signature of the cookie.\r\n        handshakeData.cookie = cookieParser.signedCookies(handshakeData.cookie, NA.webconfig.session.secret);\r\n\r\n        // Keep worn the Session ID.\r\n        handshakeData.sessionID = handshakeData.cookie[NA.webconfig.session.key];\r\n\r\n        // Accept the cookie.\r\n        NA.sessionStore.load(handshakeData.sessionID, function (error, session) {\r\n            if (error || !session) {\r\n                return next(new Error('No recovered session.'));\r\n            } else {\r\n                handshakeData.session = session;\r\n                next();\r\n            }\r\n        });\r\n    });\r\n\r\n    // Next.\r\n    next(io);\r\n};\r\n\r\n// Adding listener for a specific controller \"index.js\" (see example in the next file).\r\nprivates.socketIoEvents = function (io, NA) {\r\n    var params = {};\r\n\r\n    params.io = io;\r\n\r\n    // Event for the index page (see example in the next file).\r\n    require('./index').asynchrone.call(NA, params);\r\n};\r\n\r\n// Configuration of all modules.\r\nexports.setConfigurations = function (next) {\r\n    var NA = this,\r\n        socketio = NA.modules.socketio;\r\n\r\n    // Initialize Socket IO.\r\n    privates.socketIoInitialisation(socketio, NA, function (io) {\r\n\r\n        // Socket IO listening.\r\n        privates.socketIoEvents(io, NA);\r\n\r\n        // Next steps of engine.\r\n        next();\r\n    });\r\n};\r\n```\r\n\r\n*Note : This is Socket.IO server global configuration.*\r\n\r\n**controllers/index.js**\r\n\r\n```js\r\n// All Websocket action possible for this template.\r\n// Used not by \"NodeAtlas\" but with \"common.js\" (see previous file).\r\nexports.asynchrone = function (params) {\r\n    var NA = this,\r\n        io = params.io;\r\n\r\n    // Once we have a valid connection between the client and our back-end...\r\n    io.sockets.on('connection', function (socket) {\r\n\r\n        // ...stay tuned on the \"create-item-button\" demand...\r\n        socket.on(\"server-render\", function (data) {\r\n            var sessionID = socket.request.sessionID,\r\n                session = socket.request.session,\r\n                variation = {};\r\n\r\n            // Specific variations in the good language.\r\n            variation = NA.addSpecificVariation(\"index.json\", data.lang, variation);\r\n\r\n            // Common variations in the good language.\r\n            variation = NA.addCommonVariation(data.lang, variation);\r\n\r\n            // HTML part from `componentsRelativePath` directory and render with variations.\r\n            result = NA.newRender(\"index.htm\", variation);\r\n\r\n            // And responds to all customers with a set of data in data.\r\n            io.sockets.emit('create-article-button', data);\r\n        });\r\n    });\r\n};\r\n```\r\n\r\nAnd for client-side, we use the following files:\r\n\r\n**assets/javascript/common.js**\r\n\r\n```js\r\nwindow.website = window.website || {};\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    var privates = {},\r\n        optionsSocket,\r\n        body = document.getElementsByTagName(\"body\")[0];\r\n\r\n    // We configure Socket.IO client-side.\r\n    optionsSocket = (body.getAttribute(\"data-subpath\") !== \"\") ? { path: \"/\" + body.getAttribute(\"data-subpath\") + ((body.getAttribute(\"data-subpath\")) ? \"/\" : \"\") + \"socket.io\" } : undefined;\r\n    publics.socket = io.connect((body.getAttribute(\"data-subpath\") !== \"\") ? body.getAttribute(\"data-hostname\") : undefined, optionsSocket);\r\n}(website));\r\n\r\n// We execute specific JavaScript, here it's [\"index\"].\r\nwebsite[document.getElementsByTagName(\"body\")[0].getAttribute(\"data-variation\")].init();\r\n```\r\n\r\n*Note : This is the global Socket.IO configuration client-side with `data-subpath` and `data-hostname`.*\r\n\r\n**assets/javascript/index.js**\r\n\r\n```js\r\nwindow.website = window.website || {};\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    var html = document.getElementsByTagName(\"html\")[0],\r\n        body = document.getElementsByTagName(\"body\")[0],\r\n        layout = document.getElementsByClassName(\"layout\")[0];\r\n\r\n    // We associate on the button the action to contact server.\r\n    function setServerRender() {\r\n        var button = document.getElementsByTagName(\"button\")[0];\r\n        button.addEventListener(\"click\", function () {\r\n            website.socket.emit(\"server-render\", {\r\n                lang: html.getAttribute(\"lang\"),\r\n                variation: body.getAttribute(\"data-variation\")\r\n            });\r\n        });\r\n    }\r\n\r\n    // We create the code will be executed when page run.\r\n    publics.init = function () {\r\n\r\n        // We set action on button.\r\n        setServerRender();\r\n\r\n        // When server response come back...\r\n        website.socket.on(\"server-render\", function (data) {\r\n\r\n            // ...we update data content...\r\n            layout.innerHTML = data.render;\r\n\r\n            // ...and we set again button action.\r\n            setServerRender();\r\n        });\r\n    };\r\n}(website.index = {}));\r\n```\r\n\r\nRun your project and go on `http://localhost/` across multiple tab and/or multiple browser. You will see when you click on « Update », the page (current date) will be updated on all tabs open.\r\n\r\nThanks to `NA.addSpecificVariation`, `NA.addCommonVariation` and `NA.newRender`, it's possible to generate a new template and variation compilation.\r\n\r\nIf `data.lang` in this example is type of `undefined`, files will be search in rood directory. If `currentVariation` is type of `undefined` an empty object will be created.\r\n\r\n\r\n\r\n### Use MySQL Database (SQL) ###\r\n\r\nWe will see now how to use data from database. We will use the `mysql` npm module. And first, [install a MySQL server](https://dev.mysql.com/downloads/installer/).\r\n\r\n#### MySQL Database ####\r\n\r\nFirst, we will create a database `demo` on the server:\r\n\r\n```\r\nCREATE DATABASE demo;\r\n```\r\n\r\nand select it:\r\n\r\n```\r\nUSE demo\r\n```\r\n\r\nand create a `user` table:\r\n\r\n```\r\nCREATE TABLE user\r\n(\r\n    id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,\r\n    lastname VARCHAR(100),\r\n    firstname VARCHAR(100),\r\n    email VARCHAR(255),\r\n    birthdate DATE,\r\n    gender TINYINT(1),\r\n    country VARCHAR(255),\r\n    town VARCHAR(255),\r\n    zipcode VARCHAR(5),\r\n    address VARCHAR(255)\r\n);\r\n```\r\n\r\nand fill it with this set of data:\r\n\r\n```\r\nINSERT INTO user (\r\n    lastname,\r\n    firstname,\r\n    email,\r\n    birthdate,\r\n    gender,\r\n    country,\r\n    town,\r\n    zipcode,\r\n    address\r\n) VALUES (\r\n    \"Lesieur\",\r\n    \"Bruno\",\r\n    \"bruno.lesieur@gmail.com\",\r\n    \"1988/07/18\",\r\n    true,\r\n    \"France\",\r\n    \"Annecy\",\r\n    74000,\r\n    \"66 avenue de Genève\"\r\n);\r\n```\r\n\r\n#### NodeAtlas Files ####\r\n\r\nWith the following data set:\r\n\r\n```\r\nassets/\r\n— javascript/\r\n—— models/\r\n——— user.js\r\ncontrollers/\r\n— common.js\r\n— index.js\r\nmodels/\r\n— user.js\r\ntemplates/\r\n— index.htm\r\nvariations/\r\n— common.json\r\n— index.json\r\nwebconfig.json\r\n```\r\n\r\nWe will use the following `webconfig.json` with the custom `_mysqlConfig` variable which contain all informations for database connection:\r\n\r\n```\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"commonVariation\": \"common.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\",\r\n            \"controller\": \"index.js\"\r\n        }\r\n    },\r\n    \"_mysqlConfig\": {\r\n        \"host\": \"localhost\",\r\n        \"user\": \"root\",\r\n        \"password\": \"root\",\r\n        \"database\": \"demo\"\r\n    }\r\n}\r\n```\r\n\r\nWith following files to display page:\r\n\r\n**templates/index.htm**\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"<%- languageCode %>\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><%- common.titleWebsite %></title>\r\n    </head>\r\n    <body>\r\n        <div class=\"title\"><%- common.titleWebsite %></div>\r\n        <div>\r\n            <h1><%- specific.titlePage %></h1>\r\n            <%- specific.content %>\r\n            <ul>\r\n                <li>Id: <strong><%- id %></strong></li>\r\n                <li>Lastname: <strong><%- lastname %></strong></li>\r\n                <li>Firstname: <strong><%- firstname %></strong></li>\r\n                <li>Email: <strong><%- email %></strong></li>\r\n                <li>Birthdate: <strong><%- birthdate %></strong></li>\r\n                <li>Gender: <strong><%- gender %></strong></li>\r\n                <li>Country: <strong><%- country %></strong></li>\r\n                <li>Town: <strong><%- town %></strong></li>\r\n                <li>Zipcode: <strong><%- zipcode %></strong></li>\r\n                <li>Address: <strong><%- address %></strong></li>\r\n            </ul>\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n\r\n**variations/common.json**\r\n\r\n```js\r\n{\r\n    \"titleWebsite\": \"Example MySql\",\r\n    \"male\": \"Man\",\r\n    \"female\": \"Woman\"\r\n}\r\n```\r\n\r\n**variations/index.json**\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"User Table\",\r\n    \"content\": \"<p>`bruno` entry details.</p>\"\r\n}\r\n```\r\n\r\nAnd last, we will be connect to the database with the common controller `controllers/common.js`:\r\n\r\n```js\r\nexports.loadModules = function () {\r\n    var NA = this;\r\n\r\n    NA.modules.mysql = require('mysql');\r\n    NA.models = {};\r\n    NA.models.User = require('../models/user.js');\r\n};\r\n\r\nexports.setConfigurations = function (next) {\r\n    var NA = this,\r\n        mysql = NA.modules.mysql;\r\n\r\n    NA.mySql = mysql.createPool(NA.webconfig._mysqlConfig);\r\n\r\n    next();\r\n};\r\n```\r\n\r\nAnd display result via specific controller `controllers/index.js`:\r\n\r\n```js\r\nexports.changeVariation = function (params, mainCallback) {\r\n    var NA = this,\r\n        variation = params.variation,\r\n        User = NA.models.User,\r\n        bruno = User();\r\n\r\n    NA.mySql.getConnection(function(err, connection) {\r\n        if (err) {\r\n            console.log(err);\r\n            return false;\r\n        }\r\n\r\n        bruno\r\n        .setConnection(connection)\r\n        .firstname(\"bruno\")\r\n        .readFirst(function () {\r\n\r\n            variation.id = bruno.id();\r\n            variation.lastname = bruno.lastname();\r\n            variation.firstname = bruno.firstname();\r\n            variation.email = bruno.email();\r\n            variation.birthdate = bruno.birthdate();\r\n            variation.gender = (bruno.gender()) ? variation.common.male : variation.common.female;\r\n            variation.country = bruno.country();\r\n            variation.town = bruno.town();\r\n            variation.zipcode = bruno.zipcode();\r\n            variation.address = bruno.address();\r\n\r\n            mainCallback(variation);\r\n        });\r\n    });\r\n};\r\n```\r\n\r\nwith the `user` model via connect file to database `models/user.js`:\r\n\r\n```js\r\n/* jslint esversion: 6 */\r\nvar user = require('../assets/javascript/models/user.js');\r\n\r\nfunction User(connection) {\r\n    var privates = {},\r\n        publics = this;\r\n\r\n    privates.connection = connection;\r\n\r\n    if (!(publics instanceof User)) {\r\n        return new User();\r\n    }\r\n\r\n    publics.setConnection = function (connection) {\r\n        privates.connection = connection;\r\n        return publics;\r\n    };\r\n\r\n    user.call(publics);\r\n\r\n    publics.readFirst = function (callback) {\r\n        var select = `SELECT\r\n                    id,\r\n                    lastname,\r\n                    firstname,\r\n                    email,\r\n                    birthdate,\r\n                    gender,\r\n                    country,\r\n                    town,\r\n                    zipcode,\r\n                    address\r\n                FROM user`, \r\n            where = \"\", \r\n            limit = \" LIMIT 0,1 \",\r\n            addWhere = \" WHERE \";\r\n\r\n        if (publics.id()) { where += addWhere + \"`id` = '\" + publics.id().replace(/'/g, \"''\") + \"'\"; addWhere = ' && '; }\r\n        if (publics.lastname()) { where += addWhere + \"`lastname` = '\" + publics.lastname().replace(/'/g, \"''\") + \"'\"; addWhere = ' && '; }\r\n        if (publics.firstname()) { where += addWhere + \"`firstname` = '\" + publics.firstname().replace(/'/g, \"''\") + \"'\"; addWhere = ' && '; }\r\n        if (publics.email()) { where += addWhere + \"`email` = '\" + publics.email().replace(/'/g, \"''\") + \"'\"; addWhere = ' && '; }\r\n        if (publics.birthdate()) { where += addWhere + \"`birthdate` = '\" + publics.birthdate().replace(/'/g, \"''\") + \"'\"; addWhere = ' && '; }\r\n        if (publics.gender()) { where += addWhere + \"`gender` = '\" + publics.gender().replace(/'/g, \"''\") + \"'\"; addWhere = ' && '; }\r\n        if (publics.country()) { where += addWhere + \"`country` = '\" + publics.country().replace(/'/g, \"''\") + \"'\"; addWhere = ' && '; }\r\n        if (publics.town()) { where += addWhere + \"`town` = '\" + publics.town().replace(/'/g, \"''\") + \"'\"; addWhere = ' && '; }\r\n        if (publics.zipcode()) { where += addWhere + \"`zipcode` = '\" + publics.zipcode().replace(/'/g, \"''\") + \"'\"; addWhere = ' && '; }\r\n        if (publics.address()) { where += addWhere + \"`address` = '\" + publics.address().replace(/'/g, \"''\") + \"'\"; addWhere = ' && '; }\r\n\r\n        privates.connection.query(select + where + limit, function(err, rows, fields) {\r\n            if (err) console.log(err);\r\n\r\n            if (rows[0]) {\r\n                publics.id(rows[0].id);\r\n                publics.lastname(rows[0].lastname);\r\n                publics.firstname(rows[0].firstname);\r\n                publics.email(rows[0].email);\r\n                publics.birthdate(rows[0].birthdate);\r\n                publics.gender((rows[0].gender) ? true : false);\r\n                publics.country(rows[0].country);\r\n                publics.town(rows[0].town);\r\n                publics.zipcode(rows[0].zipcode);\r\n                publics.address(rows[0].address);\r\n            }\r\n\r\n            callback();\r\n        });\r\n    };\r\n}\r\n\r\nUser.prototype = Object.create(user.prototype);\r\nUser.prototype.constructor = User;\r\n\r\nmodule.exports = User;\r\n```\r\n\r\nbased on `user` classe shared between Front and Back part `assets/javascript/models/user.js`:\r\n\r\n```js\r\n(function (expose, factory) {\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n        module.exports = factory;\r\n    } else {\r\n        expose.User = factory;\r\n    }\r\n}(this, function User() {\r\n    var privates = {},\r\n        publics = this;\r\n\r\n    if (!(publics instanceof User)) {\r\n        return new User();\r\n    }\r\n\r\n    publics.id = function (id) {\r\n        if (typeof id === 'undefined') {\r\n            return privates.id;\r\n        } else {\r\n            privates.id = id;\r\n            return publics;\r\n        }\r\n    };\r\n\r\n    publics.lastname = function (lastname) {\r\n        if (typeof lastname === 'undefined') {\r\n            return privates.lastname;\r\n        } else {\r\n            privates.lastname = lastname;\r\n            return publics;\r\n        }\r\n    };\r\n\r\n    publics.firstname = function (firstname) {\r\n        if (typeof firstname === 'undefined') {\r\n            return privates.firstname;\r\n        } else {\r\n            privates.firstname = firstname;\r\n            return publics;\r\n        }\r\n    };\r\n\r\n    publics.email = function (email) {\r\n        if (typeof email === 'undefined') {\r\n            return privates.email;\r\n        } else {\r\n            privates.email = email;\r\n            return publics;\r\n        }\r\n    };\r\n\r\n    publics.birthdate = function (birthdate) {\r\n        if (typeof birthdate === 'undefined') {\r\n            return privates.birthdate;\r\n        } else {\r\n            privates.birthdate = birthdate;\r\n            return publics;\r\n        }\r\n    };\r\n\r\n    publics.gender = function (gender) {\r\n        if (typeof gender === 'undefined') {\r\n            return privates.gender;\r\n        } else {\r\n            privates.gender = gender;\r\n            return publics;\r\n        }\r\n    };\r\n    \r\n    publics.country = function (country) {\r\n        if (typeof country === 'undefined') {\r\n            return privates.country;\r\n        } else {\r\n            privates.country = country;\r\n            return publics;\r\n        }\r\n    };\r\n\r\n    publics.town = function (town) {\r\n        if (typeof town === 'undefined') {\r\n            return privates.town;\r\n        } else {\r\n            privates.town = town;\r\n            return publics;\r\n        }\r\n    };\r\n\r\n    publics.zipcode = function (zipcode) {\r\n        if (typeof zipcode === 'undefined') {\r\n            return privates.zipcode;\r\n        } else {\r\n            privates.zipcode = zipcode;\r\n            return publics;\r\n        }\r\n    };\r\n\r\n    publics.address = function (address) {\r\n        if (typeof address === 'undefined') {\r\n            return privates.address;\r\n        } else {\r\n            privates.address = address;\r\n            return publics;\r\n        }\r\n    };\r\n}));\r\n```\r\n\r\nYou will get the following output:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>MySql Example</title>\r\n    </head>\r\n    <body>\r\n        <div class=\"title\">MySql Example</div>\r\n        <div>\r\n            <h1>User Table</h1>\r\n            <p>`bruno` entry details.</p>\r\n            <ul>\r\n                <li>Id: <strong>1</strong></li>\r\n                <li>Lastname: <strong>Lesieur</strong></li>\r\n                <li>Firstname: <strong>Bruno</strong></li>\r\n                <li>Email: <strong>bruno.lesieur@gmail.com</strong></li>\r\n                <li>Birthdate: <strong>Mon Jul 18 1988 00:00:00 GMT+0200 (Paris, Madrid (heure d’été))</strong></li>\r\n                <li>Gender: <strong>Homme</strong></li>\r\n                <li>Country: <strong>France</strong></li>\r\n                <li>Town: <strong>Annecy</strong></li>\r\n                <li>Zipcode: <strong>74000</strong></li>\r\n                <li>Address: <strong>66 avenue de Genève</strong></li>\r\n            </ul>\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n\r\n\r\n\r\n### Use MongoDB Database (NoSQL) ###\r\n\r\nWe will see now how to use data from nosql database. We will use the `mongoose` npm module. And first, [install a MongoDB server](https://www.mongodb.com/).\r\n\r\n#### MongoDB Database ####\r\n\r\nFirst, we will create a database `demo` on the server and select it:\r\n\r\n```\r\nuse demo\r\n```\r\n\r\nand create a `user` collection:\r\n\r\n```\r\ndb.createCollection(\"user\")\r\n```\r\n\r\nand fill it with this document:\r\n\r\n```\r\ndb.user.insert({\r\n    email: \"bruno.lesieur@gmail.com\",\r\n    identity: {\r\n        lastname: \"Lesieur\",\r\n        firstname: \"Bruno\",\r\n        gender: true,\r\n        birthdate : new Date(\"1988/07/18\")\r\n    },\r\n    location: {\r\n        country: \"France\",\r\n        town: \"Annecy\",\r\n        zipcode: \"74000\",\r\n        address: \"66 avenue de Genève\"\r\n    }\r\n})\r\n```\r\n\r\n#### NodeAtlas Files ####\r\n\r\nWith the following data set:\r\n\r\n```\r\nassets/\r\n— javascript/\r\n—— models/\r\n——— user.js\r\ncontrollers/\r\n— common.js\r\n— index.js\r\ntemplates/\r\n— index.htm\r\nvariations/\r\n— common.json\r\n— index.json\r\nwebconfig.json\r\n```\r\n\r\nWe will use the following `webconfig.json` with the custom `_mongodbConfig` variable which contain all informations for database connection:\r\n\r\n```\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"commonVariation\": \"common.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\",\r\n            \"controller\": \"index.js\"\r\n        }\r\n    },\r\n    \"_mongodbConfig\": {\r\n        \"host\": \"localhost\",\r\n        \"port\": \"27017\",\r\n        \"database\": \"demo\"\r\n    }\r\n}\r\n```\r\n\r\nWith following files to display page:\r\n\r\n**templates/index.htm**\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"<%- languageCode %>\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><%- common.titleWebsite %></title>\r\n    </head>\r\n    <body>\r\n        <div class=\"title\"><%- common.titleWebsite %></div>\r\n        <div>\r\n            <h1><%- specific.titlePage %></h1>\r\n            <%- specific.content %>\r\n            <ul>\r\n                <li>Id: <strong><%- id %></strong></li>\r\n                <li>Lastname: <strong><%- lastname %></strong></li>\r\n                <li>Firstname: <strong><%- firstname %></strong></li>\r\n                <li>Email: <strong><%- email %></strong></li>\r\n                <li>Birthdate: <strong><%- birthdate %></strong></li>\r\n                <li>Gender: <strong><%- gender %></strong></li>\r\n                <li>Country: <strong><%- country %></strong></li>\r\n                <li>Town: <strong><%- town %></strong></li>\r\n                <li>Zipcode: <strong><%- zipcode %></strong></li>\r\n                <li>Address: <strong><%- address %></strong></li>\r\n            </ul>\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n\r\n**variations/common.json**\r\n\r\n```js\r\n{\r\n    \"titleWebsite\": \"Example MongoDB\",\r\n    \"male\": \"Man\",\r\n    \"female\": \"Woman\"\r\n}\r\n```\r\n\r\n**variations/index.json**\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"User Collection\",\r\n    \"content\": \"<p>Document `{ \\\"identity.firstname\\\": \\\"Bruno\\\" }` details.</p>\"\r\n}\r\n```\r\n\r\nAnd last, we will be connect to the database with the common controller `controllers/common.js`:\r\n\r\n```js\r\nexports.loadModules = function () {\r\n    var NA = this,\r\n        path = NA.modules.path;\r\n\r\n    NA.modules.mongoose = require('mongoose');\r\n    NA.models = {};\r\n    NA.models.User = require('../assets/javascript/models/user.js');\r\n};\r\n\r\nexports.setConfigurations = function (next) {\r\n    var NA = this,\r\n        mongoose = NA.modules.mongoose,\r\n        config = NA.webconfig._mongodbConfig;\r\n\r\n    mongoose.Promise = global.Promise;\r\n    mongoose.model(\"user\", NA.models.User, \"user\");\r\n    mongoose.connect(\"mongodb://\" + config.host + \":\" + config.port + \"/\" + config.database, function (error) {\r\n        next();\r\n    });\r\n};\r\n```\r\n\r\nAnd display result via specific controller `controllers/index.js`:\r\n\r\n```js\r\nexports.changeVariation = function (params, mainCallback) {\r\n    var NA = this,\r\n        variation = params.variation,\r\n        mongoose = NA.modules.mongoose,\r\n        User = mongoose.model('user');\r\n\r\n    User\r\n    .findOne({ \"identity.firstname\": \"Bruno\" })\r\n    .exec(function (err, bruno) {\r\n\r\n        variation.id = bruno._id;\r\n        variation.lastname = bruno.identity.lastname;\r\n        variation.firstname = bruno.identity.firstname;\r\n        variation.birthdate = bruno.identity.birthdate;\r\n        variation.email = bruno.email;\r\n        variation.gender = (bruno.identity.gender) ? variation.common.male : variation.common.female;\r\n        variation.country = bruno.location.country;\r\n        variation.town = bruno.location.town;\r\n        variation.zipcode = bruno.location.zipcode;\r\n        variation.address = bruno.location.address;\r\n\r\n        mainCallback(variation);\r\n    });\r\n};\r\n```\r\n\r\nbased on `user` classe shared between Front and Back part `assets/javascript/models/user.js`:\r\n\r\n```js\r\nvar mongoose;\r\nif (typeof module !== 'undefined' && module.exports) {\r\n     mongoose = require('mongoose');\r\n}\r\n\r\n(function (expose, factory) {\r\n    if (mongoose) {\r\n        module.exports = factory;\r\n    } else {\r\n        expose.User = factory;\r\n    }\r\n}(this, new mongoose.Schema({\r\n    _id: mongoose.Schema.Types.ObjectId,\r\n    email: { type : String, match: /^\\S+@\\S+$/ },\r\n    identity: {\r\n        lastname: String,\r\n        firstname: String,\r\n        gender: Boolean,\r\n        birthdate : { type : Date, default : Date.now }\r\n    },\r\n    location: {\r\n        country: String,\r\n        town: String,\r\n        zipcode: String,\r\n        address: String\r\n    }\r\n})));\r\n```\r\n\r\nYou will get the following output:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>MongoDB Example</title>\r\n    </head>\r\n    <body>\r\n        <div class=\"title\">MongoDB Example</div>\r\n        <div>\r\n            <h1>User Collection</h1>\r\n            <p>Collection `{ \"identity.firstname\": \"Bruno\" }` details.</p>\r\n            <ul>\r\n                <li>Id: <strong>1</strong></li>\r\n                <li>Lastname: <strong>Lesieur</strong></li>\r\n                <li>Firstname: <strong>Bruno</strong></li>\r\n                <li>Email: <strong>bruno.lesieur@gmail.com</strong></li>\r\n                <li>Birthdate: <strong>Mon Jul 18 1988 00:00:00 GMT+0200 (Paris, Madrid (heure d’été))</strong></li>\r\n                <li>Gender: <strong>Homme</strong></li>\r\n                <li>Country: <strong>France</strong></li>\r\n                <li>Town: <strong>Annecy</strong></li>\r\n                <li>Zipcode: <strong>74000</strong></li>\r\n                <li>Address: <strong>66 avenue de Genève</strong></li>\r\n            </ul>\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## More Features ##\r\n\r\n### Manage routing (URL Rewriting) ###\r\n\r\nAlthough you can configure static urls, you can also set of dynamic url!\r\n\r\n#### Standard ###\r\n\r\nWith the following configuration:\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/list-of-members/:member/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/list-of-members/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nyou can access:\r\n\r\n- *http://localhost/*\r\n- *http://localhost/list-of-members/*\r\n- *http://localhost/list-of-members/toto/*\r\n- *http://localhost/list-of-members/bob-eponge99/*\r\n- *http://localhost/list-of-members/node-atlas/*\r\n- *http://localhost/list-of-members/etc/*\r\n\r\nand retrieve the `:member` value in` changeVariation` (common and specific).\r\n\r\n```js\r\nexports.changeVariation = function (params, next) {\r\n    var variation = params.variation;\r\n\r\n    console.log(variation.params.member);\r\n    // \\> 'toto', 'bob-eponge99', 'node-atlas' or 'etc'.\r\n\r\n    next(variation);\r\n}\r\n```\r\n\r\nDynamic url creation rules are those of [Express.js](http://expressjs.com/4x/api.html#req.params).\r\n\r\n#### Regular Expressions ###\r\n\r\nYou can also enable regular expressions to a specific path with `regExp`. If it is `true`, the previous profile no longer works and you pass in Regular Expression mode. If `regExp` is a string, it acts as a flag (g, i, m or y).\r\n\r\nSee the following configuration:\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/list-of-members/([-a-z0-9]+)/?\": {\r\n            \"template\": \"members.htm\",\r\n            \"regExp\": \"g\"\r\n        },\r\n        \"/list-of-members/?\": {\r\n            \"template\": \"members.htm\",\r\n            \"regExp\": true\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nyou can access:\r\n\r\n- *http://localhost/*\r\n- *http://localhost/list-of-members/* _(ou *https://localhost/list-of-members*)_\r\n- *http://localhost/list-of-members/toto/* _(ou *https://localhost/list-of-members/toto*)_\r\n- *http://localhost/list-of-members/bob-eponge99/* _(ou *https://localhost/list-of-members/bob-eponge99*)_\r\n- *http://localhost/list-of-members/node-atlas/* _(ou *https://localhost/list-of-members/node-atlas*)_\r\n- *http://localhost/list-of-members/etc/* _(ou *https://localhost/list-of-members/etc*)_\r\n\r\nand retrieve the `([-a-z0-9] +) value in the` `changeVariation` (common and specific).\r\n\r\n```js\r\nexports.changeVariation = function (params, next) {\r\n    var variation = params.variation;\r\n\r\n    if (variation.params && variation.params[0]) { variation.params.member = variation.params[0]; }\r\n    // variation.params[1] for second match, etc...\r\n\r\n    console.log(variation.params.member);\r\n    // \\> 'toto', 'bob-eponge99', 'node-atlas' or 'etc'.\r\n\r\n    next(variation);\r\n}\r\n```\r\n\r\nThe rules for creating dynamic url with `regExp` are those of [RegExpJavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\r\n\r\n#### Routing in a shared file ####\r\n\r\nIn order to not rewrite a long route list in `webconfig.json` file to your development environment and` webconfig.prod.json` to your production environment, you can group route in a file of your choice. By convention, the name is `routes.json` file.\r\n\r\nFor example:\r\n\r\nThe following set of file\r\n\r\n```\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\nwith `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand with `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ncould be the following set of file\r\n\r\n```\r\ntemplates/\r\n— index.htm\r\nroutes.json\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\nwith `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"routes\": \"routes.json\"\r\n}\r\n```\r\n\r\nwith `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"routes\": \"routes.json\"\r\n}\r\n```\r\n\r\nand `routes.json`\r\n\r\n```json\r\n{\r\n    \"/\": {\r\n        \"template\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\n*Note : You can create multiple route file as `routes.en.json` and `routes.fr.json` and associate each of them in a set of webconfig parameterize to run a website in various languages.*\r\n\r\n\r\n\r\n### Manage a page not found ###\r\n\r\n#### Listen all urls, and also file provide by `assetsRelativePath` ####\r\n\r\nTo display a custom page when a resource is not found you must:\r\n\r\n1. Prepare a 404 page.\r\n2. Fill the parameter with `pageNotFound` with the following `value` : `key` of the prepared 404 page.\r\n\r\nSee the example below:\r\n\r\n```js\r\n{\r\n    \"pageNotFound\": \"/not-found-page/\",\r\n    \"routes\": {\r\n        \"/list-of-members/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/not-found-page/\": {\r\n            \"template\": \"error.htm\",\r\n            \"statusCode\": 404\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nyou can access to:\r\n\r\n- *http://localhost/this-page-do-not-exist.html*\r\n- *http://localhost/this/page/either/*\r\n- *http://localhost/etc*\r\n\r\n#### Multilingual Error Page ####\r\n\r\nFor this, just create a new route with `*` at the end with the languageCode.\r\n\r\nSee below :\r\n\r\n```js\r\n{\r\n    \"pageNotFound\": \"/not-found-page/\",\r\n    \"languageCode\": \"en-gb\",\r\n    \"routes\": {\r\n        \"/list-of-members/\": {\r\n            \"template\": \"members.htm\",\r\n            \"variation\": \"members.json\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/not-found-page/\": {\r\n            \"template\": \"error.htm\",\r\n            \"variation\": \"error.json\",\r\n            \"statusCode\": 404\r\n        },\r\n        \"/francais/liste-des-membres/\": {\r\n            \"template\": \"members.htm\",\r\n            \"languageCode\": \"fr-fr\",\r\n            \"variation\": \"members.json\"\r\n        },\r\n        \"/francais/\": {\r\n            \"template\": \"index.htm\",\r\n            \"languageCode\": \"fr-fr\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/francais/*\": {\r\n            \"template\": \"error.htm\",\r\n            \"languageCode\": \"fr-fr\",\r\n            \"variation\": \"error.json\",\r\n            \"statusCode\": 404\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Manage redirects ###\r\n\r\nTo go to a different address (redirect 301 or 302) when you get to a url you must use the `redirect` parameter.\r\n\r\n*Note : if you don't set `statusCode`, no redirect will be executed. The `statusCode` is mandatory for redirection.*\r\n\r\n#### Static ####\r\n\r\nSee the example below:\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/list-of-members/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/list-of-members\": {\r\n            \"redirect\": \"/list-of-members/\",\r\n            \"statusCode\": 301\r\n        },\r\n        \"/go-to-node-atlas/\": {\r\n            \"redirect\": \"http://haeresis.github.io/NodeAtlas/\",\r\n            \"statusCode\": 302\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nYou will be redirected:\r\n\r\n- to `http://localhost/list-of-members/` when you access `http://localhost/list-of-members` with a header _permanent redirect_.\r\n- to `http://haeresis.github.io/NodeAtlas/` when you access `http://localhost/go-to-node-atlas/` with a header _temporary redirect_.\r\n\r\n#### Dynamic ####\r\n\r\nSee the example below:\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/list-of-members/:member/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/list-of-members/:member\": {\r\n            \"redirect\": \"/membres/:member/\",\r\n            \"statusCode\": 301\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nYou will be redirected to `http://localhost/list-of-members/haeresis/` when you access to `http://localhost/list-of-members/haeresis` with a header _permanent redirect_.\r\n\r\n#### With regular expressions ####\r\n\r\nSee the example below:\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/membres/([-a-z0-9]+)/\": {\r\n            \"template\": \"members.htm\",\r\n            \"regExp\": true\r\n        },\r\n        \"/list-of-members/([-a-z0-9]+)/\": {\r\n            \"redirect\": \"/membres/$0/\",\r\n            \"statusCode\": 301,\r\n            \"regExp\": true\r\n        },\r\n        \"/list-of-members/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nYou will be redirected to `http://localhost/list-of-members/haeresis/` when you access to `http://localhost/list-of-members/haeresis` with a header _permanent redirect_.\r\n\r\nFor the second *match* use $1, the third $2, etc.\r\n\r\n\r\n\r\n### Manage Headers ###\r\n\r\nBy défault, sent Headers by NodeAtlas are followings: `Content-Type:text/html; charset=utf-8` with a 200 `statusCode`.\r\n\r\nIt's possible to modify this values for a specific route (for local API for example).\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/api/articles\": {\r\n            \"template\": \"display-json.htm\",\r\n            \"controller\": \"blog/list-of-articles.js\",\r\n            \"mimeType\": \"application/json\"\r\n            \"charset\": \"ISO-8859-1\",\r\n            \"statusCode\": 203\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIt's also possible to modify all Headers values, this erase all shortcuts before, except the `statusCode`.\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/api/articles\": {\r\n            \"template\": \"display-json.htm\",\r\n            \"controller\": \"blog/list-of-articles.js\",\r\n            \"statusCode\": 203,\r\n            \"headers\": {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Run Website with HTTPs ###\r\n\r\nIt is very simple to run an instance of NodeAtlas with HTTPs protocol. You just have to create such a `security` folder in which to place your `server.key` and `server.crt` file to supply the protocol.\r\n\r\nJust use the following configuration:\r\n\r\n```js\r\n{\r\n    \"httpSecure\": true,\r\n    \"httpSecureRelativeKeyPath\": \"security/server.key\",\r\n    \"httpSecureRelativeCertificatePath\": \"security/server.crt\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAlternatively , if your two Key and Certificate files have the same name, use this configuration:\r\n\r\n```js\r\n{\r\n    \"httpSecure\": \"security/server\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis is also possible to just set the `httpSecure` value to `true` for get a \"https\" like `urlBasePath` or `urlBase` in your paths variables. And you will validate certificate by your own other way.\r\n\r\n```js\r\n{\r\n    \"httpSecure\": true,\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : in production, if you use a proxy for redirect request/response, don't forget use `urlPort: 443` instead of `urlPort: 80` for HTTPs.*\r\n\r\n\r\n\r\n### Minify CSS / JS ###\r\n\r\nYou can automatically generate CSS and JS files minified and obfuscated by creating Bundles by referencing the file by input and output path. Of course you can do as much as you want. The gereration files is execute every time you start NodeAtlas either as a server or via the `--generate` command if a Bundle exists in the Webconfig.\r\n\r\n#### Creating Bundles ####\r\n\r\nWith the following configuration:\r\n\r\n```js\r\n{\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        },\r\n        \"stylesheets\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand the following set of file:\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n— javascript/\r\n—— modernizr.js\r\n—— yepnot.js\r\n—— html5Shiv.js\r\n—— jquery.js\r\n—— jquery-ui.js\r\n—— prettify.js\r\n—— prettify/run_prettify.js\r\n—— components/extended-format-date.js\r\n—— common.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nyou will get the following new files:\r\n\r\n```\r\nassets/\r\n— stylesheets\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n—— common.min.css               <= new file\r\n— javascript\r\n—— modernizr.js\r\n—— yepnot.js\r\n—— html5Shiv.js\r\n—— jquery.js\r\n—— jquery-ui.js\r\n—— prettify.js\r\n—— prettify/run_prettify.js\r\n—— components/extended-format-date.js\r\n—— common.js\r\n—— javascript/boot.min.js       <= new file\r\n—— javascript/framework.min.js  <= new file\r\n—— javascript/common.min.js     <= new file\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\n#### Bundles in a shared file ####\r\n\r\nIn order to not re-write a long Bundles configuration list in `webconfig.json` file to your development environment and` webconfig.prod.json` to your production environment, you can group routes in a file of your choice. By convention, the name is `bundles.json` file.\r\n\r\nFor example:\r\n\r\nThe following set of file\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n— javascript/\r\n—— modernizr.js\r\n—— yepnot.js\r\n—— html5Shiv.js\r\n—— jquery.js\r\n—— jquery-ui.js\r\n—— prettify.js\r\n—— prettify/run_prettify.js\r\n—— components/extended-format-date.js\r\n—— common.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\nwith `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        },\r\n        \"stylesheets\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand with `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        },\r\n        \"stylesheets\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ncould be the following set of file\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n— javascript/\r\n—— modernizr.js\r\n—— yepnot.js\r\n—— html5Shiv.js\r\n—— jquery.js\r\n—— jquery-ui.js\r\n—— prettify.js\r\n—— prettify/run_prettify.js\r\n—— components/extended-format-date.js\r\n—— common.js\r\ntemplates/\r\n— index.htm\r\nbundles.json\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\nwith `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"bundles\": \"bundles.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"bundles\": \"bundles.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand `bundles.json`\r\n\r\n```json\r\n{\r\n    \"javascript\": {\r\n        \"javascript/boot.min.js\": [\r\n            \"javascript/modernizr.js\",\r\n            \"javascript/yepnot.js\",\r\n            \"javascript/html5Shiv.js\"\r\n        ],\r\n        \"javascript/framework.min.js\": [\r\n            \"javascript/jquery.js\",\r\n            \"javascript/jquery-ui.js\",\r\n            \"javascript/prettify.js\",\r\n            \"javascript/prettify/run_prettify.js\"\r\n        ],\r\n        \"javascript/common.min.js\": [\r\n            \"javascript/components/extended-format-date.js\",\r\n            \"javascript/common.js\"\r\n        ]\r\n    },\r\n    \"stylesheets\": {\r\n        \"stylesheets/common.min.css\": [\r\n            \"stylesheets/common.css\",\r\n            \"stylesheets/common-min780.css\",\r\n            \"stylesheets/common-min1160.css\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n*Note : it is possible to disable Bundles by not including them in the `webconfig`.*\r\n\r\n#### Disable Bundles ####\r\n\r\nIt is also possible to not execute the minification when run a website with NodeAtlas with `\"stylesheetsBundlesEnable\": false` et `\"javascriptBundlesEnable\": false`` for each type of Bundle.\r\n\r\n```js\r\n{\r\n    \"stylesheetsBundlesEnable\": false,\r\n    \"javascriptBundlesEnable\": false,\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        },\r\n        \"stylesheets\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : if your bundle is in shared file, you could desactivated it also without the `\"bundles\": \"bundles.json\"`. Just remove it.*\r\n\r\n#### Re-generate Bundles before each Page Response ####\r\n\r\nFor test your page with minified files, you can ask it to be regenerated before each page response with `\"stylesheetsBundlesBeforeResponse\": false` et `\"javascriptBundlesBeforeResponse\": false`` for each type of Bundle.\r\n\r\n```js\r\n{\r\n    \"stylesheetsBundlesBeforeResponse\": false,\r\n    \"javascriptBundlesBeforeResponse\": false,\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        },\r\n        \"stylesheets\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : this is not recommanded for production environment because it's slowed responses pages.*\r\n\r\n\r\n\r\n### CSS generation with Less ###\r\n\r\nYou can use the preprocessor Less to create your CSS. The operation is as follows: whenever a CSS request is made, if a Less equivalent exists it is read and it generates the CSS. Once done, the new CSS is responded.\r\n\r\nWith the following structure:\r\n\r\n```\r\nassets/\r\n— stylesheets\r\n—— common.less\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nand the following webconfig:\r\n\r\n```js\r\n{\r\n    \"enableLess\": true,\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\nand the following content in:\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Less Test</title>\r\n        <link rel=\"stylesheet\" href=\"stylesheets/common.css\">\r\n    </head>\r\n    <body>\r\n        <p>This line is red.</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*assets/stylesheets/common.less*\r\n\r\n```css\r\np {\r\n    color: #f00;\r\n}\r\n```\r\n\r\nyou will build the `assets/stylesheets/common.css` by calling the url `http://localhost/` or `http://localhost/stylesheets/common.css`.\r\n\r\n#### Source Map and Minification ####\r\n\r\nBy default, in the above example, a `common.css.map` file will be generated. This allows your browser to indicated you that line in `.less`  file has generated the CSS property of the item you have selected in your debugger.\r\n\r\nDisable this with `enableLess.sourceMap` to `false`:\r\n\r\n```\r\n    \"enableLess\": {\r\n        \"sourceMap\": false\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n```\r\n\r\nYou can also generate CSS files already minify with:\r\n\r\n```\r\n    \"enableLess\": {\r\n        \"compress\": true\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n```\r\n\r\n#### Compile Less files with `--generate` ####\r\n\r\nBecause of Less are compilated on the fly, when a file is requested in http(s), modification needed running website for generate CSS output. Then you can use CSS. It's possible to skip running step and directly complated Less before minify CSS with `enableLess.less`.\r\n\r\nWith the following `webconfig.json`:\r\n\r\n```js\r\n{\r\n    \"enableLess\": {\r\n        \"less\": [\r\n            \"stylesheets/common.less\",\r\n            \"stylesheets/component-1.less\",\r\n            \"stylesheets/component-2.less\",\r\n            \"stylesheets/component-3.less\"\r\n        ]\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\nor with the following `webconfig.json`:\r\n\r\n```js\r\n{\r\n    \"enableLess\": {\r\n        \"less\": \"less.json\"\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\nwith `less.json` containing :\r\n\r\n```js\r\n[\r\n    \"stylesheets/common.less\",\r\n    \"stylesheets/component-1.less\",\r\n    \"stylesheets/component-2.less\",\r\n    \"stylesheets/component-3.less\"\r\n]\r\n```\r\n\r\nThe `@import` used by Less will be capable to walk into subdirectories : `styles`, `stylesheets` or `css`. It's possible to change that with :\r\n\r\n```js\r\n{\r\n    \"enableLess\": {\r\n        \"paths\": [\r\n            \"subdirectory/styles-files\",\r\n        ],\r\n        \"less\": \"less.json\"\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### CSS generation with Stylus ###\r\n\r\nYou can use the preprocessor Stylus to create your CSS. The operation is as follows: whenever a CSS request is made, if a Stylus equivalent exists it is read and it generates the CSS. Once done, the new CSS is responded.\r\n\r\nWith the following structure:\r\n\r\n```\r\nassets/\r\n— stylesheets\r\n—— common.styl\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nand the following webconfig:\r\n\r\n```js\r\n{\r\n    \"enableStylus\": true,\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\nand the following content in:\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Stylus Test</title>\r\n        <link rel=\"stylesheet\" href=\"stylesheets/common.css\">\r\n    </head>\r\n    <body>\r\n        <p>This line is red.</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*assets/stylesheets/common.styl*\r\n\r\n```css\r\np\r\n    color: #f00\r\n```\r\n\r\nyou will build the `assets/stylesheets/common.css` by calling the url `http://localhost/` or `http://localhost/stylesheets/common.css`.\r\n\r\n#### Source Map and Minification ####\r\n\r\nBy default, in the above example, a `common.css.map` file will be generated. This allows your browser to indicated you that line in `.styl`  file has generated the CSS property of the item you have selected in your debugger.\r\n\r\nDisable this with `enableLess.sourceMap` to `false`:\r\n\r\n```\r\n    \"enableStylus\": {\r\n        \"sourceMap\": false\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n```\r\n\r\nYou can also generate CSS files already minify with:\r\n\r\n```\r\n    \"enableStylus\": {\r\n        \"compress\": true\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n```\r\n\r\n*Note:* More options on [stylus documentation for module](https://www.npmjs.com/package/stylus).\r\n\r\n#### Compile Stylus files with `--generate` ####\r\n\r\nBecause of Stylus are compilated on the fly, when a file is requested in http(s), modification needed running website for generate CSS output. Then you can use CSS. It's possible to skip running step and directly complated Stylus before minify CSS with `enableLess.stylus`.\r\n\r\nWith the following `webconfig.json`:\r\n\r\n```js\r\n{\r\n    \"enableLess\": {\r\n        \"stylus\": [\r\n            \"stylesheets/common.styl\",\r\n            \"stylesheets/component-1.styl\",\r\n            \"stylesheets/component-2.styl\",\r\n            \"stylesheets/component-3.styl\"\r\n        ]\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\nor with the following `webconfig.json`:\r\n\r\n```js\r\n{\r\n    \"enableLess\": {\r\n        \"stylus\": \"stylus.json\"\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\nwith `stylus.json` containing :\r\n\r\n```js\r\n[\r\n    \"stylesheets/common.styl\",\r\n    \"stylesheets/component-1.styl\",\r\n    \"stylesheets/component-2.styl\",\r\n    \"stylesheets/component-3.styl\"\r\n]\r\n```\r\n\r\nThe `@import` used by Less will be capable to walk into subdirectories : `styles`, `stylesheets` or `css`. It's possible to change that with :\r\n\r\n```js\r\n{\r\n    \"enableLess\": {\r\n        \"paths\": [\r\n            \"subdirectory/styles-files\",\r\n        ],\r\n        \"stylus\": \"stylus.json\"\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Optimize Images files ###\r\n\r\nYou can automatically generate optimized images files by creating Optimizations by referencing the file by input and output path. Of course you can do as much as you want. The optimization files is execute every time you start NodeAtlas either as a server or via the `--generate` command if an Optimization exists in the Webconfig.\r\n\r\n#### Creating Optimizations ####\r\n\r\nWith the following configuration:\r\n\r\n```js\r\n{\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/example.png\": \"media/images/optimized/\",\r\n            \"media/images/example.jpg\": \"media/images/optimized/\",\r\n            \"media/images/example.gif\": \"media/images/optimized/\",\r\n            \"media/images/example.svg\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand the following set of file:\r\n\r\n```\r\nassets/\r\n— media/\r\n—— images/\r\n——— example.png\r\n——— example.jpg\r\n——— example.gif\r\n——— example.svg\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nyou will get the following new files:\r\n\r\n```\r\nassets/\r\n— media/\r\n—— images/\r\n——— example.png\r\n——— example.jpg\r\n——— example.gif\r\n——— example.svg\r\n——— optimized/      <= new folder\r\n———— example.png    <= new file\r\n———— example.jpg    <= new file\r\n———— example.gif    <= new file\r\n———— example.svg    <= new file\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\n#### Create Optimizations by group of file ####\r\n\r\nFor example, not define file one by one, but in group:\r\n\r\n```js\r\n{\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/*.{gif,jpg,png,svg}\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### Add more options to Optimizations ####\r\n\r\nIt is possible to redefine default options used for optimizations via this 4 objects:\r\n\r\n```js\r\n{\r\n    \"optimizations\": {\r\n        \"jpg\": { \"progressive\": false },\r\n        \"gif\": { \"interlaced\": false },\r\n        \"png\": { \"optimizationLevel\": 1 },\r\n        \"svg\": { \"multipass\": false },\r\n        \"images\": {\r\n            \"media/images/*.{gif,jpg,png,svg}\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTo know all options it is here:\r\n- [Jpeg Options](https://www.npmjs.com/package/imagemin-jpegtran)\r\n- [Gif Options](https://www.npmjs.com/package/imagemin-gifsicle)\r\n- [Png Options](https://www.npmjs.com/package/imagemin-optipng)\r\n- [Svg Options](https://www.npmjs.com/package/imagemin-svgo)\r\n\r\n#### Optimizations in a shared file ####\r\n\r\nIn order to not re-write a long Bundles configuration list in `webconfig.json` file to your development environment and` webconfig.prod.json` to your production environment, you can group files in a file of your choice. By convention, the name is `optimizations.json` file.\r\n\r\nFor example:\r\n\r\nThe following set of file\r\n\r\n```\r\nassets/\r\n— media/\r\n—— images/\r\n——— example.png\r\n——— example.jpg\r\n——— example.gif\r\n——— example.svg\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\nwith `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/example.png\": \"media/images/optimized/\",\r\n            \"media/images/example.jpg\": \"media/images/optimized/\",\r\n            \"media/images/example.gif\": \"media/images/optimized/\",\r\n            \"media/images/example.svg\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand with `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/example.png\": \"media/images/optimized/\",\r\n            \"media/images/example.jpg\": \"media/images/optimized/\",\r\n            \"media/images/example.gif\": \"media/images/optimized/\",\r\n            \"media/images/example.svg\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ncould be the following set of file\r\n\r\n```\r\nassets/\r\n— media/\r\n—— images/\r\n——— example.png\r\n——— example.jpg\r\n——— example.gif\r\n——— example.svg\r\ntemplates/\r\n— index.htm\r\nbundles.json\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\nwith `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"optimizations\": \"optimizations.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"optimizations\": \"optimizations.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand `optimizations.json`\r\n\r\n```json\r\n{\r\n    \"images\": {\r\n        \"media/images/example.png\": \"media/images/optimized/\",\r\n        \"media/images/example.jpg\": \"media/images/optimized/\",\r\n        \"media/images/example.gif\": \"media/images/optimized/\",\r\n        \"media/images/example.svg\": \"media/images/optimized/\"\r\n    }\r\n}\r\n```\r\n\r\n*Note : it is possible to disable Optimizations by not including them in the `webconfig`.*\r\n\r\n#### Disable Optimizations ####\r\n\r\nIt is also possible to not execute the optimization when run a website with NodeAtlas with `\"imagesOptimizationsEnable\": false`.\r\n\r\n```js\r\n{\r\n    \"imagesOptimizationsEnable\": false,\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/example.png\": \"media/images/optimized/\",\r\n            \"media/images/example.jpg\": \"media/images/optimized/\",\r\n            \"media/images/example.gif\": \"media/images/optimized/\",\r\n            \"media/images/example.svg\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : if your optimizations is in shared file, you could desactivated it also without the `\"optimizations\": \"optimizations.json\"`. Just remove it.*\r\n\r\n#### Re-generate Optimizations before each Page Response ####\r\n\r\nYou can ask files to be regenerated before each page response with `\"stylesheetsBundlesBeforeResponse\": false` et `\"javascriptBundlesBeforeResponse\": false`` for each type of Bundle.\r\n\r\n```js\r\n{\r\n    \"imagesOptimizationsBeforeResponse\": false,\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/example.png\": \"media/images/optimized/\",\r\n            \"media/images/example.jpg\": \"media/images/optimized/\",\r\n            \"media/images/example.gif\": \"media/images/optimized/\",\r\n            \"media/images/example.svg\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : this is not recommanded for production environment because it's slowed responses pages.*\r\n\r\n\r\n\r\n### CSS Inline Injection for Manage Email Assets ###\r\n\r\nWhen you create templates for sending email newsletters, or even simple message, you can not attach stylesheet. The only way is to write the CSS instructions in the template within the `style` markup attribute.\r\n\r\n#### Specific Injection ####\r\n\r\nWith `injectCss`, simply design your template as usual via a stylesheet and NodeAtlas inject each rendering styles in the attribute `style`. It will do more than generate templates.\r\n\r\nWith for example the following configuration:\r\n\r\n```json\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"email.htm\",\r\n            \"generate\": \"welcome.html\",\r\n            \"injectCss\": \"stylesheets/email.css\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand the following set of files:\r\n\r\n```\r\ngenerates/\r\nassets/\r\n— stylesheets/\r\n—— email.css\r\ntemplates/\r\n— email.htm\r\n```\r\n\r\nwhose contents are :\r\n\r\n**stylesheets/common.css**\r\n\r\n```css\r\nbody {\r\n    color: #f00;\r\n}\r\n```\r\n\r\n**templates/email.htm***\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Email</title>\r\n    </head>\r\n    <body>\r\n        <p>This is a template email.</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\noutput will be, with the command `node </path/to/>node-atlas/ --generate`, all following file:\r\n\r\n```\r\ngenerates/\r\n— welcome.html    <= template email generate !\r\nassets/\r\n— stylesheets/\r\n—— email.css\r\ntemplates/\r\n— email.htm\r\n```\r\n\r\nwith as content for `generates/welcome.html`\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Email</title>\r\n    </head>\r\n    <body style=\"color: #f00;\">\r\n        <p>This is a template email.</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\nThis mechanism also works if you do not intend to generate anything but a site that is running. Convenient to change your live models before generating.\r\n\r\n> Test : From `./tests/examples/css-injection` run `node \"../../../\" --generate`. Result are into `generates`.\r\n\r\n#### Global Injection ####\r\n\r\nIt is possible to use `injectCss` as global mechanism for all pages.\r\n\r\n```json\r\n{\r\n    \"injectCss\": \"stylesheets/email.css\",\r\n    \"routes\": {\r\n        \"/welcome/\": {\r\n            \"template\": \"email-a.htm\",\r\n            \"generate\": \"welcome.html\"\r\n        },\r\n        \"/good-bye/\": {\r\n            \"template\": \"email-b.htm\",\r\n            \"generate\": \"good-bye.html\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nainsi les deux pages `welcome` et `good-bye` contiendront chacune `<body style=\"color: #f00;\">`.\r\n\r\n#### Multiple Injection ####\r\n\r\nIt's possible to :\r\n- Attach global and specific files in same time.\r\n- Attach more one CSS file by `injectCss` property.\r\n\r\n```json\r\n{\r\n    \"injectCss\": [\"stylesheets/reset.css\", \"stylesheets/email.css\"],\r\n    \"routes\": {\r\n        \"/welcome/\": {\r\n            \"template\": \"email-a.htm\",\r\n            \"generate\": \"welcome.html\",\r\n            \"injectCss\": \"/stylesheets/welcome.css\"\r\n        },\r\n        \"/good-bye/\": {\r\n            \"template\": \"email-b.htm\",\r\n            \"generate\": \"good-bye.html\",\r\n            \"injectCss\": [\"stylesheets/good-bye.css\", \"/stylesheets/others.css\"]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n> Test : From `./tests/examples/css-injection` run `node \"../../../\" --generate --webconfig webconfig.multiple.json`. Result are into `generates`.\r\n\r\n\r\n\r\n### Allow / Disallow GET / POST requests ###\r\n\r\nYou can also manager how the server will respond to requests GET/POST to a given page. For example, we will allow access to pages only GET for the whole site and allow a POST to one page only (and prohibited him GET).\r\n\r\n```js\r\n{\r\n    \"getSupport\": true,\r\n    \"postSupport\": false,\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/list-of-members/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/write-comment/\": {\r\n            \"template\": \"write-com.htm\"\r\n        },\r\n        \"/save-comment/\": {\r\n            \"template\": \"save-com.htm\",\r\n            \"getSupport\": false,\r\n            \"postSupport\": true\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : If nothing is set,* ***getSupport*** *and* ***postSupport*** *are set to* ***true*** *in  global webconfig and by route.*\r\n\r\n\r\n\r\n### Allow / Disallow PUT / DELETE requests ###\r\n\r\nFonctionnant exactement de la même manière que `getSupport` et `postSupport`, les deux actions HTTP PUT et DELETE qui part défaut ne sont pas activé peuvent être activé avec `putSupport` et `deleteSupport`.\r\n\r\n```js\r\n{\r\n    \"getSupport\": false,\r\n    \"postSupport\": false,\r\n    \"putSupport\": true,\r\n    \"routes\": {\r\n        \"/read-all-entry/\": {\r\n            \"template\": \"display-json.htm\",\r\n            \"variation\": \"all-entry.json\",\r\n            \"getSupport\": true,\r\n            \"putSupport\": false\r\n        },\r\n        \"/read-entry/:id/\": {\r\n            \"template\": \"display-json.htm\",\r\n            \"variation\": \"entry.json\",\r\n            \"getSupport\": true,\r\n            \"putSupport\": false\r\n        },\r\n        \"/create-entry/:id/\": {\r\n            \"template\": \"display-json.htm\",\r\n            \"variation\": \"entry.json\",\r\n            \"postSupport\": true,\r\n            \"putSupport\": false\r\n        },\r\n        \"/update-entry/:id/\": {\r\n            \"template\": \"display-json.htm\",\r\n            \"variation\": \"entry.json\"\r\n        },\r\n        \"/delete-entry/:id/\": {\r\n            \"template\": \"display-json.htm\",\r\n            \"variation\": \"entry.json\",\r\n            \"deleteSupport\": true,\r\n            \"putSupport\": false\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWith the configuration below, only one HTTP action is possible by route, this is a great way to create APIs REST easily with NodeAtlas.\r\n\r\n\r\n\r\n### Change settings of Sessions ###\r\n\r\n#### Key and Secret ####\r\n\r\nNodeAtlas itself manages sessions stored on the server as initial settings:\r\n\r\n- Key : `nodeatlas.sid`\r\n- Secret : `1234567890bépo`\r\n\r\nthat allow customers to stay connected through the pages to a single set of personal server side variable.\r\n\r\nIt is possible to change the default settings (and even compulsory for productions sites) with the parameters of `webconfig.json` following:\r\n\r\n```js\r\n{\r\n    sessionKey: \"personal key\",\r\n    sessionSecret: \"personal secret\"\r\n}\r\n```\r\n\r\nNodeAtlas also employs a memory storage object (MemoryStore) stoques that the information in the RAM of the server.\r\n\r\n#### Other Parameters ####\r\n\r\nIt is possible to change all the parameters of the sessions (except MemoryStore) using the configuration of next `webconfig.json`:\r\n\r\n```js\r\n{\r\n    \"session\": {\r\n        \"key\": \"personal key\",\r\n        \"secret\": \"personal secret\",\r\n        \"cookie\": {\r\n            \"path\": '/',\r\n            \"httpOnly\": true,\r\n            \"secure\": false,\r\n            \"maxAge\": null\r\n        },\r\n        ...,\r\n        ...,\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nThe entirety of the possible configuration is located on the module documentation [express-session](https://github.com/expressjs/session).\r\n\r\n\r\n\r\n### External Storage Sessions ###\r\n\r\nBy default, this is NodeAtlas server that stores sessions in the RAM of the server application. This does not allow users to share sessions across multiple applications NodeAtlas (or other) and erases all current sessions for an application if you restart it.\r\n\r\nTo address this concern, it should support the recording sessions via a base No SQL such as `Redis` or `MongoBD`.\r\n\r\nYou just have to use the `setSessions` function in` controllers/common.js` of [partie Back-end](#use-nodeatlas-to-run-a-website-back-end-part).\r\n\r\n#### Session managed with Redis ####\r\n\r\nImplement the following code in `controllers/common.js` to store your sessions in a local Redis.\r\n\r\n```\r\nvar website = {};\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    publics.loadModules = function (NA) {\r\n        var NA = this;\r\n\r\n        NA.modules.RedisStore = require('connect-redis');\r\n    };\r\n\r\n    publics.setSessions = function (next) {\r\n        var NA = this,\r\n            session = NA.modules.session,\r\n            RedisStore = NA.modules.RedisStore(session);\r\n\r\n        NA.sessionStore = new RedisStore();\r\n\r\n        next();\r\n    };\r\n\r\n}(website));\r\n\r\nexports.loadModules = website.loadModules;\r\nexports.setSessions = website.setSessions;\r\n```\r\n\r\nMore information to [connect-redis](https://www.npmjs.org/package/connect-redis) page.\r\n\r\n\r\n#### Session managed with MongoDB ####\r\n\r\nImplement the following code in `controllers/common.js` to store sessions in the database `sessions` of a local MongoDB.\r\n\r\n```\r\nvar website = {};\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    publics.loadModules = function () {\r\n        var NA = this;\r\n\r\n        NA.modules.MongoStore = require('connect-mongo');\r\n    };\r\n\r\n    publics.setSessions = function (next) {\r\n        var NA = this,\r\n            session = NA.modules.session,\r\n            MongoStore = NA.modules.MongoStore(session);\r\n\r\n        NA.sessionStore = new MongoStore({\r\n            db: 'sessions'\r\n        });\r\n\r\n        next();\r\n    };\r\n\r\n}(website));\r\n\r\nexports.loadModules = website.loadModules;\r\nexports.setSessions = website.setSessions;\r\n```\r\n\r\nMore information to [connect-redis](https://www.npmjs.org/package/connect-mongo) page.\r\n\r\n\r\n\r\n### Changing the template engine brackets <% %> ###\r\n\r\nFor example, to include part of a file instruction is used ***<%- include('head.htm') %>***. It would be possible to do it with ***<?- include('head.htm') ?>*** with the configuration below:\r\n\r\n```js\r\n{\r\n    \"templateEngineDelimiter\": \"?\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nSee the exemple in files below:\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><?- specific.titlePage ?></title>\r\n\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<?= common.classCssCommon ?>.css\" media=\"all\" />\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<?= specific.classPage ?>.css\" media=\"all\" />\r\n    </head>\r\n    <body class=\"<?= specific.classPage ?>\">\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n        <script async type=\"text/javascript\" src=\"javascript/<?= common.classJsCommon ?>.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/template.htm*\r\n\r\n```html\r\n    <?- include('head.htm') ?>\r\n\r\n    <div class=\"title\"><?- common.titleWebsite ?></div>\r\n\r\n    <div>\r\n        <h1><?- specific.titlePage ?></h1>\r\n        <?- specific.content ?>\r\n    </div>\r\n\r\n    <?- include('foot.htm') ?>\r\n```\r\n\r\nLearn all about the possibilities of the template engine consult the documentation [ejs](https://github.com/mde/ejs)\r\n\r\n*Note : If nothing is set,* ***templateEngineDelimiter*** *is set to* ***%***.\r\n\r\n\r\n\r\n### Change the url hostname and listening port ###\r\n\r\nIt is possible to generate a different url listening other port with ***urlHostname*** *** and ***urlPort***. For example, the local loop listens on port 80 for a script makes the Reverse Proxy from the port 7777 on the 80 with the \"http-proxy\" module as below:\r\n\r\n```js\r\n{\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"127.0.0.1\",\r\n    \"urlPort\": 80,\r\n    \"urlHostname\": \"localhost\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIt's also possible to avoid other enter url. Also if `www.localhost` or `localhost:7777` are enter into url area, it's `localhost` for the user :\r\n\r\n```js\r\n{\r\n    \"enableForceDomain\": true,\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"127.0.0.1\",\r\n    \"urlPort\": 80,\r\n    \"urlHostname\": \"localhost\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Generate urls dynamically ###\r\n\r\n#### Relative paths in absolute ####\r\n\r\nIt is possible that the paths created from your url to be interpreted as subfolders that have actually no real existence. This has the effect the address `media/images/example.jpg` initially accessible from template displayed to address **http://localhost**` impossible to reach when the template is displayed to address **http://localhost/sub-directory/** (because the path should be `../media/images/example.jpg`).\r\n\r\nTo no longer have to worry about access to resources regardless of the URL that is requested, simply turn on all the urls such as:\r\n\r\n```\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.css\" />\r\n<!-- ... -->\r\n<img src=\"media/images/example.jpg\" />\r\n<!-- ... -->\r\n<script type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n```\r\n\r\nin absolute urls with variable `urlBasePath` as below:\r\n\r\n```\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"<%= urlBasePath %>stylesheets/common.css\" />\r\n<!-- ... -->\r\n<img src=\"<%= urlBasePath %>media/images/example.jpg\" />\r\n<!-- ... -->\r\n<script type=\"text/javascript\" src=\"<%= urlBasePath %>javascript/common.js\"></script>\r\n```\r\n\r\nNote that in the case of the following configuration:\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`urlBasePath` return `http://localhost/` while in this configuration:\r\n\r\n```js\r\n{\r\n    \"httpPort\": 7777,\r\n    \"urlRelativeSubPath\": \"sub/folder\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`urlBasePath` return `http://localhost:7777/sub/folder/`.\r\n\r\n#### The paths of templates ####\r\n\r\nUsing the following webconfig:\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/index.html\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/contact.html\": {\r\n            \"template\": \"contact.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand the corresponding template\r\n\r\n```html\r\n<!-- ... -->\r\n<a href=\"http://localhost/index.html\">Link to home</a>\r\n<a href=\"http://localhost/contact.html\">Link to contact</a>\r\n<!-- ... -->\r\n```\r\n\r\nI'd have to change my link in the template if I change the listening port or if I change the path of the url. The following configuration changes:\r\n\r\n```js\r\n{\r\n    \"httpPort\": 7777,\r\n    \"routes\": {\r\n        \"/home.html\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/contact-us.html\": {\r\n            \"template\": \"contact.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nme contraindrait à modifier le template précédent comme suit :\r\n\r\n```html\r\n<!-- ... -->\r\n<a href=\"http://localhost:7777/home.html\">Link to home</a>\r\n<a href=\"http://localhost:7777/contact-us.html\">Link to contact</a>\r\n<!-- ... -->\r\n```\r\n\r\nYou can solve this problem by giving a key to a specific path and deporting are way in the `url` property.\r\n\r\nWith the followinh webconfig:\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"index\": {\r\n            \"url\": \"/index.html\",\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"contact\": {\r\n            \"url\": \"/contact.html\",\r\n            \"template\": \"contact.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI can now write the link in the dynamic template:\r\n\r\n1. as follows\r\n\r\n   ```html\r\n<!-- ... -->\r\n<a href=\"<%= urlBasePath %><%= webconfig.routes.home.url.slice(1) %>\">Link to home</a>\r\n<a href=\"<%= urlBasePath %><%= webconfig.routes.contact.url.slice(1) %>\">Link to contact</a>\r\n<!-- ... -->\r\n```\r\n\r\n   *Note : `.slice(1)` makes it easy to remove the dual `/` for standard url.*\r\n\r\n2. or as follows\r\n\r\n   ```html\r\n<!-- ... -->\r\n<a href=\"<%= urlBasePath %>.<%= webconfig.routes.home.url %>\">Link to home</a>\r\n<a href=\"<%= urlBasePath %>.<%= webconfig.routes.contact.url %>\">Link to contact</a>\r\n<!-- ... -->\r\n```\r\n\r\n   *Note : This would, for example `http://localhost/./home.html`, which is a standard url.*\r\n\r\n3. ou comme suit\r\n\r\n   ```html\r\n<!-- ... -->\r\n<a href=\"<%= urlBasePathSlice + webconfig.routes.home.url %>\">Link to home</a>\r\n<a href=\"<%= urlBasePathSlice + webconfig.routes.contact.url %>\">Link to contact</a>\r\n<!-- ... -->\r\n```\r\n\r\n   *Note : `urlBasePathSlice` return `http://localhost` in place of `http://localhost/` or `http://localhost:7777/sub/folder` in place of `http://localhost:7777/sub/folder/`.*\r\n\r\n#### Utilisation de la clé pour mapper les pages ####\r\n\r\nIt's maybe useful to know the key used for the current page displayed for find the equivalent page in an other language.\r\n\r\nWith the following webconfig :\r\n\r\n```js\r\n{\r\n    \"languageCode\": \"en-us\",\r\n    \"routes\": {\r\n        \"index_en-us\": {\r\n            \"url\": \"/\",\r\n            \"template\": \"/index.htm\"\r\n        },\r\n        \"index_fr-fr\": {\r\n            \"url\": \"/francais/\",\r\n            \"template\": \"index.htm\",\r\n            \"languageCode\": \"fr-fr\"\r\n        },\r\n        \"cv_en-us\": {\r\n            \"url\": \"/resume/\",\r\n            \"template\": \"cv.htm\"\r\n        },\r\n        \"cv_fr-fr\": {\r\n            \"url\": \"/francais/cv/\",\r\n            \"template\": \"index.htm\",\r\n            \"languageCode\": \"fr-fr\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand the common variation following :\r\n\r\n```js\r\n{\r\n    \"language\": [{\r\n        \"name\": \"English\",\r\n        \"code\": \"en-us\"\r\n    }, {\r\n        \"name\": \"French\",\r\n        \"code\": \"fr-fr\"\r\n    }]\r\n}\r\n```\r\n\r\nin fr :\r\n\r\n```js\r\n{\r\n    \"language\": [{\r\n        \"name\": \"Anglais\",\r\n        \"code\": \"en-us\"\r\n    }, {\r\n        \"name\": \"Français\",\r\n        \"code\": \"fr-fr\"\r\n    }]\r\n}\r\n```\r\n\r\nwe could create link between each page as following :\r\n\r\n```html\r\n<ul>\r\n    <% for (var i = 0; i < common.language.length; i++) { %>\r\n    <li><a href=\"<%= urlBasePathSlice + webconfig.routes[currentRouteName.split('_')[0] + '_' + common.language[i].code].url %>\"><%- common.language[i].name %></a></li>\r\n    <% } %>\r\n</ul>\r\n```\r\n\r\n\r\n\r\n## CLI / Running commands ##\r\n\r\nThe easiest way to start is to position NodeAtlas in the directory hosting your site and run the command `\\> node </path/to/>node-atlas/`. However there are options to launch more than launch the site.\r\n\r\nEach of the commands that follow can be coupled with other like this:\r\n\r\n```\r\n\\> node </path/to/>node-atlas/ --directory /hello-world/ --webconfig config.fr-fr.js --httpPort 80 --browse\r\n```\r\n\r\n\r\n### --directory &lt;path> ###\r\n\r\nIt is possible to launch NodeAtlas from another location where the website folder is placed. The `--directory` command will be very useful.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/ --directory </path/to/your/website/directory/>\r\n```\r\n\r\n\r\n### --webconfig &lt;webconfigName> ###\r\n\r\nBy default, NodeAtlas will read your `webconfig.json` file. It is possible that in addition to the file you created another `webconfig.prod.json` file whose domain name is different. Or a `webconfig.fr-fr.json` with urls changes for another language. Instead of renaming your files in `webconfig.json` before launching the site, simply enter your other configuration name. In the following example, this file will be `webconfig.alternatif.json`.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/ --webconfig webconfig.alternatif.json\r\n```\r\n\r\n\r\n\r\n### --browse [subpath] ###\r\n\r\nThis command opens your browser to the address on which the site will run. Very handy when you do not remember the port for your development version. This command is useless if it is coupled with `--generate` (see below).\r\n\r\n```\r\n\\> node </path/to/>node-atlas/ --browse\r\n```\r\n\r\nYou could also targeted a specific page with the end of url.\r\n\r\n\r\n```\r\n\\> node </path/to/>node-atlas/ --browse index.html\r\n```\r\n\r\n\r\n\r\n### --httpHostname &lt;httpHostname> ###\r\n\r\nYou will maybe want know your IP with `ipconfig` to change it in the url to access your website from others device connected to the current network so this command is for you.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/ --httpHostname 192.168.1.1\r\n```\r\n\r\n\r\n\r\n### --httpPort &lt;httpPort> ###\r\n\r\nYou will not be bored to change your listening port on your projects and sometimes you'll have to work on two different websites simultaneously. With this command you will not need to cut your sites turn to release the listener, simply pick one at launch.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/ --httpPort 7778\r\n```\r\n\r\n\r\n\r\n### --generate ###\r\n\r\nIf you change an item in your common variation file or even your template components called in multiple pages, you will not reload each page to update your output files. If so, simply use `--generate`. This command will copy the entire contents of the folder `assetsRelativePath` into `generatesRelativePath` if their path is different.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/ --generate\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## API / NodeAtlas as npm module ##\r\n\r\nIf you start NodeAtlas via JavaScript code, you can also configure the launch:\r\n\r\n*server.js*\r\n\r\n```javascript\r\nrequire(\"node-atlas\")().config({\r\n    directory: \"</path/to/your/website/directory/>\",\r\n    webconfig: \"webconfig.alternatif.json\",\r\n    browse: true,\r\n    httpHostname: \"192.168.1.1\",\r\n    httpPort: 7778,\r\n    generate: true\r\n}).init();\r\n```\r\n\r\n```\r\n\\> server server.js\r\n```\r\n\r\nYou can run multiple website in same time. Each webconfig must listen a different port.\r\n\r\n*servers.js*\r\n\r\n```javascript\r\nvar nodeAtlas = require(\"node-atlas\"),\r\n    websiteEn = new nodeAtlas(),\r\n    websiteFr = new nodeAtlas();\r\n\r\nwebsiteEn.run({\r\n    \"browse\": true,\r\n    \"webconfig\": \"webconfig.english.json\"\r\n});\r\nwebsiteFr.run({\r\n    \"browse\": true,\r\n    \"webconfig\": \"webconfig.french.json\"\r\n});\r\n```\r\n\r\nYou could also execute other tasks after assets generation:\r\n\r\n*servers.js*\r\n\r\n```javascript\r\nrequire(\"node-atlas\")().afterGeneration(function() {\r\n    require('child_process').exec(__dirname + \"/documentation.bat\", function (err, stdout, stderr) {\r\n        console.log(\"Documentation generation...\");\r\n        console.log(stdout);\r\n        console.log(\"Documentation generation done !\");\r\n    });\r\n}).run({\r\n    generate: true\r\n});\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## NodeAtlas as a simple web server ##\r\n\r\nIf NodeAtlas can not find the \"webconfig.json\" or `--webconfig` you have specify, it will run in either \"Simple Web Server\" or \"Public\" mode.\r\n\r\n**This mode is useful for testing very quickly that NodeAtlas is installed properly or to create small HTML examples that need to run a web server (AJAX returns, embedded iframe, etc.).**\r\n\r\nTo understand what this means: if there is any file in the directory where NodeAtlas was launched, it will be returned by HTTP request so have the demands via its path.\r\n\r\nFor example, by launching NodeAtlas in the `site-hello-world` folder\r\n\r\n```\r\nsite-hello-world/\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nby running the command\r\n\r\n```\r\n\\> node </path/to/>node-atlas/\r\n```\r\n\r\nor even the command\r\n\r\n```\r\n\\> node </path/to/>node-atlas/ --webconfig webconfig.not-exist.json\r\n```\r\n\r\nthe server will run in \"Simple Web Server\" mode and file \"http://localhost/webconfig.json\" or \"http://localhost/templates/webconfig.htm\" will be available as the browser could refer as a simple web server.\r\n\r\n*Note : only commands `--webconfig`, `--browse`, `--directory` and `--httpPort` work in this mode.*\r\n\r\n\r\n\r\n\r\n\r\n## Running NodeAtlas on online server ##\r\n\r\n### In a Windows Server environment with iisnode ###\r\n\r\nIn a Windows Server 2013 environment with IIS8 the requirements are:\r\n\r\n1. Install [the node.exe executable](http://nodejs.org/download/) able to run JavaScript code.\r\n2. Install [the IIS8 UrlRewrite module](http://www.iis.net/downloads/microsoft/url-rewrite) to map pages executed to an output URL.\r\n3. Install [the IIS8 issnode module](https://github.com/tjanczuk/iisnode/downloads) to read web.config and to manage the website (IIS Application Pool Management, start/stop website, etc...).\r\n\r\n#### Create application ####\r\n\r\nIn IIS8, create a web site and create an Application.\r\n\r\nThe content of your application will be the site mixed with that of NodeAtlas. So that means this:\r\n\r\n```\r\nnode-atlas/\r\n— node_modules/\r\n— languages/\r\n—— default.json\r\n— node-atlas.js\r\nsite-hello-world/\r\n— assets/\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nbecomes this:\r\n\r\n```\r\nsite-hello-world/\r\n— node_modules/\r\n— languages/\r\n—— default.json\r\n— assets/\r\n— templates/\r\n—— index.htm\r\n— node-atlas.js\r\n— webconfig.json\r\n```\r\n\r\nYou will add to this set of files, additional file named `web.config` whose content is:\r\n\r\n```xml\r\n<configuration>\r\n    <system.webServer>\r\n        <handlers>\r\n            <add name=\"iisnode\" path=\"node-atlas.js\" verb=\"*\" modules=\"iisnode\" />\r\n        </handlers>\r\n        <rewrite>\r\n            <rules>\r\n                <rule name=\"LogFile\" patternSyntax=\"ECMAScript\" stopProcessing=\"true\">\r\n                     <match url=\"^[a-zA-Z0-9_\\-]+\\.js\\.logs\\/\\d+\\.txt$\"/>\r\n                </rule>\r\n                <rule name=\"NodeInspector\" patternSyntax=\"ECMAScript\" stopProcessing=\"true\">\r\n                    <match url=\"^node-atlas.js\\/debug[\\/]?\" />\r\n                </rule>\r\n                <rule name=\"StaticContent\">\r\n                     <action type=\"Rewrite\" url=\"assets{REQUEST_URI}\"/>\r\n                </rule>\r\n                <rule name=\"DynamicContent\">\r\n                     <conditions>\r\n                          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\"/>\r\n                     </conditions>\r\n                     <action type=\"Rewrite\" url=\"node-atlas.js\"/>\r\n                </rule>\r\n            </rules>\r\n        </rewrite>\r\n    </system.webServer>\r\n</configuration>\r\n```\r\n\r\nto obtain:\r\n\r\n```\r\nsite-hello-world/\r\n— node_modules/\r\n— languages/\r\n—— default.json\r\n— assets/\r\n— templates/\r\n—— index.htm\r\n— node-atlas.js\r\n— webconfig.json\r\n— web.config\r\n```\r\n\r\nIt will just have to click on \"Browse <url-of-Site>\" in your IIS8 action panel. You can now manage your website (start / stop / Pool Recycling) like any other IIS8 application.\r\n\r\n#### webconfig example ####\r\n\r\nAn example for a production webconfig:\r\n\r\n```js\r\n{\r\n    \"urlPort\": 80,\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"www.example.com\",\r\n    \"routes\": {\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### In a Unix environment with forever ###\r\n\r\nThis requires:\r\n\r\n1. Install [the node.exe executable](http://nodejs.org/download/) able to run JavaScript code.\r\n2. Install [the CLI tool forever](https://github.com/nodejitsu/forever) manager for your websites continuously (start, stop, restart, etc.).\r\n3. Running in addition of your websites a reverse-proxy running on port 80 for all applications.\r\n\r\n\r\n#### Some forever commands ####\r\n\r\nTo manage a new website in continues to be used the command:\r\n\r\n```\r\n\\> forever start </path/to/>node-atlas/ --directory </path/to/your/website/directory/>\r\n```\r\n\r\nTo stop it, localise the **uid** with the `list` forever command\r\n\r\n```\r\n\\> forever list\r\n```\r\n\r\nand then use the command:\r\n\r\n```\r\n\\> forever stop <uid>\r\n```\r\n\r\nor `<uid>` is the **uid** of running website.\r\n\r\n\r\n#### webconfig example ####\r\n\r\nAn example for a production webconfig:\r\n\r\n```js\r\n{\r\n    \"urlPort\": 80,\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"www.example.com\",\r\n    \"routes\": {\r\n        ...\r\n    }\r\n}\r\n\r\n```\r\n\r\nYou will then use a reverse proxy to make your site accessible on port 80.\r\n\r\n\r\n\r\n#### In a Unix environment with Nginx ####\r\n\r\nThis is an example of Nginx's configuration:\r\n\r\n```javascript\r\n## Server an.example.fr\r\n\r\nupstream websocket {\r\n    server Ip_backend:7777;\r\n}\r\n\r\nserver {\r\n\r\n    listen   80;\r\n    server_name an.example.fr;\r\n\r\n        keepalive_timeout    60;\r\n\r\n    access_log on;\r\n\r\n        access_log /var/log/nginx/access.log logstash;\r\n    error_log /var/log/nginx/error-an.example.fr.log;\r\n\r\n    location /socket.io/ {\r\n            proxy_pass http://websocket;\r\n            proxy_http_version 1.1;\r\n            proxy_set_header Upgrade $http_upgrade;\r\n            proxy_set_header Connection \"upgrade\";\r\n    }\r\n\r\n    location / {\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n            proxy_set_header Host $http_host;\r\n            proxy_set_header X-NginX-Proxy true;\r\n\r\n            proxy_pass http://websocket;\r\n        proxy_read_timeout 300;\r\n        proxy_connect_timeout 300;\r\n        proxy_redirect off;\r\n\r\n    }\r\n\r\n    error_page 400 401 402 403 405 406 407 408 409 410 411 412 413 414 415 416 417 500 501 502 503 504 505 506 507 /error.html;\r\n\r\n    location = /error.html {\r\n            root /var/www/nginx-default;\r\n    }\r\n}\r\n```\r\n\r\n`Ip_backend` must be replaced by your private subnetwork IP. That can be `127.0.0.1` if node run in same server as Nginx.\r\n\r\n`websocket` should be replaced by any word, it will be also moddify the `proxy_pass`. It must be unique to each node.\r\n\r\n\r\n\r\n### Proxy ###\r\n\r\n#### Bouncy ####\r\n\r\nBouncy is an example of reverse-proxy that you can use to run various NodeAtlas websites (with other types of websites) together on the same port (80).\r\n\r\nYou can for example:\r\n\r\n- run 3 Node.js apps on ports 7777, 7778 and 7779 with forever,\r\n- and besides launching a apache server on port 81\r\n\r\nand make all your websites accessible behind domain names on port 80 with Bouncy example.\r\n\r\nHere is a sample configuration with Bouncy:\r\n\r\n**global-server.js**\r\n\r\n```javascript\r\nvar bouncy = require('bouncy');\r\n\r\nvar server = bouncy(function (request, response, bounce) {\r\n    if (request.headers.host === 'beep.example.com') {\r\n        bounce(7777);\r\n    }\r\n    else if (request.headers.host === 'blup.example.com') {\r\n        bounce(7776);\r\n    }\r\n    else if (request.headers.host === 'boop.example.com') {\r\n        bounce(81);\r\n    }\r\n    else {\r\n        response.statusCode = 404;\r\n        response.end('no such host');\r\n    }\r\n});\r\n\r\nserver.listen(80);\r\n```\r\n\r\nand you can start with:\r\n\r\n```\r\n\\> forever start </path/to/>global-server.js\r\n```\r\n\r\n[More information about Bouncy](https://github.com/substack/bouncy)\r\n\r\n\r\n\r\n\r\n\r\n## More About NodeAtlas ##\r\n\r\nNodeAtlas is made of such a way that the instanciate object contains all the functions allowing it to function. NodeAtlas delivers itself it's object into controllers via the methods used in the Back-end mode with Node.js for you to occasionally change his behavior.\r\n\r\n### NodeAtlas VS Others ###\r\n\r\n|                       | **NodeAtlas**                                                                                               | Express                  | Hapi                  | Sails                                       | Restify                  | LoopBack                                          | Meteor                                                      |\r\n|-----------------------|-------------------------------------------------------------------------------------------------------------|--------------------------|-----------------------|---------------------------------------------|--------------------------|---------------------------------------------------|-------------------------------------------------------------|\r\n| Type                  | Web **MVC(2)** framework                                                                                    | HTTP server library      | HTTP server framework | Web MVC framework                           | REST HTTP library        | API framework                                     | Full-stack JavaScript app platform                          |\r\n| Top Features          | Simplicity, **Evolutivity**, Modularity                                                                     | HTTP routing, middleware | Modularity, security  | Rails familiarity, MVC                      | Simplicity, REST routing | Enterprise connectivity                           | Framework Front-end et Back-end                             |\r\n| Suitable For          | **Web sites**, Web apps, REST APIs, **Templating**                                                          | Simple web apps          | Web apps, APIs        | Web apps, APIs                              | Simple REST APIs         | Web apps, APIs                                    | Web apps                                                    |\r\n| Pure Node runtime     | Yes                                                                                                         | Yes                      | Yes                   | Yes                                         | Yes                      | Yes                                               | No                                                          |\r\n| Extensions            | **Atlas plugin**, Npm module, Express middleware                                                            | Express middleware       | Hapi Plugins          |                                             |                          |                                                   | Meteor package and repository, Npm module                   |\r\n| Data sources          | **Builtin**: In-memory /file (JSON), REST. With **external npm module**: NoSQL (MongoDB...), SQL (MySql...) |                          |                       | In-memory, File, PostgreSQL, MySQL, MongoDB |                          | In-memory/file, SQL NoSQL, ATG, Email, REST, SOAP | MongoDB, MySQL and PostgreSQL via 3rd-party Meteor packages |\r\n| Main support language | French                                                                                                      | English                  | English               | English                                     | English                  | English                                           | English                                                     |\r\n\r\nAll error messages are in `/languages/default.json`. If you want to change language, simply replace content of `default.json` file (currently the same of `en-gb`) with the content of `fr-fr.json` or others file translated by you.",
  "google": "UA-50163044-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}