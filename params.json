{"name":"NodeAtlas","tagline":"NodeAtlas vous permet de créer et maintenir des Assets HTML ou sites multilingues simplement en Node.js","body":"# node-atlas #\r\n\r\n[![Faites un don](https://img.shields.io/badge/don-%E2%9D%A4-ddddff.svg)](https://www.paypal.me/BrunoLesieur/5) [![Travis CI](https://travis-ci.org/Haeresis/NodeAtlas.svg)](https://travis-ci.org/Haeresis/NodeAtlas/) [![Version 1.0 Beta](https://img.shields.io/badge/version-1.0.0--beta-brightgreen.svg)](https://github.com/Haeresis/NodeAtlas) [![Package NPM](https://badge.fury.io/js/node-atlas.svg)](https://www.npmjs.com/package/node-atlas) [![Node.js](https://img.shields.io/badge/nodejs-0.10.0%2C_4.1.1-brightgreen.svg)](https://nodejs.org/en/) [![Technical Debt Ratio](https://img.shields.io/badge/debt_ratio-0%25-brightgreen.svg)](http://docs.sonarqube.org/display/PLUG/JavaScript+Plugin) [![Dependency Status](https://gemnasium.com/Haeresis/NodeAtlas.svg)](https://gemnasium.com/Haeresis/NodeAtlas)\r\n\r\n**For an international version of this README.md, [follow this link](https://haeresis.github.com/NodeAtlas/doc/).**\r\n\r\n\r\n\r\n\r\n\r\n## Avant-propos ##\r\n\r\nNodeAtlas est une application réalisée en JavaScript et tournant avec [Node.js](http://nodejs.org/). Elle permet trois choses :\r\n\r\n- Créer et maintenir un ensemble de maquettes HTML/CSS/JavaScript pour les fournir à des développeurs Back-end.\r\n- Créer et maintenir des sites multilingues sans Back-end.\r\n- Développer des sites ou des applications Node.js multilingues de toutes tailles.\r\n\r\n\r\n\r\n### Exemples de réalisations avec NodeAtlas ###\r\n\r\nL'outil est encore en développement et je l'expérimente petit à petit avec mes propres sites.\r\n\r\n- [Génération et maintenance de maquette HTML](https://github.com/Haeresis/ResumeAtlas/).\r\n- [Maintenance de site HTML (sans Back-end)](https://github.com/Haeresis/ResumeAtlas/).\r\n- [Site Node.js avec Websocket et PopState](https://github.com/Haeresis/BookAtlas/).\r\n- [Site Node.js avec base MongoDB et Redis](https://github.com/Haeresis/BlogAtlas/).\r\n- [Exemple Node.js de modification de contenu live sans Back-office](https://github.com/Haeresis/EditAtlas/).\r\n- [Simple Serveur Web pour un dossier](https://github.com/Haeresis/SimpleAtlas/).\r\n- [Utilisation du préprocesseur Less en temps réel côté serveur](https://github.com/Haeresis/LessAtlas/).\r\n- [Création d'extensions pour booster les capacités natives](https://github.com/Haeresis/ComponentAtlas/).\r\n\r\n\r\n\r\n### Table des matières ###\r\n\r\n- [Avant-propos](#avant-propos)\r\n - [Exemple de réalisations avec NodeAtlas](#exemples-de-r%C3%A9alisations-avec-nodeatlas)\r\n - [Table des matières](#table-des-mati%C3%A8res)\r\n - [Documentation](#documentation)\r\n - [Contribution](#contribution)\r\n- [Installation](#installation)\r\n- [Commencer avec NodeAtlas](#commencer-avec-nodeatlas)\r\n - [Ensemble de fichiers](#ensemble-de-fichiers)\r\n - [Configuration minimale](#configuration-minimale)\r\n - [Lancer le site avec NodeAtlas](#lancer-le-site-avec-nodeatlas)\r\n- [Différentes configurations du webconfig.json](#diff%C3%A9rentes-configurations-du-webconfigjson)\r\n - [Plusieurs pages](#plusieurs-pages)\r\n - [Raccourci de template](#raccourci-de-template)\r\n - [Héberger des images, polices, CSS, JS, etc.](#h%C3%A9berger-des-images-polices-css-js-etc)\r\n - [Gérer des inclusions pour éviter la redondance du code](#g%C3%A9rer-des-inclusions-pour-%C3%A9viter-la-redondance-du-code)\r\n - [Gérer des variations au sein d'un même template](#g%C3%A9rer-des-variations-au-sein-dun-m%C3%AAme-template)\r\n - [Gérer le multilingue](#g%C3%A9rer-le-multilingue)\r\n - [Utiliser NodeAtlas pour générer des assets HTML](#utiliser-nodeatlas-pour-g%C3%A9n%C3%A9rer-des-assets-html)\r\n - [Utiliser NodeAtlas pour faire tourner un site (partie Back-end)](#utiliser-nodeatlas-pour-faire-tourner-un-site-partie-back-end)\r\n - [Génerer des fragments de page par retour AJAX/Websocket](#generer-des-fragments-de-page-par-retour-ajaxwebsocket)\r\n - [Changer les paramètres d'url](#changer-les-param%C3%A8tres-durl)\r\n - [Créer ses propres variables de webconfig](#cr%C3%A9er-ses-propres-variables-de-webconfig)\r\n - [Gérer le routage (Url Rewriting)](#g%C3%A9rer-le-routage-url-rewriting)\r\n - [Gérer les pages inexistantes](#g%C3%A9rer-les-pages-inexistantes)\r\n - [Gérer les redirections](#g%C3%A9rer-les-redirections)\r\n - [Faire tourner le site en HTTPs](#faire-tourner-le-site-en-https)\r\n - [Minifier les CSS/JS](#minifier-les-cssjs)\r\n - [Générer les CSS avec Less](#g%C3%A9n%C3%A9rer-les-css-avec-less)\r\n - [Optimiser les Images](#optimiser-les-images)\r\n - [Injecter du CSS inline pour maintenir des assets Email](#injecter-du-css-inline-pour-maintenir-des-assets-email)\r\n - [Autoriser/Interdire les demandes GET/POST](#autoriserinterdire-les-demandes-getpost)\r\n - [Changer les paramètres des Sessions](#changer-les-param%C3%A8tres-des-sessions)\r\n - [Stockage externe des Sessions](#stockage-externe-des-sessions)\r\n - [Changer les chevrons <% %> du moteur de template](#changer-les-chevrons---du-moteur-de-template)\r\n - [Changer l'url final des hostname et port d'écoute](#changer-lurl-final-des-hostname-et-port-d%C3%A9coute)\r\n - [Générer les urls dynamiquement](#g%C3%A9n%C3%A9rer-les-urls-dynamiquement)\r\n- [CLI / Commandes de lancement](#cli--commandes-de-lancement)\r\n - [--directory](#--directory-)\r\n - [--webconfig](#--webconfig-)\r\n - [--browse](#--browse-subpath)\r\n - [--httpPort](#--httpport-)\r\n - [--generate](#--generate)\r\n- [API / NodeAtlas comme module npm](#api-nodeatlas-comme-module-npm)\r\n- [NodeAtlas comme simple serveur web](#nodeatlas-comme-simple-serveur-web)\r\n- [Faire tourner NodeAtlas sur serveur](#faire-tourner-nodeatlas-sur-serveur)\r\n - [Dans un environnement Windows Server avec iisnode](#dans-un-environnement-windows-server-avec-iisnode)\r\n - [Dans un environnement Unix avec forever](#dans-un-environnement-unix-avec-forever)\r\n - [Proxy](#proxy)\r\n- [À propos de l'architecture de NodeAtlas](#%C3%80-propos-de-larchitecture-de-nodeatlas)\r\n\r\n\r\n\r\n### Documentation ###\r\n\r\nEn complément de ce README, vous avez également accès au,\r\n- [tl;dr](http://blog.lesieur.name/nodeatlas-le-framework-nodejs-mvc2-oriente-front-end/) et aux\r\n- [détails des fonctions de l'objet NA](http://haeresis.github.io/NodeAtlas/doc/namespaces.list.html) (En).\r\n\r\n\r\n\r\n### Contribution ###\r\n\r\nSi vous souhaitez contribuer avec :\r\n\r\n - De l'amélioration ou de la correction de code,\r\n - De la correction d'orthographe pour la documentation française ou\r\n - De la traduction décente pour la documentation anglaise\r\n\r\nMerci de respecter ses étapes :\r\n\r\n 1. Forkez le repository NodeAtlas.\r\n 2. Travaillez sur une branch créé à partir de la branch master.\r\n 3. Commitez et pushez votre branch.\r\n 4. Faites une pull request.\r\n 5. Soyez patient. ;-)\r\n\r\nTout en respectant les conventions suivantes :\r\n\r\n- Passez le test Sonarqube JS avec 0% de Dette technique.\r\n\r\nMerci d'avance pour votre aide !\r\n\r\n\r\n\r\n\r\n\r\n## Installation ##\r\n\r\nIl y a plusieurs solutions pour installer Node-Atlas :\r\n\r\n- Télécharger NodeAtlas depuis le site officiel [NodeAtlas](https://github.com/Haeresis/NodeAtlas).\r\n\r\n   _Une fois téléchargé, dézippez **NodeAtlas** dans le dossier qui vous conviendra._\r\n\r\n   **Lancer au moins une fois NodeAtlas à la ligne de commande `\\> node </path/to/>node-atlas/node-atlas.js`, pour installer les _node_modules_.**\r\n\r\n- `npm install node-atlas` (recommandé pour un [usage sous forme de module](#api--nodeatlas-comme-module-npm) dans un projet).\r\n\r\n   _Ceci installera **NodeAtlas** dans le dossier `node_modules/node-atlas` du dossier d'execution de la commande._\r\n\r\n- `npm install -g node-atlas` (recommandé pour un [usage sous forme de module](#api--nodeatlas-comme-module-npm) dans beaucoup de projet ou pour [un usage à la ligne de commande](#cli--commandes-de-lancement)).\r\n\r\n   _Ceci installera **NodeAtlas** dans le dossier `node_modules/node-atlas` global._\r\n\r\n- Cloner le répertoire depuis [GitHub](https://github.com/Haeresis/NodeAtlas/) (recommandé pour participer au développement).\r\n\r\n   _Ceci installera **NodeAtlas** dans le dossier d'accueil du clonage._\r\n\r\n   **Lancez au moins une fois NodeAtlas à la ligne de commande `\\> node </path/to/>node-atlas/node-atlas.js`, pour installer les _node_modules_.**\r\n\r\n\r\n\r\n\r\n\r\n## Commencer avec NodeAtlas ##\r\n\r\n### Ensemble de fichiers ###\r\n\r\nAprès avoir installé NodeAtlas quelque part sur votre machine, créez-vous un ensemble de fichiers représentant un site n'importe où ailleurs comme la structure ci-dessous.\r\n\r\n```\r\nsite-hello-world/\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nVoici le fichier « /site-hello-world/templates/index.htm » :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n    </head>\r\n    <body>\r\n        <div>Ceci est un Hello World !</div>\r\n    </body>\r\n</html>\r\n```\r\n\r\net ci-après, le fichier « /site-hello-world/webconfig.json ».\r\n\r\n### Configuration minimale ###\r\n\r\nVous pouvez faire tourner une page simple avec la configuration minimale du « webconfig.json » ci-dessous\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\néquivalente à\r\n\r\n```js\r\n{ \"routes\": { \"/\": \"index.htm\" } }\r\n```\r\n\r\n\r\n\r\n### Lancer le site avec NodeAtlas ###\r\n\r\n#### À la ligne de commande en appelant le script ####\r\n\r\nPlacez-vous avec un invité de commande dans le dossier « /site-hello-world/ » et exécutez la commande suivante.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js\r\n```\r\n\r\nÀ votre première exécution, NodeAtlas installera tous les « node_modules » nécessaires à son fonctionnement (si vous avez téléchargé hors npm).\r\n\r\nRé-exécutez.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js\r\n```\r\n\r\nVous aurez accès à votre « Hello World » à la page *http://localhost/* dans un navigateur.\r\n\r\n\r\n#### Avec un executable sur votre OS ####\r\n\r\n**Si vous avez installé NodeAtlas avec `npm install -g node-atlas`** vous pouvez également utiliser la commande `nodeatlas`. `nodeatlas` est un raccourci de `node </path/to/>node-atlas/node-atlas.js`.\r\n\r\nPlacez-vous toujours avec votre invité de commande dans le dossier « /site-hello-world/ » et exécutez la commande suivante.\r\n\r\n```\r\n\\> nodeatlas\r\n```\r\n\r\n*Note : *si la commande `nodeatlas` n'est pas disponible sous unix après installation (erreur quand vous la tapez), c'est surement à cause d'un problème de droit. Si vous êtes root la commande `chown -R root:root /usr/local/bin/` avant de retaper `npm install -g node-atlas` solutionnera votre problème, sinon la utilisez la commande `sudo npm install -g node-atlas`.*\r\n\r\n\r\n#### Via un fichier JavaScript ####\r\n\r\nVous pouvez également utiliser NodeAtlas comme un module npm.\r\n\r\n*server.js*\r\n\r\n```javascript\r\nvar nodeAtlas = require(\"node-atlas\");\r\n\r\nnodeAtlas().run();\r\n```\r\n\r\n```\r\n\\> node server.js\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## Différentes configurations du webconfig.json ##\r\n\r\n### Plusieurs pages ###\r\n\r\nCi-dessous un exemple de configuration.\r\n\r\n```js\r\n{\r\n    \"templatesRelativePath\": \"templates\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/member.html\": {\r\n            \"template\": \"member.htm\",\r\n            \"postSupport\": false\r\n        },\r\n        \"/member-without-extension/\": {\r\n            \"template\": \"member.htm\",\r\n            \"getSupport\": false\r\n        },\r\n        \"about.html\": {\r\n            \"template\": \"about.htm\"\r\n        },\r\n        \"/error.html\": {\r\n            \"template\": \"error.htm\",\r\n            \"statusCode\": 404,\r\n            \"mimeType\": \"text/plain\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPour faire tourner cet ensemble de fichier :\r\n\r\n```\r\ntemplates/\r\n— index.htm\r\n— member.htm\r\n— error.htm\r\nwebconfig.json\r\n```\r\n\r\naux adresses :\r\n\r\n- *http://localhost/* (répond à la racine)\r\n- *http://localhost/member.html* (ne répondra pas si demandée en POST)\r\n- *http://localhost/member-without-extension/* (ne répondra pas si demandée en GET)\r\n- *http://localhost/error.html* (renvoi du contenu plein texte (sans balise) avec une erreur 404)\r\n\r\n*Note : Si* ***templatesRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des templates est bien* ***templates***. ***templatesRelativePath*** *est donc utile seulement pour changer le nom/chemin du répertoire.*\r\n\r\n\r\n\r\n### Raccourci de template ###\r\n\r\nLa configuration ci-dessous est équivalente à la configuration de la section juste au dessus\r\n\r\n```js\r\n{\r\n    \"templatesRelativePath\": \"templates\",\r\n    \"routes\": {\r\n        \"/\": \"index.htm\",\r\n        \"/member.html\": {\r\n            \"template\": \"member.htm\",\r\n            \"postSupport\": false\r\n        },\r\n        \"/member-without-extension/\": {\r\n            \"template\": \"member.htm\",\r\n            \"getSupport\": false\r\n        },\r\n        \"about.html\": \"about.htm\",\r\n        \"/error.html\": {\r\n            \"template\": \"error.htm\",\r\n            \"statusCode\": 404,\r\n            \"mimeType\": \"text/plain\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ncar\r\n\r\n```js\r\n\"about.html\": \"about.htm\",\r\n```\r\n\r\nest un raccourci de\r\n\r\n```js\r\n\"about.html\": {\r\n    \"template\": \"about.htm\"\r\n}\r\n```\r\n\r\nÉvidemment ce raccourci ne sert que si `template` est le seul paramètre à déclarer de la route.\r\n\r\n\r\n\r\n### Héberger des images, polices, CSS, JS, etc. ###\r\n\r\nVous pouvez également héberger tout un tas de fichier sur votre site dans un dossier public. Par exemple avec cette configuration :\r\n\r\n```js\r\n{\r\n    \"assetsRelativePath\": \"assets\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net cet ensemble de fichiers :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\n— media/\r\n—— images/\r\n——— logo.png\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/stylesheets/common.css*\r\n- *http://localhost/javascript/common.js*\r\n- *http://localhost/media/images/logo.png*\r\n\r\n*Note : Si* ***assetsRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier public est bien* ***assets***. ***assetsRelativePath*** *est donc utile seulement pour changer le nom/chemin du répertoire.*\r\n\r\n#### maxAge, Etag, etc. ####\r\n\r\nIl est possible de manager les informations livrés par NodeAtlas à la demande d'une ressource (comme le `maxAge`, l'`etag`, etc.) via la propriété `staticOptions` du webconfig. Pour connaître la totalité des possibilités, voir les options d'[Express](http://expressjs.com/api.html#express.static).\r\n\r\nPar exemple, pour un webconfig de développement, il peut être intéressant de mettre le `maxAge` à 0 de manière à toujours avoir la dernière modification d'un fichier sans s'acharner sur le rechargement de page.\r\n\r\n```\r\n{\r\n    \"staticOptions\": {\r\n        \"maxAge\": 0\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Gérer des inclusions pour éviter la redondance du code ###\r\n\r\nVous pouvez segmenter vos codes HTML afin de ne pas répéter le code redondant comme par exemple les parties « head » et « foot » ou tout autre fragment de code :\r\n\r\n```js\r\n{\r\n    \"componentsRelativePath\": \"components/\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec les fichiers suivants :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/common.css\" media=\"all\" />\r\n    </head>\r\n    <body>\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n        <script async type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <div>\r\n        <h1>Bienvenue</h1>\r\n        <p>C'est la page d'accueil.</p>\r\n    </div>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\n*templates/members.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <div>\r\n        <h1>Liste des members</h1>\r\n        <p>C'est la page des membres.</p>\r\n    </div>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n\r\n*Note : Si* ***componentsRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des includes est bien* ***components***. ***componentsRelativePath*** *est donc utile seulement pour changer le nom/chemin de répertoire.*\r\n\r\n\r\n\r\n### Gérer des variations au sein d'un même template ###\r\n\r\nIl est possible avec le même template et les mêmes includes de générer des pages au contenu différent (utile en mode génération d'assets HTML). Activer les variations avec la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"commonVariation\": \"common.json\",\r\n    \"variationsRelativePath\": \"variations\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"template.htm\",\r\n            \"variation\": \"index.json\",\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"template.htm\",\r\n            \"variation\": \"members.json\",\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec les fichiers suivants :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— home.css\r\n—— members.css\r\n— javascript/\r\n—— common.js\r\n—— home.js\r\n—— members.js\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nvariations/\r\n— common.json\r\n— index.json\r\n— members.json\r\ntemplates/\r\n— template.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><%= specific.titlePage %></title>\r\n\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<%= common.classCssCommon %>.css\" media=\"all\" />\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<%= specific.classPage %>.css\" media=\"all\" />\r\n    </head>\r\n    <body class=\"<%= specific.classPage %>\">\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n        <script async type=\"text/javascript\" src=\"javascript/<%= common.classJsCommon %>.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/template.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <div class=\"title\"><%= common.titleWebsite %></div>\r\n\r\n    <div>\r\n        <h1><%= specific.titlePage %></h1>\r\n        <%- specific.content %>\r\n    </div>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\n*variations/common.json*\r\n\r\n```js\r\n{\r\n    \"titleWebsite\": \"Titre du site\",\r\n    \"classCssCommon\": \"common\",\r\n    \"classJsCommon\": \"common\"\r\n}\r\n```\r\n\r\n*variations/index.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Bienvenue\",\r\n    \"classPage\": \"index\",\r\n    \"content\": \"<p>C'est la page d'accueil.</p>\"\r\n}\r\n```\r\n\r\n*variations/members.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Liste des membres\",\r\n    \"classPage\": \"members\",\r\n    \"content\": \"<p>C'est la page des membres.</p>\"\r\n}\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n\r\n*Note : Si* ***variationsRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des variations est bien* ***variations***. ***variationsRelativePath*** *est donc utile seulement pour changer le nom/chemin de répertoire.*\r\n\r\n\r\n\r\n### Gérer le multilingue ###\r\n\r\n#### Toutes les langues sur le même site ####\r\n\r\nSur le même principe, les variations peuvent être utilisées pour créer la même page, mais dans des langues différentes :\r\n\r\n```js\r\n{\r\n    \"languageCode\": \"en-gb\",\r\n    \"variationsRelativePath\": \"languages\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"landing.htm\",\r\n            \"variation\": \"landing.json\"\r\n        },\r\n        \"/home/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\"\r\n        },\r\n        \"/accueil/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\",\r\n            \"languageCode\": \"fr-fr\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : Dans cet exemple j'ai décidé de me passer d'un fichier de variation commune, car je n'ai pas précisé de* ***commonVariation***. *J'ai également totalement arbitrairement décidé de renommer mon dossier* ***variations*** *en* ***languages***.\r\n\r\navec les fichiers suivants :\r\n\r\n```\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nlanguages/\r\n— landing.json\r\n— en-gb\r\n—— home.json\r\n— fr-fr\r\n—— home.json\r\ntemplates/\r\n— landing.htm\r\n— home.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"<%= languageCode %>\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><%= specific.titlePage %></title>\r\n    </head>\r\n    <body class=\"<%= specific.classPage %>\">\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/landing.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <select>\r\n        <% for (var i = 0; i < specific.selectLabel.length; i++) { %>\r\n        <option><%= specific.selectLabel[i] %></option>\r\n        <% } %>\r\n    </select>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\n*templates/home.htm*\r\n\r\n```html\r\n    <%- include('head.htm') %>\r\n\r\n    <div>\r\n        <h1><%= specific.titlePage %></h1>\r\n        <%- specific.content %>\r\n    </div>\r\n\r\n    <%- include('foot.htm') %>\r\n```\r\n\r\n*languages/landing.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Landing\",\r\n    \"classPage\": \"landing\",\r\n    \"selectLabel\": [\r\n        \"English\",\r\n        \"Français\"\r\n    ]\r\n}\r\n```\r\n\r\n*languages/en-gb/home.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Welcome\",\r\n    \"classPage\": \"home\",\r\n    \"content\": \"<p>This is a home page.</p>\"\r\n}\r\n```\r\n\r\n*languages/fr-fr/home.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Bienvenue\",\r\n    \"classPage\": \"home\",\r\n    \"content\": \"<p>C'est la page d'accueil.</p>\"\r\n}\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/home/*\r\n- *http://localhost/accueil/*\r\n\r\n*Note : Par défaut c'est le* ***languageCode*** *racine qui conditionne la langue d'affichage du site. Cependant, spécifiquement par page on peut changer la langue avec également le* ***languageCode***. *Il faut également savoir que dès que le site ou une page à un* ***languageCode*** *dans la configuration, ses fichiers de variations doivent être placées dans un sous répertoire portant le nom du* ***languageCode***.\r\n\r\n\r\n#### Utiliser seulement les variations avec le multilingue actif ####\r\n\r\nVous avez peut-être constaté dans l'exemple précédent que le fichier `landing.json` n'était pas dans le dossier `en-gb/` ou `fr-fr/`. Cela est tout à fait possible et signifie qu'il sera utilisé dans les langues qui ne le possèdent pas dans leur dossier.\r\n\r\nAussi, quand un `languageCode` est précisé, NodeAtlas part d'abord chercher la valeur dans le fichier du dossier correspondant. Si celle-ci n'y ai pas, alors il part la chercher dans le dossier parent (celui utilisé en standard pour les variations sans multilingue).\r\n\r\nCela va vous permettre par exemple de manager la langue maître directement dans le dossier de variation. Ainsi avec l'exemple suivant :\r\n\r\n```\r\n...\r\nvariations/\r\n— common.json\r\n— home.json\r\n— fr-fr\r\n—— common.json\r\n—— home.json\r\n...\r\n```\r\n\r\nvous pouvez\r\n\r\n- gérer la version `en-gb` directement à la racine de `variations/` (comme NodeAtlas ne trouve rien dans `en-gb` il utilise alors les valeurs des fichiers racines) et\r\n- gérer la version `fr-fr` dans le dossier `fr-fr/`,\r\n\r\nainsi, si une phrase n'est pas encore traduite dans un fichier `fr-fr`, au lieu de renvoyer une erreur, NodeAtlas renverra la version racine, soit la version `en-gb`.\r\n\r\n\r\n#### À chaque langue sa configuration ####\r\n\r\nVous pouvez également décider de faire tourner chaque langue dans un « webconfig.json » différent. Avec l'ensemble de fichier suivant :\r\n\r\n```\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nvariations/\r\n— landing.json\r\n— en-gb\r\n—— home.json\r\n—— members.json\r\n— fr-fr\r\n—— home.json\r\n—— members.json\r\ntemplates/\r\n— landing.htm\r\n— home.htm\r\n— members.htm\r\nwebconfig.json\r\nwebconfig.en-gb.json\r\nwebconfig.fr-fr.json\r\n```\r\n\r\nvous pourriez avoir les « webconfig.json » suivant :\r\n\r\n*webconfig.json*\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"landing.htm\",\r\n            \"variation\": \"landing.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*webconfig.en-gb.json*\r\n\r\n```js\r\n{\r\n    \"httpPort\": 81,\r\n    \"urlRelativeSubPath\": \"english\",\r\n    \"languageCode\": \"en-gb\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\"\r\n        },\r\n        \"/members-list/\": {\r\n            \"template\": \"members.htm\",\r\n            \"variation\": \"members.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*webconfig.fr-fr.json*\r\n\r\n```js\r\n{\r\n    \"httpPort\": 82,\r\n    \"urlRelativeSubPath\": \"francais\",\r\n    \"languageCode\": \"fr-fr\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\"\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\",\r\n            \"variation\": \"members.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net avoir accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost:81/english/*\r\n- *http://localhost:81/english/*\r\n- *http://localhost:81/english/members-list/*\r\n- *http://localhost:82/francais/*\r\n- *http://localhost:82/francais/liste-des-membres/*\r\n\r\nIl est ensuite possible de faire du reverse proxy avec [Bouncy](#proxy) (par exemple) pour ramener l'ensemble des urls sur le port 80 afin d'obtenir :\r\n\r\n- *http://www.website.ext/*\r\n- *http://www.website.ext/english/*\r\n- *http://www.website.ext/english/*\r\n- *http://www.website.ext/english/members-list/*\r\n- *http://www.website.ext/francais/*\r\n- *http://www.website.ext/francais/liste-des-membres/*\r\n\r\n\r\n\r\n### Utiliser NodeAtlas pour générer des assets HTML ###\r\n\r\n#### Générer des assets HTML ####\r\n\r\nAvec la configuration suivante il est possible de générer des assets HTML du rendu de chaque page dans un fichier associé. Le fichier sera (re)créé à chaque affichage de la page dans votre navigateur.\r\n\r\n```js\r\n{\r\n    \"htmlGenerateBeforeResponse\": true,\r\n    \"generatesRelativePath\": \"generates\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"generate\": \"/index.html\"\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\",\r\n            \"generate\": \"/members/list.html\"\r\n        },\r\n        \"/liste-des-membres/?foo=bar\": {\r\n            \"template\": \"members.htm\",\r\n            \"generate\": false\r\n        },\r\n        \"/no/generate/property/\": {\r\n            \"template\": \"members.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net l'ensemble de fichiers suivant :\r\n\r\n```\r\n{\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\ngenerates/\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n}\r\n```\r\n\r\non peut créer physiquement les assets :\r\n\r\n```\r\n{\r\ngenerates/\r\n— index.html\r\n— members/\r\n—— list.html\r\n— no/\r\n—— generate/\r\n——— property <== Ceci est un fichier\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n}\r\n```\r\n\r\nen se rendant aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n- *http://localhost/no/generate/property/*\r\n\r\n*Note : Il n'y a pas de génération pour « /liste-des-membres/?foo=bar » car `generate` est à `false`. Utilisez cette valeur pour ignorer des routes à la génération.*\r\n\r\nLa génération s'enclenche quand on affiche la page uniquement parce que ***htmlGenerateBeforeResponse*** existe et est à ***true***. S'il est passé à ***false*** (ou enlevé) le seul moyen de générer toutes les pages du site sera via la commande `node </path/to/>node-atlas/server.js --generate` qui génèrera toutes les pages d'un coup uniquement si le dossier de `generatesRelativePath` existe. Bien entendu dans tous les cas cette commande marche et permet de régénérer toutes les pages suite à un changement telle qu'une modification dans un composant appelé sur toutes les pages.\r\n\r\nDe plus avec `--generate`, l'intégralité du dossier `assetsRelativePath` (dossier des fichiers publiques) sera copié dans le dossier `generatesRelativePath` si les deux dossier n'ont pas un chemin identique, et que `generatesRelativePath` existe. Cela vous permet réellement d'obtenir en sortie dans le dossier de génération des pages « stand-alone » avec l'intégralité des fichiers auxquelles elles font appel (CSS / JS / Images, etc.).\r\n\r\nVous pouvez également désactiver la génération, même si un dossier `generatesRelativePath` existe dans les dossiers, avec `htmlGenerateEnable` à `false`.\r\n\r\n*Note : Si* ***generatesRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des générations est bien* ***generates/***. ***generatesRelativePath*** *est donc utile seulement pour changer le nom/chemin répertoire.*\r\n\r\n\r\n#### Générer un site sans partie serveur ####\r\n\r\nIl est également possible de manager la création d'un site en simple page HTML avec la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"languageCode\": \"fr-fr\",\r\n    \"enableIndex\": true,\r\n    \"htmlGenerateBeforeResponse\": true,\r\n    \"generatesRelativePath\": \"../HTML/\",\r\n    \"assetsRelativePath\": \"../HTML/\",\r\n    \"routes\": {\r\n        \"/cv.html\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/en/cv.html\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\",\r\n            \"languageCode\": \"en\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net l'ensemble de fichiers suivant :\r\n\r\n```\r\nHTML/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\nengine/\r\n— variations/\r\n—— fr-fr/\r\n——— index.json\r\n—— en/\r\n——— index.json\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nÀ l'adresse *http://localhost/* s'affichera la liste des pages composants votre site (grâce à **enableIndex** à **true**).\r\n\r\nIl ne restera plus qu'à, une fois votre travail terminé, admirer votre site HTML dans le dossier :\r\n\r\n```\r\nHTML/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\n— cv.html\r\n— en/\r\n—— cv.html\r\n```\r\n\r\n\r\n\r\n### Utiliser NodeAtlas pour faire tourner un site (partie Back-end) ###\r\n\r\nVous pouvez soit utiliser un contrôleur unique pour tout le site et/ou également des contrôleurs par template et variation.\r\n\r\nPour le contrôleur maître, utilisez par exemple cette configuration :\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"controllersRelativePath\": \"controllers\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/categories/\": {\r\n            \"template\": \"categories.htm\",\r\n            \"variation\": \"categories.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec cet ensemble de fichier\r\n\r\n```\r\nvariations/\r\n— index.json\r\n— categories.json\r\ncontrollers/\r\n— common.js\r\nmodels/\r\n— Article.js\r\n— Category.js\r\ntemplates/\r\n— index.htm\r\n— categories.htm\r\nwebconfig.json\r\n```\r\n\r\nEt le fichier « common.js » contenant par exemple :\r\n\r\n- De quoi charger des modules supplémentaires à NodeAtlas.\r\n- De quoi configurer les modules supplémentaires.\r\n\r\n```js\r\n// Création d'un objet global au fichier.\r\nvar website = {};\r\n\r\n\r\n\r\n/**********************/\r\n/* Chargement modules */\r\n/**********************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    // Chargement des modules pour ce site dans l'objet NodeAtlas.\r\n    publics.loadModules = function () {\r\n\t\t// Récupérer l'instance « NodeAtlas » du moteur.\r\n    \tvar NA = this;\r\n\r\n        // Associations de chaque module pour y avoir accès partout.\r\n        NA.modules.cookie = require('cookie');\r\n        NA.modules.mongoose = require('mongoose');\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/*****************************/\r\n/* Configuration des modules */\r\n/*****************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    var privates = {};\r\n\r\n    // Exemple d'utilisation de MongoDB et Mongoose.\r\n    privates.mongooseInitialization = function (mongoose, callback) {\r\n        // Connexion à la base « blog ».\r\n        mongoose.connect('mongodb://127.0.0.1:27017/blog', function (error) {\r\n            if (error) {\r\n                console.log(\"Database 'mongodb://127.0.0.1:27017/blog' is not accessible.\");\r\n                process.kill(process.pid);\r\n            }\r\n\r\n            // Next.\r\n            callback(mongoose);\r\n        });\r\n\r\n        // Gestion de connexion.\r\n        mongoose.connection.on('error', function (error) {\r\n            console.log('Erreur pour la connexion par défaut à Mongoose : ' + error);\r\n        });\r\n\r\n        // Gestion des déconnexion.\r\n        mongoose.connection.on('disconnected', function () {\r\n            console.log('Déconnexion de Mongoose.');\r\n        });\r\n        process.on('SIGINT', function (error) {\r\n            mongoose.connection.close(function () {\r\n                console.log(\"Déconnexion de Mongoose en raison de l'arrêt de l'app.\");\r\n                process.exit(0);\r\n            });\r\n        });\r\n    };\r\n\r\n    // Mise à disposition des Schémas Mongoose.\r\n    privates.mongooseSchemas = function (mongoose) {\r\n        publics.schema = {};\r\n\r\n        // Chargement des Schémas.\r\n        publics.schema.article = require('../models/Article');\r\n        publics.schema.category = require('../models/Category');\r\n\r\n        // Mise à disposition des Schémas.\r\n        mongoose.model('article', website.schema.article, 'article');\r\n        mongoose.model('category', website.schema.category, 'category');\r\n    };\r\n\r\n    // Exemple d'utilisation de Socket.IO.\r\n    privates.socketIoInitialisation = function (socketio, NA, callback) {\r\n        var optionIo = (NA.webconfig.urlRelativeSubPath) ? { path: NA.webconfig.urlRelativeSubPath + '/socket.io', secure: ((NA.webconfig.httpSecure) ? true : false) } : undefined,\r\n            io = socketio(NA.server, optionIo),\r\n            cookie = NA.modules.cookie,\r\n            cookieParser = NA.modules.cookieParser;\r\n\r\n        // Synchronisation des Sessions avec Socket.IO.\r\n        io.use(function(socket, next) {\r\n            var handshakeData = socket.request;\r\n\r\n            // Fallback si les cookies ne sont pas gérés.\r\n            if (!handshakeData.headers.cookie) {\r\n                return next(new Error('Cookie de session requis.'));\r\n            }\r\n\r\n            // Transformation de la String cookie en Objet JSON.\r\n            handshakeData.cookie = cookie.parse(handshakeData.headers.cookie);\r\n\r\n            // Vérification de la signature du cookie.\r\n            handshakeData.cookie = cookieParser.signedCookies(handshakeData.cookie, NA.webconfig.session.secret);\r\n\r\n            // Garder à porté l'ID de Session.\r\n            handshakeData.sessionID = handshakeData.cookie[NA.webconfig.session.key];\r\n\r\n            // Accepter le cookie.\r\n            NA.sessionStore.load(handshakeData.sessionID, function (error, session) {\r\n                if (error || !session) {\r\n                    return next(new Error('Aucune session récupérée.'));\r\n                } else {\r\n                    handshakeData.session = session;\r\n                    next();\r\n                }\r\n            });\r\n        });\r\n\r\n        // Suite.\r\n        callback(io);\r\n    };\r\n\r\n    // Ajout d'évênements d'écoute pour un controller spécifique « index.js » (voir exemple dans le fichier d'après).\r\n    privates.socketIoEvents = function (io, NA) {\r\n        var params = {};\r\n\r\n        params.io = io;\r\n\r\n        // Évênements pour la page index (voir exemple dans le fichier d'après).\r\n        require('./index').asynchrone.call(NA, params);\r\n    };\r\n\r\n    // Configuration de tous les modules.\r\n    publics.setConfigurations = function (callback) {\r\n        var NA = this,\r\n        \tmongoose = NA.modules.mongoose,\r\n            socketio = NA.modules.socketio;\r\n\r\n        // Initialisation de Mongoose.\r\n        privates.mongooseInitialization(mongoose, function (mongoose) {\r\n\r\n            // Injection de Schémas dans Mongoose.\r\n            privates.mongooseSchemas(mongoose);\r\n\r\n            // Initialisation de Socket IO.\r\n            privates.socketIoInitialisation(socketio, NA, function (io) {\r\n\r\n                // Écoute d'action Socket IO.\r\n                privates.socketIoEvents(io, NA);\r\n\r\n                // Étapes suivante du moteur.\r\n                callback();\r\n            });\r\n        });\r\n\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/*******************************/\r\n/* Interception des Variations */\r\n/*******************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    // On intervient juste avant l'assemblage complet EJS.\r\n    publics.changeVariation = function (params, mainCallback) {\r\n        var variation = params.variation;\r\n\r\n        // Ici on modifie les variables de variations.\r\n        // voir exemple dans le fichier d'après.\r\n\r\n        // On ré-injecte les modifications.\r\n        mainCallback(variation);\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/***********************************************************/\r\n/* Interception de la sortie HTML pour jQuery côté serveur */\r\n/***********************************************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    // On intervient juste avant le renvoi HTML auprès du client (response).\r\n    publics.changeDom = function (params, mainCallback) {\r\n        var dom = params.dom;\r\n\r\n        // Ici on peut manipuler le DOM côté serveur avant retour client.\r\n        // voir exemple dans le fichier d'après.\r\n\r\n        // On ré-injecte les modifications.\r\n        mainCallback(dom);\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/*************************************************************/\r\n/* Mise à dispositions des fonction pour le moteur NodeAtlas */\r\n/*************************************************************/\r\n\r\nexports.loadModules = website.loadModules;\r\nexports.setConfigurations = website.setConfigurations;\r\nexports.changeVariation = website.changeVariation;\r\nexports.changeDom = website.changeDom;\r\n```\r\n\r\nAu lieu de se servir de `changeVariation` et `changeDom` dans le fichier `common.js` effectif pour tout le site, on peut utiliser des contrôleurs spécifiques par page. La configuration précédente devient alors :\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"controllersRelativePath\": \"controllers/\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"controller\": \"index.js\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/categories/\": {\r\n            \"template\": \"categories.htm\",\r\n            \"controller\": \"categories.js\",\r\n            \"variation\": \"categories.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec cet ensemble de fichier\r\n\r\n```\r\nvariations/\r\n— index.json\r\n— categories.json\r\ncontrollers/\r\n— modules/\r\n—— list-of-article.js/\r\n— common.js\r\n- index.js\r\n- categories.js\r\nmodels/\r\n— Article.js\r\n— Category.js\r\ntemplates/\r\n— index.htm\r\n— categories.htm\r\nwebconfig.json\r\n```\r\n\r\navec un fichier « index.js » contenant par exemple :\r\n\r\n- De quoi modifier les variations dynamiquement avant affichage.\r\n- De quoi faire des modifications jQuery côté serveur.\r\n- De quoi faire des échanges asynchrones avec Socket.IO.\r\n\r\n```js\r\nvar website = {};\r\n\r\n\r\n\r\n/*******************************/\r\n/* Interception des Variations */\r\n/*******************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    var privates = {};\r\n\r\n    // On charge une fonction ou un ensemble de fonctions.\r\n    privates.listOfArticles = require('./modules/list-of-articles');\r\n\r\n    // On intervient juste avant l'assemblage complet EJS.\r\n    publics.changeVariation = function (params, mainCallback) {\r\n        var NA = this,\r\n        \tvariation = params.variation,\r\n            mongoose = NA.modules.mongoose,\r\n            Article = mongoose.model('article');\r\n\r\n\r\n        // Interception possible de toutes les variables de « variations/common.js ».\r\n        console.log(variation.common.title); // Renvoi le titre stocké dans « variations/common.js ».\r\n        variation.common.title = \"Nouveau title\"; // Redéfini un titre.\r\n        console.log(variation.common.title); // Renvoi « Nouveau title » et est accessible côté template via `<%= common.title %>`.\r\n\r\n        // Interception possible de toutes les variables de « variations/index.js » (car on est dans le spécific « index.js »).\r\n        variation.specific.title = \"Nouveau title\"; // Redéfini un titre qui est accessible côté template via `<%= specific.title %>`.\r\n        variation.specific.newProperty = \"Nouvelle propriété\"; // Défini une propriété n'existant pas initialement dans le fichier de variation qui est accessible côté template via `<%= specific.newProperty %>`.\r\n\r\n        // Interception possible de la configuration de la page courante.\r\n        console.log(variation.currentRoute); // Retourne « / » pour « index.js », « /categories/ » pour « categories.js », « /categories/:category/ » pour « category-detail.js », etc.\r\n\r\n        // On test une variable créer de toute pièce dans le webconfig.\r\n        if (variation.webconfig._websiteIsClosed) {\r\n            // La page sera en 404.\r\n            variation.currentRouteParameters.statusCode = 404;\r\n        } else {\r\n            // La page sera en 200.\r\n            variation.currentRouteParameters.statusCode = 200;\r\n        }\r\n\r\n        // Création d'un nouvel ensemble de variation dynamique pour les templates.\r\n        variation.backend = {}; // Propriétés accessibles via « <%= backend.<propriétés> %> ».p\r\n\r\n        privates.listOfArticles(Article, function (listOfArticles) {\r\n\r\n            // Disponibilité des données des articles côté template.\r\n            variation.backend.articles = listOfArticles; // « <%= backend.articles.<propriétés> %> ».\r\n\r\n            // On ré-injecte les modifications.\r\n            mainCallback(variation);\r\n        });\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/***********************************************************/\r\n/* Interception de la sortie HTML pour jQuery côté serveur */\r\n/***********************************************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    // On intervient juste avant le renvoi HTML auprès du client (response).\r\n    publics.changeDom = function (params, mainCallback) {\r\n        var NA = params.NA,\r\n        \tdom = params.dom,\r\n            cheerio = NA.modules.cheerio, // Récupération de jsdom pour parcourir le DOM avec jQuery.\r\n            $ = cheerio.load(dom); // On charge les données pour les manipuler comme un DOM.\r\n\r\n        // Après tous les h2 de la sortie HTML « dom »,\r\n        $(\"h2\").each(function () {\r\n            var $this = $(this);\r\n\r\n            // ...on créé une div,\r\n            $this.after(\r\n                // ... on injecte le contenu du h2 dans la div,\r\n                $(\"<div>\").html($this.html())\r\n            );\r\n            // ...et supprime le h2.\r\n            $this.remove();\r\n        });\r\n\r\n        // On re-créer une nouvelle sortie HTML avec nos modifications.\r\n        dom = $.html();\r\n\r\n        // On ré-injecte les modifications.\r\n        mainCallback(dom);\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/***********************************************/\r\n/* Gestion des évênements Socket.IO asynchrone */\r\n/***********************************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    // Intégralité des actions Websocket possible pour ce template.\r\n    publics.asynchrone = function (params) {\r\n        var NA = this,\r\n        \tio = params.io,\r\n            mongoose = params.NA.modules.mongoose,\r\n            marked = params.NA.modules.marked,\r\n            Article = mongoose.model('article');\r\n\r\n        // Dès qu'on a un lien valide entre le client et notre back...\r\n        io.sockets.on('connection', function (socket) {\r\n            var sessionID = socket.request.sessionID,\r\n                session = socket.request.session;\r\n\r\n            // ...rester à l'écoute de la demande « create-article-button »...\r\n            socket.on('create-article-button', function (data) {\r\n\r\n                // ...et répondre à cette demande en créant un nouvelle article si elle vient\r\n                // avec les information envoyées via « data ».\r\n                var article = new Article({\r\n                    _id: mongoose.Types.ObjectId(),\r\n                    title: data.title,\r\n                    urn: data.urn,\r\n                });\r\n\r\n                // Si l'utilisateur est connecté.\r\n                if (session.account) {\r\n\r\n                    // ...on sauve l'article en base.\r\n                    article.save(function (error) {\r\n                        if (error) {\r\n                            throw error;\r\n                        }\r\n\r\n                        // Et on répond à tous les clients avec un jeu de donnée dans data.\r\n                        io.sockets.emit('create-article-button', data);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/*************************************************************/\r\n/* Mise à dispositions des fonction pour le moteur NodeAtlas */\r\n/*************************************************************/\r\n\r\nexports.changeVariation = website.changeVariation;\r\nexports.changeDom = website.changeDom;\r\nexports.asynchrone = website.asynchrone; // Utilisé non pas par « NodeAtlas » mais par « common.js » (voir fichier précédent).\r\n```\r\n\r\n*Note : Si* ***controllersRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des controlleurs est bien* ***controllers***. ***controllersRelativePath*** *est donc utile seulement pour changer le nom/chemin du répertoire.*\r\n\r\n\r\n\r\n### Génerer des fragments de page par retour AJAX/Websocket ###\r\n\r\nUne fois qu'une page est génerée et envoyée au client, le serveur ne sait pas, quand une requête AJAX lui parvient de qu'elle chemin il s'agit. Il est donc incapable de vous renvoyer un composant HTML avec les bonnes valeurs de variation dedans ou même la bonne langue.\r\n\r\nLa première étape est de baliser votre code HTML. Par exemple, il pourrait contenir ceci :\r\n\r\n```html\r\n...\r\n<html lang=\"<%= languageCode %>\">\r\n...\r\n<body data-variation=\"<%= currentRouteParameters.variation %>\">\r\n...\r\n```\r\n\r\nce qui génèrerait ceci :\r\n\r\n```html\r\n...\r\n<html lang=\"fr-fr\">\r\n...\r\n<body data-variation=\"index\">\r\n...\r\n```\r\n\r\npuis, quand votre JavaScript fera une requête AJAX via jQuery, ou comme ici, une requête socket.io, il utilisera ses paramètres :\r\n\r\n```js\r\n...\r\npublics.socket.emit(\"load-section-a\", {\r\n    lang: $(\"html\").attr('lang'),\r\n    variation: $(\"body\").data('variation')\r\n});\r\n...\r\n```\r\n\r\npour que le serveur récupère les valeurs :\r\n\r\n```js\r\n...\r\nsocket.on('load-section-a', function (data) {\r\n    var result = {},\r\n        currentVariation = {};\r\n\r\n    // On récupère les variations spécifiques dans la bonne langue.\r\n    currentVariation = NA.addSpecificVariation(data.variation, data.lang, currentVariation);\r\n\r\n    // On récupère les variations communes dans la bonne langue.\r\n    currentVariation = NA.addCommonVariation(data.lang, currentVariation);\r\n\r\n    // On récupère le fragment HTML depuis le dossier `componentsRelativePath` et on applique les variations.\r\n    result = NA.newRender(\"section-a.htm\", currentVariation);\r\n\r\n    // On renvoit le résultat pour injection dans le DOM.\r\n    socket.emit('load-sections', result);\r\n});\r\n...\r\n```\r\n\r\ntout ceci grâce à `NA.addSpecificVariation`, `NA.addCommonVariation` et `NA.newRender`.\r\n\r\nSi `data.lang` dans notre exemple est de type `undefined`, alors les fichiers seront cherchés à la racine. Si `currentVariation` est de type `undefined` alors un objet contenant uniquement le scope demandé sera renvoyé.\r\n\r\n\r\n\r\n### Changer les paramètres d'url ###\r\n\r\nPar défaut, si vous utilisez la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ncela est identique à utiliser celle-ci :\r\n\r\n```js\r\n{\r\n    \"httpHostname\": \"localhost\",\r\n    \"httpPort\": 80,\r\n    \"httpSecure\": false,\r\n    \"urlRelativeSubPath\": \"\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net vous pourrez accéder à l'url : *http://localhost/*.\r\n\r\nChangez alors la configuration en ceci :\r\n\r\n```js\r\n{\r\n    \"httpHostname\": \"127.0.0.1\",\r\n    \"httpPort\": 7777,\r\n    \"httpSecure\": true,\r\n    \"urlRelativeSubPath\": \"sub/folder\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\npour accéder à : *https://127.0.0.1:7777/sub/folder/*\r\n\r\n\r\n\r\n### Créer ses propres variables de webconfig ###\r\n\r\nImaginons deux webconfigs dans lesquels nous allons créer nos propres variables comme suit :\r\n\r\n1. « webconfig.json »\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    },\r\n    \"_minified\": \"\"\r\n}\r\n```\r\n\r\n2. « webconfig.prod.json »\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    },\r\n    \"_minified\": \".min\"\r\n}\r\n```\r\n\r\navec cet ensemble de fichiers\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common.min.css\r\n— javascript/\r\n—— common.js\r\n—— common.min.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\net « index.htm » contenant :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common<%= webconfig._minified %>.css\" />\r\n    </head>\r\n    <body>\r\n        <div>Ceci est un test de récupération de ressources minifiées/non-minifiées.</div>\r\n        <script type=\"text/javascript\" src=\"javascript/common<%= webconfig._minified %>.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\nEn lançant (depuis le dossier du site) la commande :\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js\r\n```\r\n\r\nNous aurons à l'adresse « http://localhost/ » la sortie suivante avec les fichiers non minifiés :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.css\" />\r\n    </head>\r\n    <body>\r\n        <div>Ceci est un test de récupération de ressources minifiées/non-minifiées.</div>\r\n        <script type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\nCependant en lançant la commande :\r\n\r\n```\r\n\\> node </path/to/>node-atlas/server.js --webconfig webconfig.prod.json\r\n```\r\n\r\nNous aurons à l'adresse « http://localhost/ » la sortie suivante avec les fichiers minifiés :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.min.css\" />\r\n    </head>\r\n    <body>\r\n        <div>Ceci est un test de récupération de ressources minifiées/non-minifiées.</div>\r\n        <script type=\"text/javascript\" src=\"javascript/common.min.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*Note : Il vaut mieux préfixer ses variables personnelles avec « _ » pour éviter des conflits avec des variables de configuration existantes ou futures.*\r\n\r\n\r\n\r\n### Gérer le routage (Url Rewriting) ###\r\n\r\nBien que vous puissiez paramétrer des urls statiques, vous pouvez également paramétrer une écoute d'url dynamiques !\r\n\r\n#### Standard ###\r\n\r\nAvec la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/liste-des-membres/:member/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nvous pourrez accéder à :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n- *http://localhost/liste-des-membres/toto/*\r\n- *http://localhost/liste-des-membres/bob-eponge99/*\r\n- *http://localhost/liste-des-membres/node-atlas/*\r\n- *http://localhost/liste-des-membres/etc/*\r\n\r\net récupérer les valeurs de `:member` dans le `changeVariation` (common et specific).\r\n\r\n```js\r\nexports.changeVariation = function (params, mainCallback) {\r\n    var variation = params.variation;\r\n\r\n    console.log(variation.params.member);\r\n    // \\> 'toto', 'bob-eponge99', 'node-atlas' ou 'etc'.\r\n\r\n    mainCallback(variation);\r\n}\r\n```\r\n\r\nLes règles de création d'url dynamique sont celles de [Express.js](http://expressjs.com/4x/api.html#req.params).\r\n\r\n#### Expressions Régulières ###\r\n\r\nVous pouvez également activer les expressions régulières pour un chemin précis avec `regExp`. Si celui-ci vaut `true`, le précédent mode ne fonctionne plus et vous passez en mode Expression Régulière. Si `regExp` est une chaine de caractère, celle-ci fait office de flag (g, i, m ou y).\r\n\r\nVoyez la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/liste-des-membres/([-a-z0-9]+)/?\": {\r\n            \"template\": \"members.htm\",\r\n            \"regExp\": \"g\"\r\n        },\r\n        \"/liste-des-membres/?\": {\r\n            \"template\": \"members.htm\",\r\n            \"regExp\": true\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nvous pourrez accéder à :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/* _(ou *https://localhost/liste-des-membres*)_\r\n- *http://localhost/liste-des-membres/toto/* _(ou *https://localhost/liste-des-membres/toto*)_\r\n- *http://localhost/liste-des-membres/bob-eponge99/* _(ou *https://localhost/liste-des-membres/bob-eponge99*)_\r\n- *http://localhost/liste-des-membres/node-atlas/* _(ou *https://localhost/liste-des-membres/node-atlas*)_\r\n- *http://localhost/liste-des-membres/etc/* _(ou *https://localhost/liste-des-membres/etc*)_\r\n\r\net récupérer les valeurs de `([-a-z0-9]+)` dans le `changeVariation` (common et specific).\r\n\r\n```js\r\nexports.changeVariation = function (params, mainCallback) {\r\n    var variation = params.variation;\r\n\r\n    if (variation.params && variation.params[0]) { variation.params.member = variation.params[0]; }\r\n    // variation.params[1] pour le deuxième match, etc...\r\n\r\n    console.log(variation.params.member);\r\n    // \\> 'toto', 'bob-eponge99', 'node-atlas' ou 'etc'.\r\n\r\n    mainCallback(variation);\r\n}\r\n```\r\n\r\nLes règles de création d'url dynamique avec `regExp` sont celles des [RegExp JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\r\n\r\n#### Routage dans un fichier partagé ####\r\n\r\nAfin de ne pas ré-écrire une longue liste de route dans un fichier `webconfig.json` à destination de votre environnement de développement et `webconfig.prod.json` à destination de votre environnement de production, vous pouvez mutaliser la déclaration des routes dans un fichier de votre choix. Par convention, c'est le fichier `routes.json`.\r\n\r\nPar exemple :\r\n\r\nL'ensemble de fichier suivant\r\n\r\n```\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\navec `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net avec `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\npourrait devenir l'ensemble de fichier suivant\r\n\r\n```\r\ntemplates/\r\n— index.htm\r\nroutes.json\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\navec `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"routes\": \"routes.json\"\r\n}\r\n```\r\n\r\navec `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"routes\": \"routes.json\"\r\n}\r\n```\r\n\r\net `routes.json`\r\n\r\n```json\r\n{\r\n    \"/\": {\r\n        \"template\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\n*Note : Vous pouvez vous créer plusieurs fichier de route comme `routes.en.json` et `routes.fr.json` et associer chacun d'eux dans un ensemble de webconfig paramètrer pour faire tourner un site dans diverses langues.*\r\n\r\n\r\n\r\n### Gérer les pages inexistantes ###\r\n\r\n#### Écouter toutes les urls, même les adresses du dossier `assetsRelativePath` ####\r\n\r\nPour afficher une page personnalisée quand une ressource n'est pas trouvée il faut :\r\n\r\n1. Préparer une page 404.\r\n2. Remplir le paramètre `pageNotFound` avec comme `value` la `key` de la page 404 préparée.\r\n\r\nVoyez l'exemple ci-dessous :\r\n\r\n```js\r\n{\r\n    \"pageNotFound\": \"/pages-inexistantes/\",\r\n    \"routes\": {\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/pages-inexistantes/\": {\r\n            \"template\": \"error.htm\",\r\n            \"statusCode\": 404\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nvous pourrez accéder à :\r\n\r\n- *http://localhost/cette-page-n-existe-pas.html*\r\n- *http://localhost/elle/non/plus/*\r\n- *http://localhost/etc*\r\n\r\n#### Page d'erreur multilingue ####\r\n\r\nIl vous suffit de créer une nouvelle route finissant par `*` dans la langue souhaitée.\r\n\r\nVoyez l'exemple ci-dessous :\r\n\r\n```js\r\n{\r\n    \"pageNotFound\": \"/pages-inexistantes/\",\r\n    \"languageCode\": \"fr-fr\",\r\n    \"routes\": {\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\",\r\n            \"variation\": \"members.json\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/pages-inexistantes/\": {\r\n            \"template\": \"error.htm\",\r\n            \"variation\": \"error.json\",\r\n            \"statusCode\": 404\r\n        },\r\n        \"/english/list-of-members/\": {\r\n            \"template\": \"members.htm\",\r\n            \"languageCode\": \"en-gb\",\r\n            \"variation\": \"members.json\"\r\n        },\r\n        \"/english/\": {\r\n            \"template\": \"index.htm\",\r\n            \"languageCode\": \"en-gb\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/english/*\": {\r\n            \"template\": \"error.htm\",\r\n            \"languageCode\": \"en-gb\",\r\n            \"variation\": \"error.json\",\r\n            \"statusCode\": 404\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Gérer les redirections ###\r\n\r\nPour aller à une autre adresse (redirection 301 ou 302) quand vous arrivez à une url il faut utiliser le paramètre `redirect`.\r\n\r\n*Note : si vous ne précisez pas un `statusCode`, la redirection ne se fera pas. Le `statusCode` est obligatoire.*\r\n\r\n#### En statique ####\r\n\r\nVoyez l'exemple ci-dessous :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/liste-des-membres\": {\r\n            \"redirect\": \"/liste-des-membres/\",\r\n            \"statusCode\": 301\r\n        },\r\n        \"/aller-sur-node-atlas/\": {\r\n            \"redirect\": \"http://haeresis.github.io/NodeAtlas/\",\r\n            \"statusCode\": 302\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nVous serez redirigé :\r\n\r\n- sur `http://localhost/liste-des-membres/` quand vous accéderez à `http://localhost/liste-des-membres` avec une entête _redirection permanente_.\r\n- sur `http://haeresis.github.io/NodeAtlas/` quand vous accéderez à `http://localhost/aller-sur-node-atlas/` avec une entête _redirection temporaire_.\r\n\r\n#### En dynamique ####\r\n\r\nVoyez l'exemple ci-dessous :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/liste-des-membres/:member/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/liste-des-membres/:member\": {\r\n            \"redirect\": \"/membres/:member/\",\r\n            \"statusCode\": 301\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nVous serez redirigé sur `http://localhost/liste-des-membres/haeresis/` quand vous accéderez à `http://localhost/liste-des-membres/haeresis` avec une entête _redirection permanente_.\r\n\r\n#### Avec expressions régulières ####\r\n\r\nVoyez l'exemple ci-dessous :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/membres/([-a-z0-9]+)/\": {\r\n            \"template\": \"members.htm\",\r\n            \"regExp\": true\r\n        },\r\n        \"/liste-des-membres/([-a-z0-9]+)/\": {\r\n            \"redirect\": \"/membres/$0/\",\r\n            \"statusCode\": 301,\r\n            \"regExp\": true\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nVous serez redirigé sur `http://localhost/membres/haeresis/` quand vous accéderez à `http://localhost/liste-des-membres/haeresis/` avec une entête _redirection permanente_.\r\n\r\nPour le second *match* utilisez $1, pour le troisième $2, etc.\r\n\r\n\r\n\r\n### Faire tourner le site en HTTPs ###\r\n\r\nIl est très simple de faire tourner une instance de NodeAtlas avec le protocol HTTPs. Pour cela il suffit de créer, par exemple un dossier `security` dans lequel vous allez placer vos fichier `server.key` et `server.crt` afin d'alimenter le protocol.\r\n\r\nIl ne vous reste plus qu'à utiliser la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"httpSecure\": true,\r\n    \"httpSecureRelativeKeyPath\": \"security/server.key\"\r\n    \"httpSecureRelativeCertificatePath\": \"security/server.crt\"\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nVous pouvez également, si —comme c'est le cas ici— vos deux fichiers Key et Certificate portent le même nom, utiliser cette configuration :\r\n\r\n```js\r\n{\r\n    \"httpSecure\": \"security/server\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Minifier les CSS/JS ###\r\n\r\nVous pouvez automatiquement générer des fichiers CSS et JS minifiés et offusqués en créant des Bundles en référençant les groupes de fichiers d'entré par leur chemin d'accès et le chemin du fichier de sortie. Vous pouvez bien entendu en faire autant que vous le souhaitez. La gérération des fichiers se fait à chaque démarrage de NodeAtlas que ce soit en tant que serveur ou via la commande `--generate` pour peut qu'un Bundle existe dans le Webconfig.\r\n\r\n#### Créer des Bundles ####\r\n\r\nAvec la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        },\r\n        \"stylesheets\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net l'ensemble de fichier suivant :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n— javascript/\r\n—— modernizr.js\r\n—— yepnot.js\r\n—— html5Shiv.js\r\n—— jquery.js\r\n—— jquery-ui.js\r\n—— prettify.js\r\n—— prettify/run_prettify.js\r\n—— components/extended-format-date.js\r\n—— common.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nvous obtiendrez les nouveaux fichiers suivant :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n—— common.min.css     <= nouveau fichier\r\n— javascript/\r\n—— modernizr.js\r\n—— yepnot.js\r\n—— html5Shiv.js\r\n—— jquery.js\r\n—— jquery-ui.js\r\n—— prettify.js\r\n—— prettify/run_prettify.js\r\n—— components/extended-format-date.js\r\n—— common.js\r\n—— boot.min.js        <= nouveau fichier\r\n—— framework.min.js   <= nouveau fichier\r\n—— common.min.js      <= nouveau fichier\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\n#### Bundles dans un fichier partagé ####\r\n\r\nAfin de ne pas ré-écrire une longue liste de configuration de Bundles dans un fichier `webconfig.json` à destination de votre environnement de développement et `webconfig.prod.json` à destination de votre environnement de production, vous pouvez mutaliser la déclaration des fichiers dans un fichier de votre choix. Par convention, c'est le fichier `bundles.json`.\r\n\r\nPar exemple :\r\n\r\nL'ensemble de fichier suivant\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n— javascript/\r\n—— modernizr.js\r\n—— yepnot.js\r\n—— html5Shiv.js\r\n—— jquery.js\r\n—— jquery-ui.js\r\n—— prettify.js\r\n—— prettify/run_prettify.js\r\n—— components/extended-format-date.js\r\n—— common.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\navec `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        },\r\n        \"stylesheets\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net avec `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        },\r\n        \"stylesheets\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\npourrait devenir l'ensemble de fichier suivant\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n— javascript/\r\n—— modernizr.js\r\n—— yepnot.js\r\n—— html5Shiv.js\r\n—— jquery.js\r\n—— jquery-ui.js\r\n—— prettify.js\r\n—— prettify/run_prettify.js\r\n—— components/extended-format-date.js\r\n—— common.js\r\ntemplates/\r\n— index.htm\r\nbundles.json\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\navec `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"bundles\": \"bundles.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"bundles\": \"bundles.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net `bundles.json`\r\n\r\n```json\r\n{\r\n    \"javascript\": {\r\n        \"javascript/boot.min.js\": [\r\n            \"javascript/modernizr.js\",\r\n            \"javascript/yepnot.js\",\r\n            \"javascript/html5Shiv.js\"\r\n        ],\r\n        \"javascript/framework.min.js\": [\r\n            \"javascript/jquery.js\",\r\n            \"javascript/jquery-ui.js\",\r\n            \"javascript/prettify.js\",\r\n            \"javascript/prettify/run_prettify.js\"\r\n        ],\r\n        \"javascript/common.min.js\": [\r\n            \"javascript/components/extended-format-date.js\",\r\n            \"javascript/common.js\"\r\n        ]\r\n    },\r\n    \"stylesheets\": {\r\n        \"stylesheets/common.min.css\": [\r\n            \"stylesheets/common.css\",\r\n            \"stylesheets/common-min780.css\",\r\n            \"stylesheets/common-min1160.css\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n*Note : il est possible de désactiver les Bundles en ne les incluant pas dans le `webconfig` en question.*\r\n\r\n#### Désactiver des Bundles ####\r\n\r\nIl est également possible de ne pas executer la minification au démarage d'un site web avec NodeAtlas avec les propriétés `\"stylesheetsBundlesEnable\": false` et `\"javascriptBundlesEnable\": false` pour chaque type de Bundle.\r\n\r\n```js\r\n{\r\n    \"stylesheetsBundlesEnable\": false,\r\n    \"javascriptBundlesEnable\": false,\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        },\r\n        \"stylesheets\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : si vos bundles sont dans un fichier partagé, vous pouvez également les désactiver simplement en retirand la ligne `\"bundles\": \"bundles.json\"`.*\r\n\r\n#### Ré-générer les Bundles avant chaque rendu de page ####\r\n\r\nDe manière à toujours tester vos page avec les fichiers minifiés, vous pouvez demander à ce qu'ils soient régénérés avant chaque affichage de page avec les propriétés `\"stylesheetsBundlesBeforeResponse\": true` et `\"javascriptBundlesBeforeResponse\": true` pour chaque type de Bundle.\r\n\r\n```js\r\n{\r\n    \"stylesheetsBundlesBeforeResponse\": false,\r\n    \"javascriptBundlesBeforeResponse\": false,\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        },\r\n        \"stylesheets\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : ceci n'est pas conseillé en production car cela ralenti les réponses des pages.*\r\n\r\n\r\n\r\n### Générer les CSS avec Less ###\r\n\r\nVous pouvez utiliser le préprocesseur Less pour créer vos CSS. Le fonctionnement est le suivant : à chaque fois qu'une requête CSS est effectuée, si un équivalent Less existe il est lu et celui-ci génère le CSS. Une fois l'opération effectuée, on renvoi le CSS demandée.\r\n\r\nAvec la structure suivante :\r\n\r\n```\r\nassets/\r\n— stylesheets\r\n—— common.less\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nainsi que le webconfig suivante :\r\n\r\n```js\r\n{\r\n    \"enableLess\": true,\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\net le contenu suivant dans :\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Less Test</title>\r\n        <link rel=\"stylesheet\" href=\"stylesheets/common.css\">\r\n    </head>\r\n    <body>\r\n        <p>Test</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*assets/stylesheets/common.less*\r\n\r\n```css\r\np {\r\n    color: #f00;\r\n}\r\n```\r\n\r\nvous générerez le fichier `assets/stylesheets/common.css` en appelant l'url `http://localhost/` ou `http://localhost/stylesheets/common.css`.\r\n\r\n#### Source Map et Minification ####\r\n\r\nPar défaut, dans l'exemple ci-dessus un fichier `common.css.map` sera généré. Celui-ci permet à votre navigateur de vous indiqué qu'elle ligne du fichier `.less` a généré la propriété CSS de l'élément que vous avez sélectionné dans votre débuggeur.\r\n\r\nCela se désactive avec `enableLess.sourceMap` à `false` :\r\n\r\n```\r\n    \"enableLess\": {\r\n        \"sourceMap\": false\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n```\r\n\r\nVous pouvez également générer des fichiers CSS déjà minifiés avec :\r\n\r\n```\r\n    \"enableLess\": {\r\n        \"compress\": true\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n```\r\n\r\n#### Compiler les Less avec `--generate` ####\r\n\r\nComme les Less sont compilés a la volé, quand le fichier est demandé en http(s), toutes modifications dans le Less demandera de faire tourner le site pour la répercuter dans le CSS. Ensuite seulement vous pourrez minifier vos CSS. Il est possible d'automatiser cette tâche pour ne pas avoir à démarrer le site grâce à `enableLess.less`.\r\n\r\nAvec le `webconfig.json` suivant :\r\n\r\n```js\r\n{\r\n    \"enableLess\": {\r\n        \"less\": [\r\n            \"stylesheets/common.less\",\r\n            \"stylesheets/component-1.less\",\r\n            \"stylesheets/component-2.less\",\r\n            \"stylesheets/component-3.less\"\r\n        ]\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\nou suivante :\r\n\r\n```js\r\n{\r\n    \"enableLess\": {\r\n        \"less\": \"less.json\"\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\navec `less.json` qui contient :\r\n\r\n```js\r\n[\r\n    \"stylesheets/common.less\",\r\n    \"stylesheets/component-1.less\",\r\n    \"stylesheets/component-2.less\",\r\n    \"stylesheets/component-3.less\"\r\n]\r\n```\r\n\r\nPar defaut, les `@import` utilisés par Less seront capable de fouiller dans les sous dossier : `styles`, `stylesheets` ou `css`. Il est possible de changer cela avec :\r\n\r\n```js\r\n{\r\n    \"enableLess\": {\r\n        \"paths\": [\r\n            \"subdirectory/styles-files\",\r\n        ],\r\n        \"less\": \"less.json\"\r\n    },\r\n    \"routes\": {\r\n        \"/\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Optimiser les Images ###\r\n\r\nVous pouvez automatiquement optimiser les images que vous aller utiliser dans votre site pour en limiter le poids de chargement en créant des Optimizations en référençant les fichiers d'entrés par leur chemin d'accès et le chemin du dossier de sortie. Vous pouvez bien entendu en faire autant que vous le souhaitez. L'optimisation des images se fait à chaque démarrage de NodeAtlas que ce soit en tant que serveur ou via la commande `--generate` pour peut que des Optimizations existe dans le Webconfig.\r\n\r\n#### Créer des Optimizations ####\r\n\r\nAvec la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/example.png\": \"media/images/optimized/\",\r\n            \"media/images/example.jpg\": \"media/images/optimized/\",\r\n            \"media/images/example.gif\": \"media/images/optimized/\",\r\n            \"media/images/example.svg\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net l'ensemble de fichier suivant :\r\n\r\n```\r\nassets/\r\n— media/\r\n—— images/\r\n——— example.png\r\n——— example.jpg\r\n——— example.gif\r\n——— example.svg\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nvous obtiendrez les nouveaux fichiers suivant :\r\n\r\n```\r\nassets/\r\n— media/\r\n—— images/\r\n——— example.png\r\n——— example.jpg\r\n——— example.gif\r\n——— example.svg\r\n——— optimized/      <= nouveau dossier\r\n———— example.png    <= nouveau fichier\r\n———— example.jpg    <= nouveau fichier\r\n———— example.gif    <= nouveau fichier\r\n———— example.svg    <= nouveau fichier\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\n#### Créer des Optimizations par groupes de fichier ####\r\n\r\nVous pouvez par exemple, plutôt que d'indiquer les fichiers un par un, les indiquer en groupe :\r\n\r\n```js\r\n{\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/*.{gif,jpg,png,svg}\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### Optimizations dans un fichier partagé ####\r\n\r\nAfin de ne pas ré-écrire une longue liste de configuration d'Optimizations dans un fichier `webconfig.json` à destination de votre environnement de développement et `webconfig.prod.json` à destination de votre environnement de production, vous pouvez mutaliser la déclaration des fichiers dans un fichier de votre choix. Par convention, c'est le fichier `optimizations.json`.\r\n\r\nPar exemple :\r\n\r\nL'ensemble de fichier suivant\r\n\r\n```\r\nassets/\r\n— media/\r\n—— images/\r\n——— example.png\r\n——— example.jpg\r\n——— example.gif\r\n——— example.svg\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\navec `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/example.png\": \"media/images/optimized/\",\r\n            \"media/images/example.jpg\": \"media/images/optimized/\",\r\n            \"media/images/example.gif\": \"media/images/optimized/\",\r\n            \"media/images/example.svg\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net avec `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/example.png\": \"media/images/optimized/\",\r\n            \"media/images/example.jpg\": \"media/images/optimized/\",\r\n            \"media/images/example.gif\": \"media/images/optimized/\",\r\n            \"media/images/example.svg\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\npourrait devenir l'ensemble de fichier suivant\r\n\r\n```\r\nassets/\r\n— media/\r\n—— images/\r\n——— example.png\r\n——— example.jpg\r\n——— example.gif\r\n——— example.svg\r\ntemplates/\r\n— index.htm\r\noptimizations.json\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\navec `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"optimizations\": \"optimizations.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"optimizations\": \"optimizations.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net `optimizations.json`\r\n\r\n```json\r\n{\r\n    \"images\": {\r\n        \"media/images/example.png\": \"media/images/optimized/\",\r\n        \"media/images/example.jpg\": \"media/images/optimized/\",\r\n        \"media/images/example.gif\": \"media/images/optimized/\",\r\n        \"media/images/example.svg\": \"media/images/optimized/\"\r\n    }\r\n}\r\n```\r\n\r\n*Note : il est possible de désactiver les Optimizations en ne les incluant pas dans le `webconfig` en question.*\r\n\r\n#### Désactiver des Optimizations ####\r\n\r\nIl est également possible de ne pas executer l'optimisation au démarage d'un site web avec NodeAtlas avec les propriétés `\"imagesOptimizationsEnable\": false`.\r\n\r\n```js\r\n{\r\n    \"imagesOptimizationsEnable\": false,\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/example.png\": \"media/images/optimized/\",\r\n            \"media/images/example.jpg\": \"media/images/optimized/\",\r\n            \"media/images/example.gif\": \"media/images/optimized/\",\r\n            \"media/images/example.svg\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : si vos optimizations sont dans un fichier partagé, vous pouvez également les désactiver simplement en retirand la ligne `\"optimizations\": \"optimizations.json\"`.*\r\n\r\n#### Ré-générer les Optimizations avant chaque rendu de page ####\r\n\r\nVous pouvez demander à ce que les fichiers soient régénérés avant chaque affichage de page avec les propriétés `\"imagesOptimizationsBeforeResponse\": true`.\r\n\r\n```js\r\n{\r\n    \"imagesOptimizationsBeforeResponse\": false,\r\n    \"optimizations\": {\r\n        \"images\": {\r\n            \"media/images/example.png\": \"media/images/optimized/\",\r\n            \"media/images/example.jpg\": \"media/images/optimized/\",\r\n            \"media/images/example.gif\": \"media/images/optimized/\",\r\n            \"media/images/example.svg\": \"media/images/optimized/\"\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : ceci n'est pas conseillé en production car cela ralenti les réponses des pages.*\r\n\r\n\r\n\r\n### Injecter du CSS inline pour maintenir des assets Email ###\r\n\r\nQuand on créer des templates pour envoyer des Newsletters par email, ou même de simple message, on ne peut pas attacher de feuille de style. Le seul moyen à notre disposition est d'écrire les instructions CSS dans le template à l'intérieur de l'attribut `style` brisant ainsi la séparation du font et de la forme.\r\n\r\n#### Injection spécifique ####\r\n\r\nAvec `injectCss`, il vous suffit d'habiller votre template comme à votre habitude via une feuille de style et NodeAtlas injectera à chaque rendu les styles dans l'attribut `style`. Il ne vous restera plus qu'à générer vos templates.\r\n\r\nAvec par exemple la configuration suivante :\r\n\r\n```json\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"email.htm\",\r\n            \"generate\": \"bienvenue.html\",\r\n            \"injectCss\": \"stylesheets/email.css\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net l'ensemble de fichiers suivant :\r\n\r\n```\r\ngenerates/\r\nassets/\r\n— stylesheets/\r\n—— email.css\r\ntemplates/\r\n— email.htm\r\n```\r\n\r\ndont les contenus sont :\r\n\r\n**stylesheets/common.css**\r\n\r\n```css\r\nbody {\r\n    color: #f00;\r\n}\r\n```\r\n\r\n**templates/email.htm***\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Email</title>\r\n    </head>\r\n    <body>\r\n        <p>This is a template email.</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\nvous obtiendrez en sortie avec la commande `node </path/to/>node-atlas/node-atlas.js --generate` l'ensemble de fichier suivant :\r\n\r\n```\r\ngenerates/\r\n— bienvenue.html    <= template email prêt à l'envoi !\r\nassets/\r\n— stylesheets/\r\n—— email.css\r\ntemplates/\r\n— email.htm\r\n```\r\n\r\navec comme contenu pour `generates/bienvenue.html`\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Email</title>\r\n    </head>\r\n    <body style=\"color: #f00;\">\r\n        <p>This is a template email.</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\nCe mécanisme marche également si vous n'avez pas l'intention de générer quoi que ce soit mais sur un site qui tourne. Pratique pour modifier vos maquettes en live avant de les générer.\r\n\r\n> Test : Depuis `./tests/examples/css-injection` lancez `node \"../../../node-atlas.js\" --generate`. Le résultat est dans `generates`.\r\n\r\n#### Injection globale ####\r\n\r\nIl existe également la même propriété globale inpactant toutes les pages.\r\n\r\n```json\r\n{\r\n    \"injectCss\": \"stylesheets/email.css\",\r\n    \"routes\": {\r\n        \"/bienvenue/\": {\r\n            \"template\": \"email-a.htm\",\r\n            \"generate\": \"bienvenue.html\"\r\n        },\r\n        \"/au-revoir/\": {\r\n            \"template\": \"email-b.htm\",\r\n            \"generate\": \"au-revoir.html\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nainsi les deux pages `bienvenue` et `au-revoir` contiendront chacune `<body style=\"color: #f00;\">`.\r\n\r\n#### Injection multiple ####\r\n\r\nIl est possible :\r\n- De préciser des feuilles spécifique et commune en même temps.\r\n- De préciser plus d'une feuille à la fois.\r\n\r\n```json\r\n{\r\n    \"injectCss\": [\"stylesheets/reset.css\", \"stylesheets/email.css\"],\r\n    \"routes\": {\r\n        \"/bienvenue/\": {\r\n            \"template\": \"email-a.htm\",\r\n            \"generate\": \"bienvenue.html\",\r\n            \"injectCss\": \"/stylesheets/welcome.css\"\r\n        },\r\n        \"/au-revoir/\": {\r\n            \"template\": \"email-b.htm\",\r\n            \"generate\": \"au-revoir.html\",\r\n            \"injectCss\": [\"stylesheets/good-bye.css\", \"/stylesheets/others.css\"]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n> Test : Depuis `./tests/examples/css-injection` lancez `node \"../../../node-atlas.js\" --generate --webconfig webconfig.multiple.json`. Le résultat est dans `generates`.\r\n\r\n\r\n\r\n### Autoriser/Interdire les demandes GET/POST ###\r\n\r\nVous pouvez également manager la manière dont le serveur va répondre aux demandes GET/POST pour une page donnée. Par exemple, nous allons autoriser l'accès aux pages uniquement en GET pour tout le site et autoriser un POST pour une page seulement (et même lui interdire le GET).\r\n\r\n```js\r\n{\r\n    \"getSupport\": true,\r\n    \"postSupport\": false,\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/rediger-commentaire/\": {\r\n            \"template\": \"write-com.htm\"\r\n        },\r\n        \"/commentaire-sauvegarde/\": {\r\n            \"template\": \"save-com.htm\",\r\n            \"getSupport\": false,\r\n            \"postSupport\": true\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : Si rien n'est précisé,* ***getSupport*** *et* ***postSupport*** *sont à* ***true*** *au niveau global et par page.*\r\n\r\n\r\n\r\n### Changer les paramètres des Sessions ###\r\n\r\n#### Clé et Secret ####\r\n\r\nNodeAtlas gère lui-même les sessions stockées sur le serveur avec comme paramètres initiaux :\r\n\r\n- Key : `nodeatlas.sid`\r\n- Secret : `1234567890bépo`\r\n\r\nqui permettent à un client de rester connecté à travers les pages à un même ensemble de variable personnelles côtés serveur.\r\n\r\nIl est possible de modifier ses paramètres par défaut (et même obligatoire pour des sites en productions) avec les paramètres de `webconfig.json` suivant :\r\n\r\n```js\r\n{\r\n    sessionKey: \"clé personnelle\",\r\n    sessionSecret: \"secret personnel\"\r\n}\r\n```\r\n\r\nNodeAtlas utilise également un objet de stockage mémoire (MemoryStore) qui stoques les informations dans la RAM du serveur.\r\n\r\n#### Autres paramètres ####\r\n\r\nIl est possible de changer l'intégralité des paramètres des sessions (sauf le MemoryStore) en utilisant la configuration de `webconfig.json` suivante :\r\n\r\n```js\r\n{\r\n    \"session\": {\r\n        \"key\": \"clé personnelle\",\r\n        \"secret\": \"secret personnel\",\r\n        \"cookie\": {\r\n            \"path\": '/',\r\n            \"httpOnly\": true,\r\n            \"secure\": false,\r\n            \"maxAge\": null\r\n        },\r\n        ...,\r\n        ...,\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nL'intégralité de la configuration possible se trouve sur la documentation du module [express-session](https://github.com/expressjs/session).\r\n\r\n\r\n\r\n### Stockage externe des Sessions ###\r\n\r\nPar défaut, c'est NodeAtlas qui stocke les sessions serveurs dans la RAM du serveur par application. Cela ne permet pas de partager des sessions utilisateurs à travers plusieurs applications NodeAtlas (ou autre) et efface toutes les sessions en cours pour une application en cas de redémarrage de celle-ci.\r\n\r\nPour résoudre ce soucis, il convient de prendre en charge l'enregistrement des sessions via une base No SQL tel que `Redis` ou `MongoBD`.\r\n\r\nPour cela il suffit d'utiliser la fonction `setSessions` dans le fichier `controllers/common.js` de la [partie Back-end](#utiliser-nodeatlas-pour-faire-tourner-un-site-partie-back-end).\r\n\r\n#### Session gérées avec Redis ####\r\n\r\nImplémenter le code suivant dans `controllers/common.js` pour stocker vos sessions dans Redis en local.\r\n\r\n```\r\nvar website = {};\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    publics.loadModules = function () {\r\n    \tvar NA = this;\r\n\r\n        NA.modules.RedisStore = require('connect-redis');\r\n    };\r\n\r\n    publics.setSessions = function (callback) {\r\n        var NA = this,\r\n    \t\tsession = NA.modules.session,\r\n            RedisStore = NA.modules.RedisStore(session);\r\n\r\n        NA.sessionStore = new RedisStore();\r\n\r\n        callback();\r\n    };\r\n\r\n}(website));\r\n\r\nexports.loadModules = website.loadModules;\r\nexports.setSessions = website.setSessions;\r\n```\r\n\r\nPlus d'informations sur [connect-redis](https://www.npmjs.org/package/connect-redis).\r\n\r\n\r\n#### Session gérées avec MongoDB ####\r\n\r\nImplémenter le code suivant dans `controllers/common.js` pour stocker vos sessions dans la database `sessions` d'une MongoDB locale.\r\n\r\n```\r\nvar website = {};\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    publics.loadModules = function () {\r\n    \tvar NA = this;\r\n\r\n        NA.modules.MongoStore = require('connect-mongo');\r\n    };\r\n\r\n    publics.setSessions = function (callback) {\r\n        var NA = this,\r\n        \tsession = NA.modules.session,\r\n            MongoStore = NA.modules.MongoStore(session);\r\n\r\n        NA.sessionStore = new MongoStore({\r\n            db: 'sessions'\r\n        });\r\n\r\n        callback();\r\n    };\r\n\r\n}(website));\r\n\r\nexports.loadModules = website.loadModules;\r\nexports.setSessions = website.setSessions;\r\n```\r\n\r\nPlus d'informations sur [connect-redis](https://www.npmjs.org/package/connect-mongo).\r\n\r\n\r\n\r\n### Changer les chevrons <% %> du moteur de template ###\r\n\r\nPar exemple, pour inclure une partie de fichier on utilise l'instruction ***<%- include('head.htm') %>***. Il serait possible de le faire avec ***<?- include('head.htm') ?>*** avec la configuration ci-dessous :\r\n\r\n```js\r\n{\r\n    \"templateEngineDelimiter\": \"?\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nVoyez l'exemple dans les fichiers ci-dessous :\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><?= specific.titlePage ?></title>\r\n\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<?= common.classCssCommon ?>.css\" media=\"all\" />\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<?= specific.classPage ?>.css\" media=\"all\" />\r\n    </head>\r\n    <body class=\"<?= specific.classPage ?>\">\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n        <script async type=\"text/javascript\" src=\"javascript/<?= common.classJsCommon ?>.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/template.htm*\r\n\r\n```html\r\n    <? include('head.htm') ?>\r\n\r\n    <div class=\"title\"><?= common.titleWebsite ?></div>\r\n\r\n    <div>\r\n        <h1><?= specific.titlePage ?></h1>\r\n        <?- specific.content ?>\r\n    </div>\r\n\r\n    <? include('foot.htm') ?>\r\n```\r\n\r\nPour tout savoir sur les possibilités du moteur de template consulter la documentation [ejs](https://github.com/mde/ejs)\r\n\r\n*Note : Si rien n'est précisé,* ***templateEngineDelimiter*** *vaut* ***%***.\r\n\r\n\r\n\r\n### Changer l'url final des hostname et port d'écoute ###\r\n\r\nIl est possible de générer une url de visite différente des paramètres d'écoutes demandés avec ***urlHostname*** et ***urlPort***. Par exemple on écoute la boucle local sur le port 80 car un script fait du Reverse Proxy depuis le port 7777 sur le 80 avec le module « http-proxy » comme ci-dessous :\r\n\r\n```js\r\n{\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"127.0.0.1\",\r\n    \"urlPort\": 80,\r\n    \"urlHostname\": \"localhost\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIl est également possible de faire en sorte qu'aucune autre url ne puisse être tapé. Ainsi si on réclame `www.localhost` ou `localhost:7777` c'est bien sur `localhost` que sera le visiteur :\r\n\r\n```js\r\n{\r\n    \"enableForceDomain\": true,\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"127.0.0.1\",\r\n    \"urlPort\": 80,\r\n    \"urlHostname\": \"localhost\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Générer les urls dynamiquement ###\r\n\r\n#### Les chemins relatifs en absolue ####\r\n\r\nIl est possible que les chemins créés à partir de votre url soient interprétés comme des sous-dossiers qui n'ont en réalité aucune existance réelle. Cela a pour conséquence de rendre l'adresse `media/images/example.jpg` initialement accessible depuis un template affiché à **http://localhost**` impossible à récupérer quand le template est affiché à **http://localhost/sub-directory/** (puisqu'il faudrait alors que notre chemin soit plutôt `../media/images/example.jpg`).\r\n\r\nPour ne plus avoir à se soucier de l'accès aux ressources peu importe l'url qui est demandée, il suffit de transformer toutes les urls relatives telles que :\r\n\r\n```\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.css\" />\r\n<!-- ... -->\r\n<img src=\"media/images/example.jpg\" />\r\n<!-- ... -->\r\n<script type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n```\r\n\r\nen urls absolues avec la variable `urlBasePath` comme ci-dessous :\r\n\r\n```\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"<%= urlBasePath %>stylesheets/common.css\" />\r\n<!-- ... -->\r\n<img src=\"<%= urlBasePath %>media/images/example.jpg\" />\r\n<!-- ... -->\r\n<script type=\"text/javascript\" src=\"<%= urlBasePath %>javascript/common.js\"></script>\r\n```\r\n\r\nÀ noter que dans le cas de la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`urlBasePath` retourne `http://localhost/` alors que dans celle-ci :\r\n\r\n```js\r\n{\r\n    \"httpPort\": 7777,\r\n    \"urlRelativeSubPath\": \"sub/folder\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`urlBasePath` retourne `http://localhost:7777/sub/folder/`.\r\n\r\n#### Les chemins des templates ####\r\n\r\nEn utilisant le webconfig suivant :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/index.html\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/contact.html\": {\r\n            \"template\": \"contact.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nainsi que le template `index.htm` correspondant\r\n\r\n```html\r\n<!-- ... -->\r\n<a href=\"http://localhost/index.html\">Lien vers l'accueil</a>\r\n<a href=\"http://localhost/contact.html\">Lien pour nous contacter</a>\r\n<!-- ... -->\r\n```\r\n\r\nje serais obligé de changer mon lien dans le template si je change le port d'écoute ou si je change le chemin de l'url. Le changement de configuration suivant :\r\n\r\n```js\r\n{\r\n    \"httpPort\": 7777,\r\n    \"routes\": {\r\n        \"/home.html\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/contact-us.html\": {\r\n            \"template\": \"contact.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nme contraindrait à modifier le template précédent comme suit :\r\n\r\n```html\r\n<!-- ... -->\r\n<a href=\"http://localhost:7777/home.html\">Lien vers l'accueil</a>\r\n<a href=\"http://localhost:7777/contact-us.html\">Lien pour nous contacter</a>\r\n<!-- ... -->\r\n```\r\n\r\nIl est possible de solutionner ce problème en donnant une clé à un chemin précis et en déportant sont chemin dans la propriété `url`.\r\n\r\nAvec le webconfig suivant :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"index\": {\r\n            \"url\": \"/index.html\",\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"contact\": {\r\n            \"url\": \"/contact.html\",\r\n            \"template\": \"contact.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nje peux à présent écrire le lien dans le template de manière dynamique :\r\n\r\n1. comme suit\r\n\r\n   ```html\r\n<!-- ... -->\r\n<a href=\"<%= urlBasePath %><%= webconfig.routes.home.url.slice(1) %>\">Lien vers l'accueil</a>\r\n<a href=\"<%= urlBasePath %><%= webconfig.routes.contact.url.slice(1) %>\">Lien pour nous contacter</a>\r\n<!-- ... -->\r\n```\r\n\r\n   *Note : `.slice(1)` permet de supprimer facilement le double `/` pour une url fonctionnelle.*\r\n\r\n2. ou comme suit\r\n\r\n   ```html\r\n<!-- ... -->\r\n<a href=\"<%= urlBasePath %>.<%= webconfig.routes.home.url %>\">Lien vers l'accueil</a>\r\n<a href=\"<%= urlBasePath %>.<%= webconfig.routes.contact.url %>\">Lien pour nous contacter</a>\r\n<!-- ... -->\r\n```\r\n\r\n   *Note : Cela donnerait par exemple `http://localhost/./home.html`, ce qui est une url fonctionnelle.*\r\n\r\n3. ou comme suit\r\n\r\n   ```html\r\n<!-- ... -->\r\n<a href=\"<%= urlBasePathSlice + webconfig.routes.home.url %>\">Lien vers l'accueil</a>\r\n<a href=\"<%= urlBasePathSlice + webconfig.routes.contact.url %>\">Lien pour nous contacter</a>\r\n<!-- ... -->\r\n```\r\n\r\n   *Note : `urlBasePathSlice` renvoyant `http://localhost` au lieu de `http://localhost/` ou encore `http://localhost:7777/sub/folder` au lieu de `http://localhost:7777/sub/folder/`.*\r\n\r\n#### Utilisation de la clé pour mapper les pages ####\r\n\r\nIl est parfois utile de connaître la clé utilisé pour la page courante afin de trouver une équivalence dans une autre langue par exemple.\r\n\r\nAvec le webconfig suivant :\r\n\r\n```js\r\n{\r\n    \"languageCode\": \"fr-fr\",\r\n    \"routes\": {\r\n        \"index_fr-fr\": {\r\n            \"url\": \"/\",\r\n            \"template\": \"/index.htm\"\r\n        },\r\n        \"index_en-us\": {\r\n            \"url\": \"/english/\",\r\n            \"template\": \"index.htm\",\r\n            \"languageCode\": \"en-us\"\r\n        },\r\n        \"cv_fr-fr\": {\r\n            \"url\": \"/cv/\",\r\n            \"template\": \"cv.htm\"\r\n        },\r\n        \"cv_en-us\": {\r\n            \"url\": \"/english/resume/\",\r\n            \"template\": \"index.htm\",\r\n            \"languageCode\": \"en-us\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net les fichiers de variation commun suivant en fr :\r\n\r\n```js\r\n{\r\n    \"language\": [{\r\n        \"name\": \"Anglais\",\r\n        \"code\": \"en-us\"\r\n    }, {\r\n        \"name\": \"Français\",\r\n        \"code\": \"fr-fr\"\r\n    }]\r\n}\r\n```\r\n\r\net en en :\r\n\r\n```js\r\n{\r\n    \"language\": [{\r\n        \"name\": \"English\",\r\n        \"code\": \"en-us\"\r\n    }, {\r\n        \"name\": \"French\",\r\n        \"code\": \"fr-fr\"\r\n    }]\r\n}\r\n```\r\n\r\non peut alors créer un lien entre chaque page multilingue comme ceci :\r\n\r\n```html\r\n<ul>\r\n    <% for (var i = 0; i < common.language.length; i++) { %>\r\n    <li><a href=\"<%= urlBasePathSlice + webconfig.routes[currentRouteName.split('_')[0] + '_' + common.language[i].code].url %>\"><%- common.language[i].name %></a></li>\r\n    <% } %>\r\n</ul>\r\n```\r\n\r\n\r\n\r\n## CLI / Commandes de lancement ##\r\n\r\nLa façon la plus simple de lancer NodeAtlas est de se positionner dans le répertoire hébergeant votre site et de lancer la commande `\\> node </path/to/>node-atlas/node-atlas.js`. Cependant il existe des options de lancement pour faire bien plus que lancer le site.\r\n\r\nChacune des commandes qui vont suivre peut être couplée avec les autres de cette manière :\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --directory /hello-world/ --webconfig config.fr-fr.js --httpPort 80 --browse\r\n```\r\n\r\n\r\n### --directory <path> ###\r\n\r\nIl est possible de lancer NodeAtlas depuis un autre endroit que le dossier où est hébergé le site que vous souhaitez faire tourner. La commande `--directory` vous sera alors très utile.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --directory </path/to/your/website/directory/>\r\n```\r\n\r\n\r\n### --webconfig <webconfigName> ###\r\n\r\nPar défaut, NodeAtlas va lire votre fichier `webconfig.json`. Il est possible qu'en plus de ce fichier vous ayez créé un autre fichier `webconfig.prod.json` dont le nom de domaine est différent. Ou encore un `webconfig.fr-fr.json` avec des urls et des variations dans une autre langue. Plutôt que de renommer vos fichiers en `webconfig.json` avant de lancer le site, précisez simplement votre autre nom de configuration. Dans l'exemple suivant, notre fichier sera `webconfig.alternatif.json`.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --webconfig webconfig.alternatif.json\r\n```\r\n\r\n\r\n\r\n### --browse [subpath] ###\r\n\r\nCette commande permet d'ouvrir votre navigateur à l'adresse sur laquelle le site va tourner. Très pratique quand vous ne vous souvenez plus du port pour votre version de développement. Cette commande ne sert à rien si elle est couplé avec `--generate` (voir plus loin).\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --browse\r\n```\r\n\r\nVous pouvez également cibler une page précise en ajoutant la fin de l'url.\r\n\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --browse index.html\r\n```\r\n\r\n\r\n\r\n### --httpPort <httpPort> ###\r\n\r\nVous n'allez peut être pas vous ennuyer à changer votre port d'écoute sur tous vos projets et parfois vous allez devoir travailler sur deux sites différents en même temps. Avec cette commande vous n'aurez pas besoin de couper vos sites alternativement pour libérer le port d'écoute, il suffira d'en choisir un au lancement.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --httpPort 7778\r\n```\r\n\r\n\r\n\r\n### --generate ###\r\n\r\nSi vous modifiez un élément dans votre fichier de variation commun ou même dans un de vos composants de template appelé sur plusieurs pages, vous n'allez pas recharger chaque page pour mettre à jour vos fichiers de sortie. Il suffira alors d'utiliser `--generate`. Cette commande copiera l'intégralité du contenu du dossier `assetsRelativePath` dans `generatesRelativePath` si leur chemin est différent.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --generate\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## API / NodeAtlas comme module npm ##\r\n\r\nSi vous lancez NodeAtlas via du code JavaScript, vous pouvez également configurer le lancement :\r\n\r\n*server.js*\r\n\r\n```javascript\r\nrequire(\"node-atlas\")().run({\r\n    directory: \"</path/to/your/website/directory/>\",\r\n    webconfig: \"webconfig.alternatif.json\",\r\n    browse: true,\r\n    httpPort: 7778,\r\n    generate: true\r\n});\r\n```\r\n\r\n```\r\n\\> node server.js\r\n```\r\n\r\nVous pouvez également lancer plusieurs site en une fois. Bien entendu, chaque webconfig écoutera un port différent.\r\n\r\n*servers.js*\r\n\r\n```javascript\r\nvar nodeAtlas = require(\"node-atlas\"),\r\n    websiteEn = new nodeAtlas(),\r\n    websiteFr = new nodeAtlas();\r\n\r\nwebsiteEn.run({\r\n    \"browse\": true,\r\n    \"webconfig\": \"webconfig.english.json\"\r\n});\r\nwebsiteFr.run({\r\n    \"browse\": true,\r\n    \"webconfig\": \"webconfig.french.json\"\r\n});\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## NodeAtlas comme simple serveur web ##\r\n\r\nSi NodeAtlas ne trouve pas le « webconfig.json » ou le `--webconfig` que vous lui aurez indiqué, il se lancera en mode « Simple Serveur Web » ou « Public ».\r\n\r\n**Ce mode est pratique pour tester très rapidement que NodeAtlas est correctement installé ou pour créer des petits exemples HTML qui ont besoin d'un serveur web pour fonctionner (retours AJAX, iframe embarquée, etc.).**\r\n\r\nPour bien comprendre ce que cela signifie : s'il existe un quelconque fichier dans le répertoire d'où NodeAtlas a été lancé, il sera renvoyé par requête HTTP si ont le réclame via son chemin d'accès.\r\n\r\nPar exemple, en lançant NodeAtlas dans le répertoire `site-hello-world`\r\n\r\n```\r\nsite-hello-world/\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nen exécutant la commande\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js\r\n```\r\n\r\nou même la commande\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --webconfig webconfig.not-exist.json\r\n```\r\n\r\nle serveur se lancera en mode « Simple Serveur Web » et les fichiers « http://localhost/webconfig.json » ou « http://localhost/templates/webconfig.htm » seront accessible tel que le navigateur pourrait les renvoyer en tant que simple serveur web.\r\n\r\n*Note : seul les commandes `--webconfig`, `--browse`, `--directory` et `--httpPort` fonctionnent dans ce mode.*\r\n\r\n\r\n\r\n\r\n\r\n## Faire tourner NodeAtlas sur serveur ##\r\n\r\n### Dans un environnement Windows Server avec iisnode ###\r\n\r\nDans un environnement Windows Server 2013 avec IIS8 il faut :\r\n\r\n1. Installer [l’exécutable node.exe](http://nodejs.org/download/) capable d’exécuter du code JavaScript.\r\n2. Installer [le module IIS8 UrlRewrite](http://www.iis.net/downloads/microsoft/url-rewrite) pour mapper les pages exécutées à une Url de sortie.\r\n3. Installer [le module IIS8 issnode](https://github.com/tjanczuk/iisnode/downloads) pour lire des web.config et manager des site via IIS (Management de pool d’application, démarrage/arrêt de site, etc...).\r\n\r\n#### Créer une application ####\r\n\r\nDans IIS8, créez un Website et créez une Application.\r\n\r\nLe contenu de votre application sera celui du site mélangé à celui de NodeAtlas. Cela signifie donc que ceci :\r\n\r\n```\r\nnode-atlas/\r\n— node_modules/\r\n— languages/\r\n—— default.json\r\n— node-atlas.js\r\nsite-hello-world/\r\n— assets/\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\ndevient ceci :\r\n\r\n```\r\nsite-hello-world/\r\n— node_modules/\r\n— languages/\r\n—— default.json\r\n— assets/\r\n— templates/\r\n—— index.htm\r\n— node-atlas.js\r\n— webconfig.json\r\n```\r\n\r\nVous rajouterez à cet ensemble de fichiers, un fichier supplémentaire nommé `web.config` dont le contenu est le suivant :\r\n\r\n```xml\r\n<configuration>\r\n    <system.webServer>\r\n        <handlers>\r\n            <add name=\"iisnode\" path=\"node-atlas.js\" verb=\"*\" modules=\"iisnode\" />\r\n        </handlers>\r\n        <rewrite>\r\n            <rules>\r\n                <rule name=\"LogFile\" patternSyntax=\"ECMAScript\" stopProcessing=\"true\">\r\n                     <match url=\"^[a-zA-Z0-9_\\-]+\\.js\\.logs\\/\\d+\\.txt$\"/>\r\n                </rule>\r\n                <rule name=\"NodeInspector\" patternSyntax=\"ECMAScript\" stopProcessing=\"true\">\r\n                    <match url=\"^node-atlas.js\\/debug[\\/]?\" />\r\n                </rule>\r\n                <rule name=\"StaticContent\">\r\n                     <action type=\"Rewrite\" url=\"assets{REQUEST_URI}\"/>\r\n                </rule>\r\n                <rule name=\"DynamicContent\">\r\n                     <conditions>\r\n                          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"True\"/>\r\n                     </conditions>\r\n                     <action type=\"Rewrite\" url=\"node-atlas.js\"/>\r\n                </rule>\r\n            </rules>\r\n        </rewrite>\r\n    </system.webServer>\r\n</configuration>\r\n```\r\n\r\npour au final obtenir :\r\n\r\n```\r\nsite-hello-world/\r\n— node_modules/\r\n— languages/\r\n—— default.json\r\n— assets/\r\n— templates/\r\n—— index.htm\r\n— node-atlas.js\r\n— webconfig.json\r\n— web.config\r\n```\r\n\r\nIl ne vous restera plus qu'à cliquer sur « Browse <url-of-site> » dans votre panneau d'action IIS8. Vous pouvez dès lors manager votre site (Démarrage / Arrêt / Recyclage de Pool) comme pour n'importe quelle autre application IIS8.\r\n\r\n#### webconfig exemple ####\r\n\r\nUn webconfig exemple pour une production :\r\n\r\n```js\r\n{\r\n    \"urlPort\": 80,\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"www.example.fr\",\r\n    \"routes\": {\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Dans un environnement Unix avec forever ###\r\n\r\nIl faut pour cela :\r\n\r\n1. Installer [l’exécutable node.exe](http://nodejs.org/download/) capable d’exécuter du code JavaScript.\r\n2. Installer [le CLI tool forever](https://github.com/nodejitsu/forever) pour manager vos sites en continue (démarrage, arrêt, redémarrage, etc.).\r\n3. Faire tourner en plus de vos sites un reverse-proxy pour que toutes vos applications tournent sur le port 80.\r\n\r\n\r\n#### Quelques commandes forever ####\r\n\r\nPour manager un nouveau site en continue il faut utiliser la commande :\r\n\r\n```\r\n\\> forever start </path/to/>node-atlas/node-atlas.js --directory </path/to/your/website/directory/>\r\n```\r\n\r\nPour le stopper, il faut repérer son **uid** avec la commande `forever list`\r\n\r\n```\r\n\\> forever list\r\n```\r\n\r\npuis utiliser la commande :\r\n\r\n```\r\n\\> forever stop <uid>\r\n```\r\n\r\nou `<uid>` est l'**uid** du site qui tourne.\r\n\r\n\r\n#### webconfig exemple ####\r\n\r\nUn webconfig exemple pour une production :\r\n\r\n```js\r\n{\r\n    \"urlPort\": 80,\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"www.example.fr\",\r\n    \"routes\": {\r\n        ...\r\n    }\r\n}\r\n\r\n```\r\n\r\nIl vous faudra ensuite utiliser un reverse-proxy pour rendre votre site accessible sur le port 80.\r\n\r\n\r\n\r\n\r\n### Proxy ###\r\n\r\n#### Bouncy ####\r\n\r\nBouncy est un exemple de reverse-proxy que vous pouvez utiliser pour faire tourner divers sites NodeAtlas (avec d'autres types de site) ensemble sur le même port (le 80).\r\n\r\nVous pouvez par exemple :\r\n\r\n- lancer 3 applications Node.js sur les ports 7777, 7778 et 7779 avec forever,\r\n- et en plus lancer un server apache sur le port 81\r\n\r\net rendre tous vos sites accessibles derrière des noms de domaines sur le port 80 avec Bouncy par exemple.\r\n\r\nVoici un exemple de configuration avec Bouncy :\r\n\r\n**global-server.js**\r\n\r\n```javascript\r\nvar bouncy = require('bouncy');\r\n\r\nvar server = bouncy(function (request, response, bounce) {\r\n    if (request.headers.host === 'beep.example.com') {\r\n        bounce(7777);\r\n    }\r\n    else if (request.headers.host === 'blup.example.com') {\r\n        bounce(7776);\r\n    }\r\n    else if (request.headers.host === 'boop.example.com') {\r\n        bounce(81);\r\n    }\r\n    else {\r\n        response.statusCode = 404;\r\n        response.end('no such host');\r\n    }\r\n});\r\n\r\nserver.listen(80);\r\n```\r\n\r\nque vous pouvez lancer avec :\r\n\r\n```\r\n\\> forever start </path/to/>global-server.js\r\n```\r\n\r\n[Plus d'informations sur Bouncy](https://github.com/substack/bouncy)\r\n\r\n\r\n\r\n\r\n\r\n## À propos de l'architecture de NodeAtlas ##\r\n\r\nNodeAtlas est fait de tel sorte que l'objet `NA` contienne l'intégralité des fonctions lui permettant de fonctionner. NodeAtlas délivre lui-même son objet dans les controllers via les méthodes utilisées en mode Back-end avec Node.js pour vous permettre de changer ponctuellement son comportement.\r\n\r\nTous les messages d'erreurs se trouvent dans `/languages/default.json`. Si vous souhaitez les modifier, il suffit de remplacer le contenu de `default.json` (actuellement identique à celui de `en-gb`) par celui de `fr-fr.json` ou tout autre fichier traduit par vos soins.\r\n\r\nPour finir [l'appoche publics/privates de l'architecture est expliqué dans cette article](http://blog.lesieur.name/structurer-le-javascript-de-son-site-avec-ou-sans-framework/).","google":"UA-50163044-1","note":"Don't delete this file! It's used internally to help with page regeneration."}