{"name":"NodeAtlas","tagline":"NodeAtlas vous permet de créer et maintenir des Assets HTML ou sites multilingues simplement en Node.js","body":"# node-atlas #\r\n\r\n## Avant-propos ##\r\n\r\nNodeAtlas est une application réalisée en JavaScript et tournant avec [Node.js](http://nodejs.org/). Elle permet trois choses :\r\n\r\n- Créer et maintenir un ensemble d'assets HTML/CSS/JavaScript pour les fournir à des développeurs Back-end.\r\n- Créer et maintenir des sites multilingues sans Back-end.\r\n- Développer des sites ou des applications Node.js multilingues de toutes tailles.\r\n\r\n\r\n\r\n### Exemples de réalisations avec NodeAtlas ###\r\n\r\nL'outil est encore en développement et je l'expérimente petit à petit avec mes propres sites.\r\n\r\n- Exemple de génération d'asset HTML (En cours...).\r\n- Exemple de simple site Node.js sans Back-end (En cours...).\r\n- Exemple de développement de site Node.js (En cours...).\r\n\r\n\r\n\r\n### Table des matières ###\r\n\r\n- Avant-propos\r\n - Exemple de réalisations avec NodeAtlas\r\n - Table des matières\r\n - Roadmap d'avancement du développement\r\n- Installation\r\n- Commencer avec NodeAtlas\r\n - Ensemble de fichiers\r\n - Configuration minimale\r\n - Lancer le site avec NodeAtlas\r\n- Différentes configurations du webconfig.json\r\n - Plusieurs pages\r\n - Héberger des images, polices, CSS, JS, etc.\r\n - Gérer des inclusions pour éviter la redondance du code\r\n - Gérer des variations au sein d'un même template\r\n - Utiliser NodeAtlas pour générer des assets HTML\r\n - Utiliser NodeAtlas pour faire tourner un site (partie Back-end)\r\n - Changer les paramètres d'url.\r\n - Créer ses propres variables de webconfig\r\n - Autoriser/Interdire les demandes GET/POST\r\n - Changer les chevrons <% %> du moteur de template\r\n - Changer la source jQuery utilisée\r\n - Changer l'url final des hosname et port d'écoute\r\n\r\n\r\n\r\n### Roadmap d'avancement du développement ###\r\n\r\n- Fait \r\n - Lancement d'un serveur Express\r\n - Génération live de maquette HTML\r\n - Génération complète de maquette HTML\r\n - Fichier de configuration (Liste des pages avec Url Rewriting)\r\n - Partie Back-end possible (Controllers / Models) \r\n - Support de BDD possible (MySql / MongoDB)\r\n - Support de Socket.IO possible\r\n - Support des variables de parse Body / Cookie / Session\r\n - Support des variables personnelles de webconfig\r\n - Migration Express 3.x vers Express 4.x\r\n\r\n- À venir \r\n - Support d'une BDD de Session (ex: Redis) + key/secret\r\n - Support des modules Express possible\r\n - Auto Minification de Css/Js\r\n - Auto compression images\r\n - Injection automatique de feuille CSS en style inline (pour les maquettes email)\r\n - Aggregation de fichier CSS/JS pour les versions de site en production.\r\n - Auto-déploiement via transfert FTP\r\n - Support Sass/Less\r\n - ...\r\n\r\n\r\n\r\n\r\n\r\n## Installation ##\r\n\r\nIl y a deux solutions pour installer Node-Atlas :\r\n\r\n1. `npm install node-atlas`\r\n2. Cloner le répertoire depuis [GitHub](https://github.com/Haeresis/NodeAtlas).\r\n\r\n\r\n\r\n\r\n\r\n## Commencer avec NodeAtlas ##\r\n\r\n### Ensemble de fichiers ###\r\n\r\nAprès avoir installé NodeAtlas quelque part sur votre machine, créez-vous un ensemble de fichiers représentant un site n'importe où ailleurs comme la structure ci-dessous.\r\n\r\n\r\n```\r\nsite-hello-world/\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nVoici le fichier « /site-hello-world/templates/index.htm » :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<title>Hello world</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<div>Ceci est un Hello World !</div>\r\n\t</body>\r\n</html>\r\n```\r\n\r\net ci-après, le fichier « /site-hello-world/webconfig.json ».\r\n\r\n### Configuration minimale ###\r\n\r\nVous pouvez faire tourner une page simple sans images ou fichiers CSS/JS hébergés par le site avec la configuration minimale du « webconfig.json » ci-dessous.\r\n\r\n```js\r\n{\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n*Note : vous pouvez inclure des images ou fichiers CSS/JS hébergés sur d'autres sites.*\r\n\r\n\r\n\r\n### Lancer le site avec NodeAtlas ###\r\n\r\nPlacez-vous avec un invité de commande dans le dossier « /site-hello-world/ » et exécutez la commande suivante.\r\n\r\n```\r\n\\> node /path/to/node-atlas/directory/node-atlas.js\r\n```\r\n\r\nÀ votre première execution, NodeAtlas installera tous les « node_modules » nécéssaire à son fonctionnement.\r\n\r\nRé-exécutez.\r\n\r\n```\r\n\\> node /path/to/node-atlas/directory/node-atlas.js\r\n```\r\n\r\nVous aurez alors accès à votre « Hello World » à la page : *http://localhost/* dans un navigateur.\r\n\r\n\r\n\r\n\r\n\r\n## Différentes configurations du webconfig.json ##\r\n\r\n### Plusieurs pages ##\r\n\r\nCi-dessous un exemple de configuration.\r\n\r\n```js\r\n{\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t},\r\n\t\t\"/member.html\": {\r\n\t\t\t\"template\": \"member.htm\"\r\n\t\t\t\"postSupport\": false,\r\n\t\t},\r\n\t\t\"/member-without-extension/\": {\r\n\t\t\t\"template\": \"member.htm\"\r\n\t\t\t\"getSupport\": false,\r\n\t\t}, \r\n\t\t\"/error.html\": {\r\n\t\t\t\"template\": \"error.htm\",\r\n\t\t\t\"statusCode\": 404,\r\n\t\t\t\"mimeType\": \"text/plain\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nPour faire tourner cet ensemble de fichier :\r\n\r\n```\r\ntemplates/\r\n— index.htm\r\n— member.htm\r\n— error.htm\r\nwebconfig.json\r\n```\r\n\r\naux adresses :\r\n\r\n- *http://localhost/* (répond à la racine)\r\n- *http://localhost/member.html* (ne répondra pas si demandée en POST)\r\n- *http://localhost/member-without-extension/* (ne répondra pas si demandée en GET)\r\n- *http://localhost/error.html* (renvoi du contenu plein texte (sans balise) avec une erreur 404)\r\n\r\n\r\n\r\n### Héberger des images, polices, CSS, JS, etc. ###\r\n\r\nVous pouvez également héberger tout un tas de fichier sur votre site dans un dossier public. Par exemple avec cette configuration :\r\n\r\n```js\r\n{\r\n\t\"assetsRelativePath\": \"assets/\"\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\net cet ensemble de fichier :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\n— media/\r\n—— images/\r\n——— logo.png\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/stylesheets/common.css*\r\n- *http://localhost/javascript/common.js*\r\n- *http://localhost/media/images/logo.png*\r\n\r\n*Note : Si* ***assetsRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier public est bien* ***assets/***. ***assetsRelativePath*** *est donc utile seulement pour changer le nom du répertoire.*\r\n\r\n\r\n\r\n### Gérer des inclusions pour éviter la redondance du code ###\r\n\r\nVous pouvez segmenter vos codes HTML afin de ne pas répéter le code redondant comme par exemple les parties « head » et « foot » ou tout autres fragments de code :\r\n\r\n```js\r\n{\r\n\t\"componentsRelativePath\": \"components/\"\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t},\r\n\t\t\"/liste-des-membres/\": {\r\n\t\t\t\"template\": \"members.htm\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\navec les fichiers suivants :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<title>Hello world</title>\r\n\r\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/common.css\" media=\"all\" />\r\n\t</head>\r\n\t<body>\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n\t\t<script async type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n\t<% include head.htm %>\r\n\t\r\n\t<div>\r\n\t\t<h1>Bienvenue</h1>\r\n\t\t<p>C'est la page d'accueil.</p>\r\n\t</div>\r\n\t\r\n\t<% include foot.htm %>\r\n```\r\n\r\n*templates/members.htm*\r\n\r\n```html\r\n\t<% include head.htm %>\r\n\t\r\n\t<div>\r\n\t\t<h1>Liste des members</h1>\r\n\t\t<p>C'est la page des membres</p>\r\n\t</div>\r\n\t\r\n\t<% include foot.htm %>\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n\r\n*Note : Si* ***componentsRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des includes est bien* ***components/***. ***componentsRelativePath*** *est donc utile seulement pour changer le nomde répertoire.*\r\n\r\n\r\n\r\n### Gérer des variations au sein d'un même template ###\r\n\r\n#### En standard ####\r\n\r\nIl est possible avec le même template et les mêmes includes de générer des pages au contenu différent (pratique en mode génération d'assets HTML). Activer les variations avec la configuration suivante :\r\n\r\n```js\r\n{\r\n\t\"commonVariation\": \"common.json\",\r\n\t\"variationsRelativePath\": \"variations/\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"template.htm\",\r\n\t\t\t\"variation\": \"index.json\",\r\n\t\t},\r\n\t\t\"/liste-des-membres/\": {\r\n\t\t\t\"template\": \"template.htm\",\r\n\t\t\t\"variation\": \"members.json\",\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\navec les fichiers suivants :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— home.css\r\n—— members.css\r\n— javascript/\r\n—— common.js\r\n—— home.js\r\n—— members.js\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nvariations/\r\n— common.json\r\n— index.json\r\n— members.json\r\ntemplates/\r\n— template.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<title><%= specific.titlePage %></title>\r\n\r\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<%= common.classCssCommon %>.css\" media=\"all\" />\r\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<%= specific.classPage %>.css\" media=\"all\" />\r\n\t</head>\r\n\t<body class=\"<%= specific.classPage %>\">\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n\t\t<script async type=\"text/javascript\" src=\"javascript/<%= common.classJsCommon %>.js\"></script>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n*templates/template.htm*\r\n\r\n```html\r\n\t<% include head.htm %>\r\n\t\r\n\t<div class=\"title\"><%= common.titleWebsite %></div>\r\n\t\r\n\t<div>\r\n\t\t<h1><%= specific.titlePage %></h1>\r\n\t\t<%- specific.content %>\r\n\t</div>\r\n\t\r\n\t<% include foot.htm %>\r\n```\r\n\r\n*variations/common.json*\r\n\r\n```js\r\n{\r\n\t\"titleWebsite\": \"Titre du site\",\r\n\t\"classCssCommon\": \"common\",\r\n\t\"classJsCommon\": \"common\"\r\n}\r\n```\r\n\r\n*variations/index.json*\r\n\r\n```js\r\n{\r\n\t\"titlePage\": \"Bienvenue\",\r\n\t\"classPage\": \"index\",\r\n\t\"content\": \"<p>C'est la page d'accueil.</p>\"\r\n}\r\n```\r\n\r\n*variations/members.json*\r\n\r\n```js\r\n{\r\n\t\"titlePage\": \"Liste des members\",\r\n\t\"classPage\": \"members\",\r\n\t\"content\": \"<p>C'est la page des membres</p>\"\r\n}\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n\r\n*Note : Si* ***variationsRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des variations est bien* ***variations/***. ***variationsRelativePath*** *est donc utile seulement pour changer le nom de répertoire.*\r\n\r\n\r\n#### Pour le multilingue ####\r\n\r\n##### Toutes les langues sur le même site #####\r\n\r\nSur le même principe, les variations peuvent être utilisées pour créer la même page, mais dans des langues différentes :\r\n\r\n```js\r\n{\r\n\t\"languageCode\": \"en-gb\",\r\n\t\"variationsRelativePath\": \"languages/\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"landing.htm\",\r\n\t\t\t\"variation\": \"landing.json\"\r\n\t\t},\r\n\t\t\"/home/\": {\r\n\t\t\t\"template\": \"home.htm\",\r\n\t\t\t\"variation\": \"home.json\"\r\n\t\t},\r\n\t\t\"/accueil/\": {\r\n\t\t\t\"template\": \"home.htm\",\r\n\t\t\t\"variation\": \"home.json\",\r\n\t\t\t\"languageCode\": \"fr-fr\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n*Note : Dans cet exemple j'ai décidé de me passer d'un fichier de variation commune, car je n'ai pas précisé de* ***commonVariation***. *J'ai également totalement arbitrairement décidé de renommer mon dossier* ***variations/*** *en* ***languages/***.\r\n\r\navec les fichiers suivants :\r\n\r\n```\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nlanguages/\r\n— en-gb\r\n—— landing.json\r\n—— home.json\r\n— fr-fr\r\n—— home.json\r\ntemplates/\r\n— landing.htm\r\n— home.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"<%= languageCode %>\">\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<title><%= specific.titlePage %></title>\r\n\t</head>\r\n\t<body class=\"<%= specific.classPage %>\">\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n\t</body>\r\n</html>\r\n```\r\n\r\n*templates/landing.htm*\r\n\r\n```html\r\n\t<% include head.htm %>\r\n\t\r\n\t<select>\r\n\t\t<% for (var i = 0; i < specific.selectLabel.length; i++) { %>\r\n\t\t<option><%= specific.selectLabel[i] %></option>\r\n\t\t<% } %>\r\n\t</select>\r\n\t\r\n\t<% include foot.htm %>\r\n```\r\n\r\n*templates/home.htm*\r\n\r\n```html\r\n\t<% include head.htm %>\r\n\t\r\n\t<div>\r\n\t\t<h1><%= specific.titlePage %></h1>\r\n\t\t<%- specific.content %>\r\n\t</div>\r\n\t\r\n\t<% include foot.htm %>\r\n```\r\n\r\n*languages/en-gb/landing.json*\r\n\r\n```js\r\n{\r\n\t\"titlePage\": \"Landing\",\r\n\t\"classPage\": \"landing\",\r\n\t\"selectLabel\": [\r\n\t\t\"English\",\r\n\t\t\"Français\"\r\n\t]\r\n}\r\n```\r\n\r\n*languages/en-gb/home.json*\r\n\r\n```js\r\n{\r\n\t\"titlePage\": \"Welcome\",\r\n\t\"classPage\": \"home\",\r\n\t\"content\": \"<p>This is a home page.</p>\"\r\n}\r\n```\r\n\r\n*languages/fr-fr/home.json*\r\n\r\n```js\r\n{\r\n\t\"titlePage\": \"Bienvenue\",\r\n\t\"classPage\": \"home\",\r\n\t\"content\": \"<p>C'est la page d'accueil.</p>\"\r\n}\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/home/*\r\n- *http://localhost/accueil/*\r\n\r\n*Note : Par défaut c'est le* ***languageCode*** *racine qui conditionne la langue d'affichage du site. Cependant, spécifiquement par page on peut changer la langue avec également le* ***languageCode****. *Il faut également savoir que dès que le site ou une page à un* ***languageCode*** *dans la configuration, ses fichiers de variations doivent être placées dans un sous répertoire portant le nom du* ***languageCode***.\r\n\r\n\r\n##### A chaque langue sa configuration #####\r\n\r\nVous pouvez également décider de faire tourner chaque langue dans un « webconfig.json » différent. Avec l'ensemble de fichier suivant :\r\n\r\n```\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nvariations/\r\n— en-gb\r\n—— landing.json\r\n—— home.json\r\n—— members.json\r\n— fr-fr\r\n—— home.json\r\n—— members.json\r\ntemplates/\r\n— landing.htm\r\n— home.htm\r\n— members.htm\r\nwebconfig.json\r\nwebconfig.en-gb.json\r\nwebconfig.fr-fr.json\r\n```\r\n\r\nvous pourriez avoir les « webconfig.json » suivant :\r\n\r\n*webconfig.json*\r\n\r\n```js\r\n{\r\n\t\"languageCode\": \"en-gb\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"landing.htm\",\r\n\t\t\t\"variation\": \"landing.json\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n*webconfig.en-gb.json*\r\n\r\n```js\r\n{\r\n\t\"httpPort\": 81,\r\n\t\"urlRelativeSubPath\": \"/english\",\r\n\t\"languageCode\": \"en-gb\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"home.htm\",\r\n\t\t\t\"variation\": \"home.json\"\r\n\t\t}, \r\n\t\t\"/members-list/\": {\r\n\t\t\t\"template\": \"members.htm\",\r\n\t\t\t\"variation\": \"members.json\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n*webconfig.fr-fr.json*\r\n\r\n```js\r\n{\r\n\t\"httpPort\": 82,\r\n\t\"urlRelativeSubPath\": \"/francais\",\r\n\t\"languageCode\": \"fr-fr\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"home.htm\",\r\n\t\t\t\"variation\": \"home.json\"\r\n\t\t}, \r\n\t\t\"/liste-des-membres/\": {\r\n\t\t\t\"template\": \"members.htm\",\r\n\t\t\t\"variation\": \"members.json\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\net avoir accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost:81/english/*\r\n- *http://localhost:81/english/*\r\n- *http://localhost:81/english/members-list/*\r\n- *http://localhost:82/francais/*\r\n- *http://localhost:82/francais/liste-des-membres/*\r\n\r\n*Note : il est possible de faire ensuite du reverse proxy pour ramener l'ensemble des url sur les ports autres que le port 80 sur le port 80.*\r\n\r\n\r\n\r\n### Utiliser NodeAtlas pour générer des assets HTML###\r\n\r\n#### Générer des assets HTML ####\r\n\r\nAvec la configuration suivante il est possible de générer des assets HTML du rendu de chaque page dans un fichier associé. Le fichier sera (re)créer à chaque affichage de la page dans votre navigateur.\r\n\r\n```js\r\n{\r\n\t\"autoGenerate\": true,\r\n\t\"generatesRelativePath\": \"generate/\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\",\r\n\t\t\t\"generate\": \"/index.html\"\r\n\t\t},\r\n\t\t\"/liste-des-membres/\": {\r\n\t\t\t\"template\": \"members.htm\",\r\n\t\t\t\"generate\": \"/members/list.html\"\r\n\t\t},\r\n\t\t\"/no/generate/property/\": {\r\n\t\t\t\"template\": \"members.htm\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\net l'ensemble de fichiers suivant :\r\n\r\n```\r\n{\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\ngenerate/\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n}\r\n```\r\n\r\non peut créer physiquement les assets :\r\n\r\n```\r\n{\r\ngenerate/\r\n— index.html\r\n— members/\r\n—— list.html\r\n— no/\r\n—— generate/\r\n——— property <== Ceci est un fichier\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n}\r\n```\r\n\r\nen ce rendant aux addresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n\r\nLa génération s'enclenche quand on affiche la page uniquement parceque ***autoGenerate*** existe et est à ***true***. S'il est passé à ***false*** (ou enlevé) le seul moyen de générer toutes les pages du site sera via la commande `node /path/to/node-atlas/directory/server.js --generate` qui génèrera toutes les pages d'un coup. Bien entendu dans tous les cas cette commande marche et permet de régénérer toutes les pages suite à un changement tel qu'une modification dans un composant appelé sur toutes les pages.\r\n\r\n*Note : Si* ***generatesRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des générations est bien* ***generatesRelativePath/***. ***generatesRelativePath*** *est donc utile seulement pour changer le nom répertoire.*\r\n\r\n\r\n#### Générer un site sans partie serveur ####\r\n\r\nIl est également possible de manager la création d'un site en simple page HTML avec la configuration suivante :\r\n\r\n```js\r\n{\r\n\t\"languageCode\": \"fr-fr\",\r\n\t\"indexPage\": true,\r\n\t\"autoGenerate\": true,\r\n\t\"generatesRelativePath\": \"../HTML/\",\r\n\t\"assetsRelativePath\": \"../HTML/\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/cv.html\": {\r\n\t\t\t\"template\": \"index.htm\",\r\n\t\t\t\"variation\": \"index.json\"\r\n\t\t},\r\n\t\t\"/en/cv.html\": {\r\n\t\t\t\"template\": \"index.htm\",\r\n\t\t\t\"variation\": \"index.json\",\r\n\t\t\t\"languageCode\": \"en\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\net l'ensemble de fichiers suivant :\r\n\r\n```\r\nHTML/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\nengine/\r\n— variations/\r\n—— fr-fr/\r\n——— index.json\r\n—— en/\r\n——— index.json\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nÀ l'adresse *http://localhost/* s'affichera la liste des pages composant votre site (grâce à **indexPage** à **true**).\r\n\r\nIl ne restera plus qu'à, une fois votre travail terminé, admirer votre site HTML dans le dossier :\r\n\r\n```\r\nHTML/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\n— cv.html\r\n— en/\r\n—— cv.html\r\n```\r\n\r\n\r\n\r\n### Utiliser NodeAtlas pour faire tourner un site (partie Back-end) ###\r\n\r\nVous pouvez soit utiliser un contrôlleur unique pour tout le site et/ou également des contrôlleurs par template et variation.\r\n\r\nPour le contrôlleur maître, utilisez par exemple cette configuration :\r\n\r\n```js\r\n{\r\n \t\"commonController\": \"common.js\",\r\n \t\"controllersRelativePath\": \"controllers/\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\",\r\n\t\t\t\"variation\": \"index.json\"\r\n\t\t},\r\n\t\t\"/categories/\": {\r\n\t\t\t\"template\": \"categories.htm\",\r\n\t\t\t\"variation\": \"categories.json\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\navec cet ensemble de fichier\r\n\r\n```\r\nvariations/\r\n— index.json\r\n— categories.json\r\ncontrollers/\r\n— common.js\r\nmodels/\r\n— Article.js\r\n— Category.js\r\ntemplates/\r\n— index.htm\r\n— categories.htm\r\nwebconfig.json\r\n```\r\n\r\nEt le fichier « common.js » contenant ceci par exemple :\r\n\r\n```js\r\nvar website = {};\r\n\r\n// Loading modules for this website.\r\n(function (publics) {\r\n\t\"use strict\";\r\n\r\n\tpublics.loadModules = function (NA) {\r\n\t\tvar modulePath = (NA.webconfig._needModulePath) ? NA.nodeModulesPath : '';\r\n\t\t\r\n\t\tNA.modules.connect = require(modulePath + 'connect');\r\n\t\tNA.modules.cookie = require(modulePath + 'cookie');\r\n\t\tNA.modules.mongoose = require(modulePath + 'mongoose');\r\n\t\tNA.modules.socketio = require(modulePath + 'socket.io');\r\n\r\n\t\treturn NA;\r\n\t};\r\n\r\n}(website));\r\n\r\n// Set configuration for this website.\r\n(function (publics) {\r\n\t\"use strict\";\r\n\r\n\tvar privates = {};\r\n\r\n\tpublics.setConfigurations = function (NA, callback) {\r\n\t\tvar mongoose = NA.modules.mongoose,\r\n\t\t\tsocketio = NA.modules.socketio,\r\n\t\t\tconnect = NA.modules.connect;\r\n\r\n\t\tNA.backend = {};\r\n\r\n\t\tprivates.mongooseInitialization(mongoose, function (mongoose) {\r\n\r\n\t\t\tprivates.mongooseShemas(mongoose);\r\n\r\n\t\t\tprivates.socketIoInitialisation(socketio, NA, function (io) {\r\n\r\n\t\t\t\tprivates.socketIoEvents(io, NA);\r\n\r\n\t\t\t\tcallback(NA);\t\t\t\t\t\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t};\r\n\r\n\tprivates.socketIoInitialisation = function (socketio, NA, callback) {\r\n\t\tvar io = socketio.listen(NA.server),\r\n\t\t\tconnect = NA.modules.connect,\r\n\t\t\tcookie = NA.modules.cookie;\r\n\r\n\t\tio.set('authorization', function (data, accept) {\r\n\r\n            // No cookie enable.\r\n            if (!data.headers.cookie) {\r\n                return accept('Session cookie required.', false);\r\n            }\r\n\r\n            // First parse the cookies into a half-formed object.\r\n            data.cookie = cookie.parse(data.headers.cookie);\r\n\r\n            // Next, verify the signature of the session cookie.\r\n            data.cookie = connect.utils.parseSignedCookies(data.cookie, NA.webconfig.session.secret);\r\n             \r\n            // save ourselves a copy of the sessionID.\r\n            data.sessionID = data.cookie[NA.webconfig.session.key];\r\n\r\n\t\t\t// Accept cookie.\r\n            NA.webconfig.session.sessionStore.load(data.sessionID, function (error, session) {\r\n                if (error || !session) {\r\n                    accept(\"Error\", false);\r\n                } else {\r\n                    data.session = session;\r\n                    accept(null, true);\r\n                }\r\n            });\r\n\r\n        });\r\n\r\n    \tcallback(io);\t\t\r\n\t};\r\n\r\n\tprivates.mongooseInitialization = function (mongoose, callback) {\r\n\t\tmongoose.connect('mongodb://127.0.0.1:27017/blog', function (error) {\r\n  \t\t\tif (error) {\r\n\t\t\t\tthrow error;\r\n  \t\t\t};\r\n\r\n  \t\t\tcallback(mongoose);\r\n\t\t});\r\n\t\t\r\n\t\tmongoose.connection.on('error', function (error) {\r\n\t  \t\tconsole.log('Mongoose default connection error: ' + error);\r\n\t\t});\r\n\r\n\t\tmongoose.connection.on('disconnected', function () {\r\n\t\t\tconsole.log('Mongoose default connection disconnected');\r\n\t\t});\r\n\r\n\t\tprocess.on('SIGINT', function (error) {\r\n\t\t\tmongoose.connection.close(function () {\r\n\t\t\t\tconsole.log('Mongoose default connection disconnected through app termination');\r\n\t\t\t\tprocess.exit(0);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tprivates.socketIoEvents = function (io, NA) {\r\n\t\tvar params = {};\r\n\r\n\t\tparams.io = io;\r\n\t\tparams.NA = NA;\r\n\r\n\t\trequire('./article').asynchrone(params);\r\n\t};\r\n\r\n\tprivates.mongooseShemas = function (mongoose) {\r\n\t\tpublics.shemas = {};\r\n\r\n\t\tpublics.shemas.article = require('../models/Article');\r\n\t\tpublics.shemas.category = require('../models/Category');\r\n\r\n\t\tmongoose.model('article', website.shemas.article, 'article');\r\n\t\tmongoose.model('category', website.shemas.category, 'category');\r\n\t};\r\n\r\n}(website));\r\n\r\n// PreRender\r\n(function (publics) {\r\n\t\"use strict\";\r\n\r\n\tpublics.preRender = function (params, mainCallback) {\r\n\t\tvar variation = params.variation;\r\n\r\n\t\t// Ici on modifie les variables de variations.\r\n\t\t//console.log(params.variation);\r\n\r\n\t\tmainCallback(variation);\r\n\t};\r\n\r\n}(website));\r\n\r\n// Render\r\n(function (publics) {\r\n\t\"use strict\";\r\n\r\n\tpublics.render = function (params, mainCallback) {\r\n\t\tvar data = params.data;\r\n\r\n\t\t// Ici on peut manipuler le DOM côté serveur avant retour client.\r\n\t\t//console.log(params.data);\r\n\r\n\t\tmainCallback(data);\r\n\t};\r\n\r\n}(website));\r\n\r\nexports.loadModules = website.loadModules;\r\nexports.setConfigurations = website.setConfigurations;\r\nexports.preRender = website.preRender;\r\nexports.render = website.render;\r\n```\r\n\r\nAu lieu de ce servir de preRender et render dans le fichier common.js effectif pour tout le site, on peut utiliser des controlleurs spécifique par page. La configuration précédente devient alors :\r\n\r\n```js\r\n{\r\n \t\"commonController\": \"common.js\",\r\n \t\"controllersRelativePath\": \"controllers/\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\",\r\n\t\t\t\"controller\": \"index.js\",\r\n\t\t\t\"variation\": \"index.json\"\r\n\t\t},\r\n\t\t\"/categories/\": {\r\n\t\t\t\"template\": \"categories.htm\",\r\n\t\t\t\"controller\": \"categories.js\",\r\n\t\t\t\"variation\": \"categories.json\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\navec cet ensemble de fichier\r\n\r\n```\r\nvariations/\r\n— index.json\r\n— categories.json\r\ncontrollers/\r\n— modules/\r\n—— list-of-article.js/\r\n— common.js\r\n- index.js\r\n- categories.js\r\nmodels/\r\n— Article.js\r\n— Category.js\r\ntemplates/\r\n— index.htm\r\n— categories.htm\r\nwebconfig.json\r\n```\r\n\r\navec par exemple un fichier index.js comme celui-ci :\r\n\r\n```js\r\nvar website = {};\r\n\r\n// PreRender\r\n(function (publics) {\r\n\t\"use strict\";\r\n\r\n\tvar privates = {};\r\n\r\n\tprivates.listOfArticles = require('./modules/list-of-articles');\r\n\r\n\tpublics.preRender = function (params, mainCallback) {\r\n\t\tvar variation = params.variation,\r\n\t\t\tmongoose = params.NA.modules.mongoose,\r\n\t\t\tArticle = mongoose.model('article');\r\n\r\n\t\tvariation.backend = {};\r\n\r\n\t\tprivates.listOfArticles(Article, function (listOfArticles) {\r\n\r\n\t\t\tvariation.backend.articles = listOfArticles;\r\n\r\n\t\t\tmainCallback(variation);\r\n\t\t});\r\n\t};\r\n\r\n}(website));\r\n\r\n// Render\r\n(function (publics) {\r\n\t\"use strict\";\r\n\t\r\n\tpublics.render = function (params, mainCallback) {\r\n\t\tvar data = params.data;\r\n\r\n\t\t// Ici on peut manipuler le DOM côté serveur avant retour client.\r\n\t\t//console.log(params.data);\r\n\r\n\t\tmainCallback(data);\r\n\t};\r\n\r\n}(website));\r\n\r\nexports.preRender = website.preRender;\r\nexports.render = website.render;\r\n```\r\n\r\n*Note : Si* ***controllersRelativePath*** *n'est pas présent dans « webconfig.js » alors toute la partie Back-end est désactivée.*\r\n\r\n\r\n\r\n### Changer les paramètres d'url ###\r\n\r\nPar défaut, si vous utilisez la configuration suivante :\r\n\r\n```js\r\n{\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\ncela est identique à utiliser celle-ci :\r\n\r\n```js\r\n{\r\n\t\"httpHostname\": \"localhost\",\r\n\t\"httpPort\": 80,\r\n\t\"httpSecure\": false,\r\n\t\"urlRelativeSubPath\": \"\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\net vous pourrez accéder à l'url : *http://localhost/*.\r\n\r\nChanger alors la configuration en ceci :\r\n\r\n```js\r\n{\r\n\t\"httpHostname\": \"127.0.0.1\",\r\n\t\"httpPort\": 7777,\r\n\t\"httpSecure\": true,\r\n\t\"urlRelativeSubPath\": \"/sub/folder\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\npour accéder à : *https://127.0.0.1:7777/sub/folder/*\r\n\r\n\r\n\r\n### Créer ses propres variables de webconfig ###\r\n\r\nImaginons deux webconfigs dans lesquels nous allons créer nos propres variables comme suit :\r\n\r\n1. « webconfig.json »\r\n\r\n```js\r\n{\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t}\r\n\t}, \r\n\t\"_minified\": \"\"\r\n}\r\n```\r\n\r\n2. « webconfig.prod.json »\r\n\r\n```js\r\n{\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t}\r\n\t}, \r\n\t\"_minified\": \".min\"\r\n}\r\n```\r\n\r\navec cet ensemble de fichier\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common.min.css\r\n— javascript/\r\n—— common.js\r\n—— common.min.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\net « index.htm » contenant :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<title>Hello world</title>\r\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common<%= webconfig._minified %>.css\" />\r\n\t</head>\r\n\t<body>\r\n\t\t<div>Ceci est un test de récupération de ressources minifiées/non-minifiées.</div>\r\n\t\t<script type=\"text/javascript\" src=\"javascript/common<%= webconfig._minified %>.js\"></script>\r\n\t</body>\r\n</html>\r\n```\r\n\r\nEn lançant (depuis le dossier du site) la commande :\r\n\r\n```\r\n\\> node /path/to/node-atlas/directory/node-atlas.js\r\n```\r\n\r\nNous aurons à l'adresse « http://localhost/ » la sortie suivante avec les fichiers non minifiés :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<title>Hello world</title>\r\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.css\" />\r\n\t</head>\r\n\t<body>\r\n\t\t<div>Ceci est un test de récupération de ressources minifiées/non-minifiées.</div>\r\n\t\t<script type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n\t</body>\r\n</html>\r\n```\r\n\r\nCependant en lançant la commande :\r\n\r\n```\r\n\\> node /path/to/node-atlas/directory/server.js --webconfig webconfig.prod.json \r\n```\r\n\r\nNous aurons à l'adresse « http://localhost/ » la sortie suivante avec les fichiers minifiés :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<title>Hello world</title>\r\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.min.css\" />\r\n\t</head>\r\n\t<body>\r\n\t\t<div>Ceci est un test de récupération de ressources minifiées/non-minifiées.</div>\r\n\t\t<script type=\"text/javascript\" src=\"javascript/common.min.js\"></script>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n*Note : Il vaut mieux préfixer ses variables personnelles avec « _ » pour éviter des conflits avec des variables de configuration existantes ou futures.*\r\n\r\n\r\n\r\n### Autoriser/Interdire les demandes GET/POST ###\r\n\r\nVous pouvez également manager la manière dont le serveur va répondre aux demandes GET/POST pour une page donnée. Par exemple, nous allons autoriser l'accès aux pages uniquement en GET pour tout le site et autoriser un POST pour une page seulement (et même lui interdir le GET).\r\n\r\n```js\r\n{\r\n\t\"getSupport\": true,\r\n\t\"postSupport\": false,\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t},\r\n\t\t\"/liste-des-membres/\": {\r\n\t\t\t\"template\": \"members.htm\"\r\n\t\t},\r\n\t\t\"/rediger-commentaire/\": {\r\n\t\t\t\"template\": \"write-com.htm\"\r\n\t\t},\r\n\t\t\"/commentaire-sauvegarde/\": {\r\n\t\t\t\"template\": \"save-com.htm\",\r\n\t\t\t\"getSupport\": false,\r\n\t\t\t\"postSupport\": true\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n*Note : Si rien n'est précisé,* ***getSupport*** *et* ***postSupport*** *sont à* ***true*** *au niveau global et par page.*\r\n\r\n\r\n\r\n### Changer les chevrons <% %> du moteur de template ###\r\n\r\nPar exemple, pour inclure une partie de fichier on utilise l'instruction ***<% include head.htm %>***. Il serait possible de le faire avec ***{{ include head.htm }}*** avec la configuration ci-dessous :\r\n\r\n```js\r\n{\r\n\t\"templateEngineOpenPattern\": \"{{\",\r\n\t\"templateEngineClosePattern\": \"}}\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n*Note : Si rien n'est précisé,* ***templateEngineOpenPattern*** *et* ***templateEngineClosePattern*** *valent respectivement* ***<%*** *et* ***%>***.\r\n\r\n\r\n\r\n### Changer la source jQuery utilisée ###\r\n\r\nNodeAtlas utilise par défaut le fichier externe « http://code.jquery.com/jquery.js » pour manipuler le DOM. Vous pouvez changer celui-ci avec cette configuration :\r\n\r\n```js\r\n{\r\n\t\"jQueryVersion\": \"./assets/javascript/jquery-1.9.0.js\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n\r\n\r\n### Changer l'url final des hosname et port d'écoute ###\r\n\r\nIl est possible de générer une url de visite différente des paramètres d'écoutes demandés avec ***urlHostname*** et ***urlPort***. Par exemple on écoute la boucle local sur le port 80 car un script fait du Reverse Proxy depuis le port 7777 sur le 80 avec le module « http-proxy » comme ci dessous :\r\n\r\n```js\r\n{\r\n\t\"httpPort\": 7777,\r\n\t\"httpHostname\": \"127.0.0.1\",\r\n\t\"urlPort\": 80,\r\n\t\"urlHostname\": \"localhost\",\r\n\t\"urlRewriting\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"index.htm\"\r\n\t\t}\r\n\t}\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}