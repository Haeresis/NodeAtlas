{"name":"NodeAtlas","tagline":"NodeAtlas vous permet de créer et maintenir des Assets HTML ou sites multilingues simplement en Node.js","body":"# node-atlas #\r\n\r\nVersion : 0.25.0 (Beta)\r\n\r\n## Avant-propos ##\r\n\r\nNodeAtlas est une application réalisée en JavaScript et tournant avec [Node.js](http://nodejs.org/). Elle permet trois choses :\r\n\r\n- Créer et maintenir un ensemble d'assets HTML/CSS/JavaScript pour les fournir à des développeurs Back-end.\r\n- Créer et maintenir des sites multilingues sans Back-end.\r\n- Développer des sites ou des applications Node.js multilingues de toutes tailles.\r\n\r\n\r\n\r\n### Exemples de réalisations avec NodeAtlas ###\r\n\r\nL'outil est encore en développement et je l'expérimente petit à petit avec mes propres sites.\r\n\r\n- [Génération et maintenance de maquette HTML](https://github.com/Haeresis/ResumeAtlas/).\r\n- [Maintenance de site HTML (sans Back-end)](https://github.com/Haeresis/ResumeAtlas/).\r\n- [Site Node.js avec Websocket et PopState](https://github.com/Haeresis/BookAtlas/).\r\n- [Site Node.js avec base MongoDB et Redis](https://github.com/Haeresis/BlogAtlas/).\r\n- [Simple Serveur Web pour un dossier](https://github.com/Haeresis/SimpleAtlas/).\r\n\r\n\r\n\r\n### Table des matières ###\r\n\r\n- [Avant-propos](#avant-propos)\r\n - [Exemple de réalisations avec NodeAtlas](#exemples-de-r%C3%A9alisations-avec-nodeatlas)\r\n - [Table des matières](#table-des-mati%C3%A8res)\r\n - [Roadmap d'avancement du développement](#roadmap-davancement-du-d%C3%A9veloppement)\r\n - [Documentation](#documentation)\r\n- [Installation](#installation)\r\n- [Commencer avec NodeAtlas](#commencer-avec-nodeatlas)\r\n - [Ensemble de fichiers](#ensemble-de-fichiers)\r\n - [Configuration minimale](#configuration-minimale)\r\n - [Lancer le site avec NodeAtlas](#lancer-le-site-avec-nodeatlas)\r\n- [Différentes configurations du webconfig.json](#diff%C3%A9rentes-configurations-du-webconfigjson)\r\n - [Plusieurs pages](#plusieurs-pages)\r\n - [Héberger des images, polices, CSS, JS, etc.](#h%C3%A9berger-des-images-polices-css-js-etc)\r\n - [Gérer des inclusions pour éviter la redondance du code](#g%C3%A9rer-des-inclusions-pour-%C3%A9viter-la-redondance-du-code)\r\n - [Gérer des variations au sein d'un même template](#g%C3%A9rer-des-variations-au-sein-dun-m%C3%AAme-template)\r\n - [Gérer le multilingue](#g%C3%A9rer-le-multilingue)\r\n - [Utiliser NodeAtlas pour générer des assets HTML](#utiliser-nodeatlas-pour-g%C3%A9n%C3%A9rer-des-assets-html)\r\n - [Utiliser NodeAtlas pour faire tourner un site (partie Back-end)](#utiliser-nodeatlas-pour-faire-tourner-un-site-partie-back-end)\r\n - [Changer les paramètres d'url.](#changer-les-param%C3%A8tres-durl)\r\n - [Créer ses propres variables de webconfig](#cr%C3%A9er-ses-propres-variables-de-webconfig)\r\n - [Gérer le routage (Url Rewriting)](#g%C3%A9rer-le-routage)\r\n - [Gérer les pages inexistantes](#g%C3%A9rer-les-pages-inexistantes)\r\n - [Gérer les redirections](#g%C3%A9rer-les-redirections)\r\n - [Minifier les CSS/JS](#minifier-les-cssjs)\r\n - [Changer les paramètres des Sessions](#changer-les-param%C3%A8tres-des-sessions)\r\n - [Stockage externe des Sessions](#stockage-externe-des-sessions)\r\n - [Autoriser/Interdire les demandes GET/POST](#autoriserinterdire-les-demandes-getpost)\r\n - [Changer les chevrons <% %> du moteur de template](#changer-les-chevrons---du-moteur-de-template)\r\n - [Changer l'url final des hostname et port d'écoute](#changer-lurl-final-des-hostname-et-port-d%C3%A9coute)\r\n - [Générer les urls dynamiquement](#g%C3%A9n%C3%A9rer-les-urls-dynamiquement)\r\n- [Commandes de lancement](#commandes-de-lancement)\r\n - [--directory](#--directory)\r\n - [--webconfig](#--webconfig)\r\n - [--run](#--run)\r\n - [--httpPort](#--httpport)\r\n - [--generate](#--generate)\r\n- [NodeAtlas comme module npm](#nodeatlas-comme-module-npm)\r\n- [NodeAtlas comme simple serveur web](#nodeatlas-comme-simple-serveur-web)\r\n- [Faire tourner NodeAtlas sur server](#faire-tourner-nodeatlas-sur-server)\r\n - [Dans un environnement Windows Server avec iisnode](#dans-un-environnement-windows-server-avec-iisnode)\r\n - [Dans un environnement Unix avec forever](#dans-un-environnement-unix-avec-forever)\r\n - [Proxy](#proxy)\r\n- [À propos de l'architecture de NodeAtlas](#a-propos-de-l-architecture-de-nodeatlas)\r\n\r\n\r\n\r\n### Roadmap d'avancement du développement ###\r\n\r\n- Fait \r\n - Lancement d'un serveur Express.\r\n - Génération live de maquette HTML.\r\n - Génération complète de maquette HTML.\r\n - Fichier de configuration (Liste des pages avec Url Rewriting).\r\n - Support d'une partie Back-end possible (Controllers / Models).\r\n - Exemple d'utilisation de BDD possible (MySql / MongoDB / etc.).\r\n - Support des Sessions.\r\n - Exemple de Socket.IO avec Handshake.\r\n - Support des middlewares de Express.\r\n - Support des variables personnelles de webconfig.\r\n - Migration Connect 2.x vers Connect 3.x.\r\n - Migration Express 3.x vers Express 4.x.\r\n - Retrait de Connect 3.x.\r\n - Exemple de reverse-proxy pour plusieurs instances sur port 80.\r\n - Lancer NodeAtlas avec un require() depuis un fichier de code.\r\n - Installer automatiquement NodeAtlas depuis npm.\r\n - Minification de CSS/JS à la génération.\r\n - Agrégation de fichier CSS/JS via des Bundles.\r\n - Support d'une BDD de Session (Redis / MongoDB).\r\n - Lancement rapide sans « webconfig » juste en tant que simple serveur web.\r\n - Routage partagé via un fichier externe.\r\n - Bundle partagé via un fichier externe.\r\n\r\n- À venir \r\n - Documentation de l'API (documentation JSDoc du fichier node-atlas.js)\r\n - Compression des images.\r\n - Exemple de Socket.IO 1.0 avec Handshake.\r\n - Support Sass/Less.\r\n - Injection automatique de feuille CSS en style inline (pour les maquettes email).\r\n - Auto-déploiement via transfert (S)FTP.\r\n - ...\r\n\r\n\r\n\r\n### Documentation ###\r\n\r\nEn complément de ce README (Fr), vous avez également accès au,\r\n- [Explications de code](https://haeresis.github.com/NodeAtlas/doc/) (En) et au,\r\n- [détail des fonctions publiques de l'objet NA](https://haeresis.github.com/NodeAtlas/doc/) (En).\r\n\r\n\r\n\r\n\r\n\r\n## Installation ##\r\n\r\nIl y a plusieurs solutions pour installer Node-Atlas :\r\n\r\n- Télécharger NodeAtlas depuis le site officiel [NodeAtlas](https://haeresis.github.com/NodeAtlas/).\r\n\r\n   _Une fois téléchargé, dézippez **NodeAtlas** dans le dossier qui vous conviendra._\r\n\r\n   **Lancez au moins une fois NodeAtlas à la ligne de commande `\\> node </path/to/>node-atlas/node-atlas.js`, pour installer les _node_modules_.**\r\n\r\n- `npm install node-atlas` (recommandé pour un [usage sous forme de module](#nodeatlas-comme-module-npm) dans un projet).\r\n\r\n   _Ceci installera **NodeAtlas** dans le dossier `node_modules/node-atlas` du dossier d'execution de la commande._\r\n\r\n- `npm install -g node-atlas` (recommandé pour un [usage sous forme de module](#nodeatlas-comme-module-npm) dans beaucoup de projet).\r\n\r\n   _Ceci installera **NodeAtlas** dans le dossier `node_modules/node-atlas` global._\r\n\r\n- Cloner le répertoire depuis [GitHub](https://github.com/Haeresis/NodeAtlas/).\r\n\r\n   _Ceci installera **NodeAtlas** dans le dossier d'accueil du clonage._\r\n\r\n   **Lancez au moins une fois NodeAtlas à la ligne de commande `\\> node </path/to/>node-atlas/node-atlas.js`, pour installer les _node_modules_.**\r\n\r\n\r\n\r\n\r\n\r\n## Commencer avec NodeAtlas ##\r\n\r\n### Ensemble de fichiers ###\r\n\r\nAprès avoir installé NodeAtlas quelque part sur votre machine, créez-vous un ensemble de fichiers représentant un site n'importe où ailleurs comme la structure ci-dessous.\r\n\r\n\r\n```\r\nsite-hello-world/\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nVoici le fichier « /site-hello-world/templates/index.htm » :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n    </head>\r\n    <body>\r\n        <div>Ceci est un Hello World !</div>\r\n    </body>\r\n</html>\r\n```\r\n\r\net ci-après, le fichier « /site-hello-world/webconfig.json ».\r\n\r\n### Configuration minimale ###\r\n\r\nVous pouvez faire tourner une page simple avec la configuration minimale du « webconfig.json » ci-dessous\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\néquivalente à\r\n\r\n```js\r\n{ \"routes\": { \"/\": \"index.htm\" } }\r\n```\r\n\r\n\r\n\r\n### Lancer le site avec NodeAtlas ###\r\n\r\n#### À la ligne de commande ####\r\n\r\nPlacez-vous avec un invité de commande dans le dossier « /site-hello-world/ » et exécutez la commande suivante.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js\r\n```\r\n\r\nÀ votre première exécution, NodeAtlas installera tous les « node_modules » nécessaires à son fonctionnement (si vous avez téléchargé hors npm).\r\n\r\nRé-exécutez.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js\r\n```\r\n\r\nVous aurez alors accès à votre « Hello World » à la page : *http://localhost/* dans un navigateur.\r\n\r\n\r\n#### Via un fichier JavaScript ####\r\n\r\nVous pouvez également utiliser NodeAtlas comme un module npm.\r\n\r\n*app.js*\r\n\r\n```javascript\r\nvar nodeAtlas = require(\"node-atlas\");\r\n\r\nnodeAtlas.init();\r\n```\r\n\r\n```\r\n\\> node app.js\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## Différentes configurations du webconfig.json ##\r\n\r\n### Plusieurs pages ###\r\n\r\nCi-dessous un exemple de configuration.\r\n\r\n```js\r\n{\r\n    \"templatesRelativePath\": \"templates/\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/member.html\": {\r\n            \"template\": \"member.htm\"\r\n            \"postSupport\": false,\r\n        },\r\n        \"/member-without-extension/\": {\r\n            \"template\": \"member.htm\"\r\n            \"getSupport\": false,\r\n        },\r\n        \"about.html\": {\r\n            \"template\": \"about.htm\"\r\n        },\r\n        \"/error.html\": {\r\n            \"template\": \"error.htm\",\r\n            \"statusCode\": 404,\r\n            \"mimeType\": \"text/plain\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPour faire tourner cet ensemble de fichier :\r\n\r\n```\r\ntemplates/\r\n— index.htm\r\n— member.htm\r\n— error.htm\r\nwebconfig.json\r\n```\r\n\r\naux adresses :\r\n\r\n- *http://localhost/* (répond à la racine)\r\n- *http://localhost/member.html* (ne répondra pas si demandée en POST)\r\n- *http://localhost/member-without-extension/* (ne répondra pas si demandée en GET)\r\n- *http://localhost/error.html* (renvoi du contenu plein texte (sans balise) avec une erreur 404)\r\n\r\n*Note : Si* ***templatesRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier public est bien* ***templates/***. ***templatesRelativePath*** *est donc utile seulement pour changer le nom/chemin du répertoire.*\r\n\r\n\r\n\r\n### Raccourci de template ###\r\n\r\nLa configuration ci-dessous est équivalente à la configuration de la section juste au dessus \r\n\r\n```js\r\n{\r\n    \"templatesRelativePath\": \"templates/\",\r\n    \"routes\": {\r\n        \"/\": \"index.htm\",\r\n        \"/member.html\": {\r\n            \"template\": \"member.htm\"\r\n            \"postSupport\": false,\r\n        },\r\n        \"/member-without-extension/\": {\r\n            \"template\": \"member.htm\"\r\n            \"getSupport\": false,\r\n        },\r\n        \"about.html\": \"about.htm\",\r\n        \"/error.html\": {\r\n            \"template\": \"error.htm\",\r\n            \"statusCode\": 404,\r\n            \"mimeType\": \"text/plain\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ncar\r\n\r\n```js\r\n\"about.html\": \"about.htm\",\r\n```\r\n\r\nest un raccourci de \r\n\r\n```js\r\n\"about.html\": {\r\n    \"template\": \"about.htm\"\r\n}\r\n```\r\n\r\nÉvidemment ce raccourci ne sert que si `template` est le seul paramètre à déclarer de la route.\r\n\r\n\r\n\r\n### Héberger des images, polices, CSS, JS, etc. ###\r\n\r\nVous pouvez également héberger tout un tas de fichier sur votre site dans un dossier public. Par exemple avec cette configuration :\r\n\r\n```js\r\n{\r\n    \"assetsRelativePath\": \"assets/\"\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net cet ensemble de fichiers :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\n— media/\r\n—— images/\r\n——— logo.png\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/stylesheets/common.css*\r\n- *http://localhost/javascript/common.js*\r\n- *http://localhost/media/images/logo.png*\r\n\r\n*Note : Si* ***assetsRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier public est bien* ***assets/***. ***assetsRelativePath*** *est donc utile seulement pour changer le nom/chemin du répertoire.*\r\n\r\n\r\n\r\n### Gérer des inclusions pour éviter la redondance du code ###\r\n\r\nVous pouvez segmenter vos codes HTML afin de ne pas répéter le code redondant comme par exemple les parties « head » et « foot » ou tout autre fragment de code :\r\n\r\n```js\r\n{\r\n    \"componentsRelativePath\": \"components/\"\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec les fichiers suivants :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/common.css\" media=\"all\" />\r\n    </head>\r\n    <body>\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n        <script async type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/index.htm*\r\n\r\n```html\r\n    <% include head.htm %>\r\n    \r\n    <div>\r\n        <h1>Bienvenue</h1>\r\n        <p>C'est la page d'accueil.</p>\r\n    </div>\r\n    \r\n    <% include foot.htm %>\r\n```\r\n\r\n*templates/members.htm*\r\n\r\n```html\r\n    <% include head.htm %>\r\n    \r\n    <div>\r\n        <h1>Liste des members</h1>\r\n        <p>C'est la page des membres</p>\r\n    </div>\r\n    \r\n    <% include foot.htm %>\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n\r\n*Note : Si* ***componentsRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des includes est bien* ***components/***. ***componentsRelativePath*** *est donc utile seulement pour changer le nom/chemin de répertoire.*\r\n\r\n\r\n\r\n### Gérer des variations au sein d'un même template ###\r\n\r\nIl est possible avec le même template et les mêmes includes de générer des pages au contenu différent (pratique en mode génération d'assets HTML). Activer les variations avec la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"commonVariation\": \"common.json\",\r\n    \"variationsRelativePath\": \"variations/\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"template.htm\",\r\n            \"variation\": \"index.json\",\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"template.htm\",\r\n            \"variation\": \"members.json\",\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec les fichiers suivants :\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— home.css\r\n—— members.css\r\n— javascript/\r\n—— common.js\r\n—— home.js\r\n—— members.js\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nvariations/\r\n— common.json\r\n— index.json\r\n— members.json\r\ntemplates/\r\n— template.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><%= specific.titlePage %></title>\r\n\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<%= common.classCssCommon %>.css\" media=\"all\" />\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"stylesheets/<%= specific.classPage %>.css\" media=\"all\" />\r\n    </head>\r\n    <body class=\"<%= specific.classPage %>\">\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n        <script async type=\"text/javascript\" src=\"javascript/<%= common.classJsCommon %>.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/template.htm*\r\n\r\n```html\r\n    <% include head.htm %>\r\n    \r\n    <div class=\"title\"><%= common.titleWebsite %></div>\r\n    \r\n    <div>\r\n        <h1><%= specific.titlePage %></h1>\r\n        <%- specific.content %>\r\n    </div>\r\n    \r\n    <% include foot.htm %>\r\n```\r\n\r\n*variations/common.json*\r\n\r\n```js\r\n{\r\n    \"titleWebsite\": \"Titre du site\",\r\n    \"classCssCommon\": \"common\",\r\n    \"classJsCommon\": \"common\"\r\n}\r\n```\r\n\r\n*variations/index.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Bienvenue\",\r\n    \"classPage\": \"index\",\r\n    \"content\": \"<p>C'est la page d'accueil.</p>\"\r\n}\r\n```\r\n\r\n*variations/members.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Liste des members\",\r\n    \"classPage\": \"members\",\r\n    \"content\": \"<p>C'est la page des membres</p>\"\r\n}\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n\r\n*Note : Si* ***variationsRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des variations est bien* ***variations/***. ***variationsRelativePath*** *est donc utile seulement pour changer le nom/chemin de répertoire.*\r\n\r\n\r\n\r\n### Gérer le multilingue ###\r\n\r\n#### Toutes les langues sur le même site ####\r\n\r\nSur le même principe, les variations peuvent être utilisées pour créer la même page, mais dans des langues différentes :\r\n\r\n```js\r\n{\r\n    \"languageCode\": \"en-gb\",\r\n    \"variationsRelativePath\": \"languages/\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"landing.htm\",\r\n            \"variation\": \"landing.json\"\r\n        },\r\n        \"/home/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\"\r\n        },\r\n        \"/accueil/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\",\r\n            \"languageCode\": \"fr-fr\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : Dans cet exemple j'ai décidé de me passer d'un fichier de variation commune, car je n'ai pas précisé de* ***commonVariation***. *J'ai également totalement arbitrairement décidé de renommer mon dossier* ***variations/*** *en* ***languages/***.\r\n\r\navec les fichiers suivants :\r\n\r\n```\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nlanguages/\r\n— landing.json\r\n— en-gb\r\n—— home.json\r\n— fr-fr\r\n—— home.json\r\ntemplates/\r\n— landing.htm\r\n— home.htm\r\nwebconfig.json\r\n```\r\n\r\n*components/head.htm*\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"<%= languageCode %>\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title><%= specific.titlePage %></title>\r\n    </head>\r\n    <body class=\"<%= specific.classPage %>\">\r\n```\r\n\r\n*components/foot.htm*\r\n\r\n```html\r\n    </body>\r\n</html>\r\n```\r\n\r\n*templates/landing.htm*\r\n\r\n```html\r\n    <% include head.htm %>\r\n    \r\n    <select>\r\n        <% for (var i = 0; i < specific.selectLabel.length; i++) { %>\r\n        <option><%= specific.selectLabel[i] %></option>\r\n        <% } %>\r\n    </select>\r\n    \r\n    <% include foot.htm %>\r\n```\r\n\r\n*templates/home.htm*\r\n\r\n```html\r\n    <% include head.htm %>\r\n    \r\n    <div>\r\n        <h1><%= specific.titlePage %></h1>\r\n        <%- specific.content %>\r\n    </div>\r\n    \r\n    <% include foot.htm %>\r\n```\r\n\r\n*languages/landing.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Landing\",\r\n    \"classPage\": \"landing\",\r\n    \"selectLabel\": [\r\n        \"English\",\r\n        \"Français\"\r\n    ]\r\n}\r\n```\r\n\r\n*languages/en-gb/home.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Welcome\",\r\n    \"classPage\": \"home\",\r\n    \"content\": \"<p>This is a home page.</p>\"\r\n}\r\n```\r\n\r\n*languages/fr-fr/home.json*\r\n\r\n```js\r\n{\r\n    \"titlePage\": \"Bienvenue\",\r\n    \"classPage\": \"home\",\r\n    \"content\": \"<p>C'est la page d'accueil.</p>\"\r\n}\r\n```\r\n\r\nvous aurez accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/home/*\r\n- *http://localhost/accueil/*\r\n\r\n*Note : Par défaut c'est le* ***languageCode*** *racine qui conditionne la langue d'affichage du site. Cependant, spécifiquement par page on peut changer la langue avec également le* ***languageCode****. *Il faut également savoir que dès que le site ou une page à un* ***languageCode*** *dans la configuration, ses fichiers de variations doivent être placées dans un sous répertoire portant le nom du* ***languageCode***.\r\n\r\n\r\n#### Utiliser seulement les variations avec le multilingue actif ####\r\n\r\nVous avez peut-être constaté dans l'exemple précédent que le fichier `landing.json` n'était pas dans le dossier `en-gb/` ou `fr-fr/`. Cela est tout à fait possible et signifie qu'il sera utilisé dans les langues qui ne le possèdent pas dans leur dossier.\r\n\r\nAussi, quand un `languageCode` est précisé, NodeAtlas part d'abord chercher la valeur dans le fichier du dossier correspondant. Si celle-ci n'y ai pas, alors il part la chercher dans le dossier parent (celui utilisé en standard pour les variations sans multilingue).\r\n\r\nCela va vous permettre par exemple de manager la langue maître directement dans le dossier de variation. Ainsi avec l'exemple suivant :\r\n\r\n```\r\n...\r\nvariations/\r\n— common.json\r\n— home.json\r\n— fr-fr\r\n—— common.json\r\n—— home.json\r\n...\r\n```\r\n\r\nvous pouvez \r\n\r\n- gérer la version `en-gb` directement à la racine de `variations/` (comme NodeAtlas ne trouve rien dans `en-gb` il utilise alors les valeurs des fichiers racines) et\r\n- gérer la version `fr-fr` dans le dossier `fr-fr/`,\r\n\r\nainsi, si une phrase n'est pas encore traduite dans un fichier `fr-fr`, au lieu de renvoyer une erreur, NodeAtlas renverra la version racine, soit la version `en-gb`.\r\n\r\n\r\n#### À chaque langue sa configuration ####\r\n\r\nVous pouvez également décider de faire tourner chaque langue dans un « webconfig.json » différent. Avec l'ensemble de fichier suivant :\r\n\r\n```\r\ncomponents/\r\n— head.htm\r\n— foot.htm\r\nvariations/\r\n— landing.json\r\n— en-gb\r\n—— home.json\r\n—— members.json\r\n— fr-fr\r\n—— home.json\r\n—— members.json\r\ntemplates/\r\n— landing.htm\r\n— home.htm\r\n— members.htm\r\nwebconfig.json\r\nwebconfig.en-gb.json\r\nwebconfig.fr-fr.json\r\n```\r\n\r\nvous pourriez avoir les « webconfig.json » suivant :\r\n\r\n*webconfig.json*\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"landing.htm\",\r\n            \"variation\": \"landing.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*webconfig.en-gb.json*\r\n\r\n```js\r\n{\r\n    \"httpPort\": 81,\r\n    \"urlRelativeSubPath\": \"/english\",\r\n    \"languageCode\": \"en-gb\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\"\r\n        }, \r\n        \"/members-list/\": {\r\n            \"template\": \"members.htm\",\r\n            \"variation\": \"members.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*webconfig.fr-fr.json*\r\n\r\n```js\r\n{\r\n    \"httpPort\": 82,\r\n    \"urlRelativeSubPath\": \"/francais\",\r\n    \"languageCode\": \"fr-fr\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"home.htm\",\r\n            \"variation\": \"home.json\"\r\n        }, \r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\",\r\n            \"variation\": \"members.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net avoir accès aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost:81/english/*\r\n- *http://localhost:81/english/*\r\n- *http://localhost:81/english/members-list/*\r\n- *http://localhost:82/francais/*\r\n- *http://localhost:82/francais/liste-des-membres/*\r\n\r\nIl est ensuite possible de faire du reverse proxy avec [Bouncy](#proxy) (par exemple) pour ramener l'ensemble des urls sur le port 80 afin d'obtenir :\r\n\r\n- *http://www.website.ext/*\r\n- *http://www.website.ext/english/*\r\n- *http://www.website.ext/english/*\r\n- *http://www.website.ext/english/members-list/*\r\n- *http://www.website.ext/francais/*\r\n- *http://www.website.ext/francais/liste-des-membres/*\r\n\r\n\r\n\r\n### Utiliser NodeAtlas pour générer des assets HTML###\r\n\r\n#### Générer des assets HTML ####\r\n\r\nAvec la configuration suivante il est possible de générer des assets HTML du rendu de chaque page dans un fichier associé. Le fichier sera (re)créé à chaque affichage de la page dans votre navigateur.\r\n\r\n```js\r\n{\r\n    \"autoGenerate\": true,\r\n    \"generatesRelativePath\": \"generate/\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"generate\": \"/index.html\"\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\",\r\n            \"generate\": \"/members/list.html\"\r\n        },\r\n        \"/no/generate/property/\": {\r\n            \"template\": \"members.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net l'ensemble de fichiers suivant :\r\n\r\n```\r\n{\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\ngenerate/\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n}\r\n```\r\n\r\non peut créer physiquement les assets :\r\n\r\n```\r\n{\r\ngenerate/\r\n— index.html\r\n— members/\r\n—— list.html\r\n— no/\r\n—— generate/\r\n——— property <== Ceci est un fichier\r\ntemplates/\r\n— index.htm\r\n— members.htm\r\nwebconfig.json\r\n}\r\n```\r\n\r\nen se rendant aux adresses :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n\r\nLa génération s'enclenche quand on affiche la page uniquement parce que ***autoGenerate*** existe et est à ***true***. S'il est passé à ***false*** (ou enlevé) le seul moyen de générer toutes les pages du site sera via la commande `node </path/to/>node-atlas/server.js --generate` qui génèrera toutes les pages d'un coup. Bien entendu dans tous les cas cette commande marche et permet de régénérer toutes les pages suite à un changement telle qu'une modification dans un composant appelé sur toutes les pages.\r\n\r\n*Note : Si* ***generatesRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des générations est bien* ***generates/***. ***generatesRelativePath*** *est donc utile seulement pour changer le nom/chemin répertoire.*\r\n\r\n\r\n#### Générer un site sans partie serveur ####\r\n\r\nIl est également possible de manager la création d'un site en simple page HTML avec la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"languageCode\": \"fr-fr\",\r\n    \"indexPage\": true,\r\n    \"autoGenerate\": true,\r\n    \"generatesRelativePath\": \"../HTML/\",\r\n    \"assetsRelativePath\": \"../HTML/\",\r\n    \"routes\": {\r\n        \"/cv.html\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/en/cv.html\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\",\r\n            \"languageCode\": \"en\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net l'ensemble de fichiers suivant :\r\n\r\n```\r\nHTML/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\nengine/\r\n— variations/\r\n—— fr-fr/\r\n——— index.json\r\n—— en/\r\n——— index.json\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nÀ l'adresse *http://localhost/* s'affichera la liste des pages composants votre site (grâce à **indexPage** à **true**).\r\n\r\nIl ne restera plus qu'à, une fois votre travail terminé, admirer votre site HTML dans le dossier :\r\n\r\n```\r\nHTML/\r\n— stylesheets/\r\n—— common.css\r\n— javascript/\r\n—— common.js\r\n— cv.html\r\n— en/\r\n—— cv.html\r\n```\r\n\r\n\r\n\r\n### Utiliser NodeAtlas pour faire tourner un site (partie Back-end) ###\r\n\r\nVous pouvez soit utiliser un contrôleur unique pour tout le site et/ou également des contrôleurs par template et variation.\r\n\r\nPour le contrôleur maître, utilisez par exemple cette configuration :\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"controllersRelativePath\": \"controllers/\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/categories/\": {\r\n            \"template\": \"categories.htm\",\r\n            \"variation\": \"categories.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec cet ensemble de fichier\r\n\r\n```\r\nvariations/\r\n— index.json\r\n— categories.json\r\ncontrollers/\r\n— common.js\r\nmodels/\r\n— Article.js\r\n— Category.js\r\ntemplates/\r\n— index.htm\r\n— categories.htm\r\nwebconfig.json\r\n```\r\n\r\nEt le fichier « common.js » contenant par exemple :\r\n\r\n- De quoi charger des modules supplémentaires à NodeAtlas.\r\n- De quoi configurer les modules supplémentaires.\r\n\r\n```js\r\n// Création d'un objet global au fichier.\r\nvar website = {};\r\n\r\n\r\n\r\n/**********************/\r\n/* Chargement modules */\r\n/**********************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    // Chargement des modules pour ce site dans l'objet NodeAtlas.\r\n    publics.loadModules = function (NA) {\r\n        // Associations de chaque module pour y avoir accès partout.\r\n        NA.modules.cookie = require('cookie');\r\n        NA.modules.mongoose = require('mongoose');\r\n\r\n        // Aller chercher un module spécifiquement dans le `node_modules` du site web.\r\n        NA.modules.socketio = require(NA.websiteModulesPath + 'socket.io');\r\n\r\n        // Aller chercher un module spécifiquement dans le `node_modules` du moteur NodeAtlas.\r\n        NA.modules.socketio = require(NA.nodeAtlasModulesPath + 'ejs.io');\r\n\r\n        // Ré-injection de l'objet « NodeAtlas » surchargé dans le moteur.\r\n        return NA;\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/*****************************/\r\n/* Configuration des modules */\r\n/*****************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    var privates = {};\r\n\r\n    // Exemple d'utilisation de MongoDB et Mongoose.\r\n    privates.mongooseInitialization = function (mongoose, callback) {\r\n        // Connexion à la base « blog ».\r\n        mongoose.connect('mongodb://127.0.0.1:27017/blog', function (error) {\r\n            if (error) {\r\n                throw error;\r\n            };\r\n\r\n            // Suite.\r\n            callback(mongoose);\r\n        });\r\n        \r\n        // Gestion de connexion.\r\n        mongoose.connection.on('error', function (error) {\r\n            console.log('Erreur pour la connexion par défaut à Mongoose: ' + error);\r\n        });\r\n\r\n        // Gestion des déconnexion.\r\n        mongoose.connection.on('disconnected', function () {\r\n            console.log('Connexion par défaut à Mongoose déconnectée.');\r\n        });\r\n        process.on('SIGINT', function (error) {\r\n            mongoose.connection.close(function () {\r\n                console.log('Connexion par défaut à Mongoose déconnectée en raison de l\\'arrêt de l\\'app termination');\r\n                process.exit(0);\r\n            });\r\n        });\r\n    };\r\n\r\n    // Mise à disposition des Schémas Mongoose.\r\n    privates.mongooseShemas = function (mongoose) {\r\n        publics.shemas = {};\r\n\r\n        // Chargement des Schémas.\r\n        publics.shemas.article = require('../models/Article');\r\n        publics.shemas.category = require('../models/Category');\r\n\r\n        // Mise à disposition des Schémas.\r\n        mongoose.model('article', website.shemas.article, 'article');\r\n        mongoose.model('category', website.shemas.category, 'category');\r\n    };\r\n\r\n    // Exemple d'utilisation de Socket.IO.\r\n    privates.socketIoInitialisation = function (socketio, NA, callback) {\r\n        var optionIo = (NA.webconfig.urlRelativeSubPath) ? { path: NA.webconfig.urlRelativeSubPath + '/socket.io' } : undefined,\r\n            io = socketio(NA.server, optionIo),\r\n            cookie = NA.modules.cookie,\r\n            cookieParser = NA.modules.cookieParser;\r\n\r\n        // Synchronisation des Sessions avec Socket.IO.\r\n        io.use(function(socket, next) {\r\n            var handshakeData = socket.request;\r\n\r\n            // Fallback si les cookies ne sont pas gérés.\r\n            if (!handshakeData.headers.cookie) {\r\n                return next(new Error('Cookie de session requis.'));\r\n            }\r\n\r\n            // Transformation de la String cookie en Objet JSON.\r\n            handshakeData.cookie = cookie.parse(handshakeData.headers.cookie);\r\n\r\n            // Vérification de la signature du cookie.\r\n            handshakeData.cookie = cookieParser.signedCookies(handshakeData.cookie, NA.webconfig.session.secret);\r\n\r\n            // Garder à porté l'ID de Session.\r\n            handshakeData.sessionID = handshakeData.cookie[NA.webconfig.session.key];\r\n\r\n            // Accepter le cookie.\r\n            NA.sessionStore.load(handshakeData.sessionID, function (error, session) {\r\n                if (error || !session) {\r\n                    return next(new Error('Aucune session récupérée.'));\r\n                } else {\r\n                    handshakeData.session = session;                    \r\n                    next();\r\n                }\r\n            });\r\n        });\r\n\r\n        // Suite.\r\n        callback(io);\r\n    };\r\n\r\n    // Ajout d'évênements d'écoute pour un controller spécifique « index.js » (voir exemple dans le fichier d'après).\r\n    privates.socketIoEvents = function (io, NA) {\r\n        var params = {};\r\n\r\n        params.io = io;\r\n        params.NA = NA;\r\n\r\n        // Évênements pour la page article (voir exemple dans le fichier d'après).\r\n        require('./index').asynchrone(params);\r\n    };\r\n\r\n    // Configuration de tous les modules\r\n    publics.setConfigurations = function (NA, callback) {\r\n        var mongoose = NA.modules.mongoose,\r\n            socketio = NA.modules.socketio;\r\n\r\n        // Initialisation de Mongoose.\r\n        privates.mongooseInitialization(mongoose, function (mongoose) {\r\n\r\n            // Injection de Schémas dans Mongoose.\r\n            privates.mongooseShemas(mongoose);\r\n\r\n            // Initialisation de Socket IO.\r\n            privates.socketIoInitialisation(socketio, NA, function (io) {\r\n\r\n                // Écoute d'action Socket IO.\r\n                privates.socketIoEvents(io, NA);\r\n\r\n                // Ré-injection do l'objet « NodeAtlas » surchargé dans le moteur.\r\n                callback(NA);                   \r\n            });\r\n        });\r\n\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/*******************************/\r\n/* Interception des Variations */\r\n/*******************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    // On intervient juste avant l'assemblage complet EJS.\r\n    publics.preRender = function (params, mainCallback) {\r\n        var variation = params.variation;\r\n\r\n        // Ici on modifie les variables de variations.\r\n        // voir exemple dans le fichier d'après.\r\n\r\n        // On ré-injecte les modifications.\r\n        mainCallback(variation);\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/**********************************************************/\r\n/* Interception dela sortie HTML pour jQuery côté serveur */\r\n/**********************************************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    // On intervient juste avant le renvoi HTML auprès du client (response).\r\n    publics.render = function (params, mainCallback) {\r\n        var data = params.data;\r\n\r\n        // Ici on peut manipuler le DOM côté serveur avant retour client.\r\n        // voir exemple dans le fichier d'après.\r\n\r\n        // On ré-injecte les modifications.\r\n        mainCallback(data);\r\n    };\r\n\r\n}(website));\r\n\r\n\r\n\r\n/**************************************************************/\r\n/* Mise à dispositions des fonctionr pour le moteur NodeAtlas */\r\n/**************************************************************/\r\n\r\nexports.loadModules = website.loadModules;\r\nexports.setConfigurations = website.setConfigurations;\r\nexports.preRender = website.preRender;\r\nexports.render = website.render;\r\n```\r\n\r\nAu lieu de se servir de preRender et render dans le fichier common.js effectif pour tout le site, on peut utiliser des contrôleurs spécifiques par page. La configuration précédente devient alors :\r\n\r\n```js\r\n{\r\n    \"commonController\": \"common.js\",\r\n    \"controllersRelativePath\": \"controllers/\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\",\r\n            \"controller\": \"index.js\",\r\n            \"variation\": \"index.json\"\r\n        },\r\n        \"/categories/\": {\r\n            \"template\": \"categories.htm\",\r\n            \"controller\": \"categories.js\",\r\n            \"variation\": \"categories.json\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec cet ensemble de fichier\r\n\r\n```\r\nvariations/\r\n— index.json\r\n— categories.json\r\ncontrollers/\r\n— modules/\r\n—— list-of-article.js/\r\n— common.js\r\n- index.js\r\n- categories.js\r\nmodels/\r\n— Article.js\r\n— Category.js\r\ntemplates/\r\n— index.htm\r\n— categories.htm\r\nwebconfig.json\r\n```\r\n\r\navec un fichier « index.js » contenant par exemple :\r\n\r\n- De quoi modifier les variations dynamiquement avant affichage.\r\n- De quoi faire des modifications jQuery côté serveur.\r\n- De quoi faire des échanges asynchrones avec Socket.IO.\r\n\r\n```js\r\nvar website = {};\r\nwebsite.index = {};\r\n\r\n\r\n\r\n/*******************************/\r\n/* Interception des Variations */\r\n/*******************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    var privates = {};\r\n\r\n    // On charge une fonction ou un ensemble de fonctions.\r\n    privates.listOfArticles = require('./modules/list-of-articles');\r\n\r\n    // On intervient juste avant l'assemblage complet EJS.\r\n    publics.preRender = function (params, mainCallback) {\r\n        var variation = params.variation,\r\n            mongoose = params.NA.modules.mongoose,\r\n            Article = mongoose.model('article');\r\n\r\n\r\n        // Interception possible de toutes les variables de « variation/common.js ».\r\n        console.log(variation.common.title); // Renvoi le titre stocké dans « variation/common.js ».\r\n        variation.common.title = \"Nouveau title\"; // Redéfini un titre.\r\n        console.log(variation.common.title); // Renvoi « Nouveau title » et est accessible côté template via « <%= common.title ». \r\n\r\n        // Interception possible de toutes les variables de « variation/index.js » (car on est dans le spécific « index.js »).\r\n        variation.specific.title = \"Nouveau title\"; // Redéfini un titre qui est accessible côté template via « <%= specific.title ».\r\n        variation.specific.newProperty = \"Nouvelle propriété\"; // Défini une propriété n'existant pas initialement dans le fichier de variation qui est accessible côté template via « <%= specific.newProperty ».\r\n\r\n        // Interception possible de la configuration de la page courante.\r\n        console.log(variation.pageRoutes) // Retourne « / » pour « index », « /categories/ » pour categories, etc.\r\n        if (/* test de non existance */) { \r\n            variation.currentRouteParameters.statusCode = 404; // La page sera en 404.\r\n        } else {\r\n            variation.currentRouteParameters.statusCode = 200; // La page sera en 200.\r\n        }\r\n\r\n        // Création d'un nouvel ensemble de variation dynamique pour les templates.\r\n        variation.backend = {}; // Accessible via « <%= backend.<propriétés> %> ».\r\n\r\n        privates.listOfArticles(Article, function (listOfArticles) {\r\n\r\n            // Disponibilité des données des articles côté template derrière\r\n            variation.backend.articles = listOfArticles; // « <%= backend.articles.<propriétés> %> ».\r\n\r\n            // On ré-injecte les modifications.\r\n            mainCallback(variation);\r\n        });\r\n    };\r\n\r\n}(website.index));\r\n\r\n\r\n\r\n/***********************************************************/\r\n/* Interception de la sortie HTML pour jQuery côté serveur */\r\n/***********************************************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n    \r\n    // On intervient juste avant le renvoi HTML auprès du client (response).\r\n    publics.render = function (params, mainCallback) {\r\n        var data = params.data,\r\n            NA = params.NA,\r\n            jsdom = NA.modules.jsdom; // Récupération de jsdom pour parcourir le DOM avec jQuery.\r\n\r\n        // On charge le fichier jQuery défini dans le moteur, mais on peut utiliser une autre version.\r\n        jsdom.env(data, [NA.webconfig.jQueryVersion], function (error, window) {\r\n            var $ = window.$;\r\n\r\n            // Après tous les h2 de la sortie HTML « data »,\r\n            $(\"h2\").each(function (i) {\r\n                var $this = $(this);\r\n\r\n                // ... on créé une div,\r\n                $this.after(\r\n                    // ... on injecte le contenu du h2 dans la div,\r\n                    $(\"<div>\").html($this.html())\r\n                )\r\n                // ... et supprime le h2.\r\n                $this.remove();\r\n            });\r\n\r\n            // On re-créer une nouvelle sortie HTML avec nos modifications.\r\n            data = window.document.doctype.toString() + window.document.innerHTML.replace(/<script class=.jsdom.+><\\/script><\\/html>/g, \"</html>\"); // (Si vous connaissez un moyen plus élégant d'enlever ce script ajouté automatiquement « <script class=.jsdom.+><\\/script><\\/html> », faites moi signe !)\r\n\r\n            // On ré-injecte les modifications.\r\n            mainCallback(data);\r\n        });\r\n    };\r\n\r\n}(website.index));\r\n\r\n\r\n\r\n/***********************************************/\r\n/* Gestion des évênements Socket.IO asynchrone */\r\n/***********************************************/\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    var privates = {};\r\n\r\n    // Intégralité des actions Websocket possible pour ce template.\r\n    publics.asynchrone = function (params) {\r\n        var io = params.io,\r\n            mongoose = params.NA.modules.mongoose,\r\n            marked = params.NA.modules.marked,\r\n            Article = mongoose.model('article'),\r\n            renderer = new marked.Renderer();\r\n\r\n        // Dès qu'on a un lien valide entre le client et notre back,\r\n        io.sockets.on('connection', function (socket) {\r\n            var sessionID = socket.request.sessionID,\r\n                session = socket.request.session;\r\n\r\n            // ... resté à l'écoute de la demande « create-article-button »,\r\n            socket.on('create-article-button', function (data) {\r\n\r\n                // ... et répondre à cette demande en créant un nouvelle article si elle vient\r\n                // avec les information envoyées via « data ».\r\n                var article = new Article({\r\n                    _id: mongoose.Types.ObjectId(),\r\n                    title: data.title,\r\n                    urn: data.urn,\r\n                });\r\n\r\n                // Si l'utilisateur est connecté.\r\n                if (session.account) {\r\n\r\n                    / ... on créer sauve article en base.\r\n                    article.save(function (error) {\r\n                        if (error) { \r\n                            throw error;\r\n                        }\r\n\r\n                        // Et on répond à tous les clients avec un jeu de donnée dans data.\r\n                        io.sockets.emit('create-article-button', data);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n}(website.index));\r\n\r\n\r\n\r\n/***********************************************************/\r\n/* Interception de la sortie HTML pour jQuery côté serveur */\r\n/***********************************************************/\r\n\r\nexports.preRender = website.index.preRender;\r\nexports.render = website.index.render;\r\nexports.asynchrone = website.index.asynchrone; // Utilisé non pas par « NodeAtlas » mais par « common.js » (voir fichier précédent).\r\n```\r\n\r\n*Note : Si* ***controllersRelativePath*** *n'est pas présent dans « webconfig.js », par défaut le dossier des controlleurs est bien* ***controllers/***. ***controllersRelativePath*** *est donc utile seulement pour changer le nom/chemin du répertoire.*\r\n\r\n\r\n\r\n### Changer les paramètres d'url ###\r\n\r\nPar défaut, si vous utilisez la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ncela est identique à utiliser celle-ci :\r\n\r\n```js\r\n{\r\n    \"httpHostname\": \"localhost\",\r\n    \"httpPort\": 80,\r\n    \"httpSecure\": false,\r\n    \"urlRelativeSubPath\": \"\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net vous pourrez accéder à l'url : *http://localhost/*.\r\n\r\nChangez alors la configuration en ceci :\r\n\r\n```js\r\n{\r\n    \"httpHostname\": \"127.0.0.1\",\r\n    \"httpPort\": 7777,\r\n    \"httpSecure\": true,\r\n    \"urlRelativeSubPath\": \"/sub/folder\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\npour accéder à : *https://127.0.0.1:7777/sub/folder/*\r\n\r\n\r\n\r\n### Créer ses propres variables de webconfig ###\r\n\r\nImaginons deux webconfigs dans lesquels nous allons créer nos propres variables comme suit :\r\n\r\n1. « webconfig.json »\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }, \r\n    \"_minified\": \"\"\r\n}\r\n```\r\n\r\n2. « webconfig.prod.json »\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }, \r\n    \"_minified\": \".min\"\r\n}\r\n```\r\n\r\navec cet ensemble de fichiers\r\n\r\n```\r\nassets/\r\n— stylesheets/\r\n—— common.css\r\n—— common.min.css\r\n— javascript/\r\n—— common.js\r\n—— common.min.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\net « index.htm » contenant :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common<%= webconfig._minified %>.css\" />\r\n    </head>\r\n    <body>\r\n        <div>Ceci est un test de récupération de ressources minifiées/non-minifiées.</div>\r\n        <script type=\"text/javascript\" src=\"javascript/common<%= webconfig._minified %>.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\nEn lançant (depuis le dossier du site) la commande :\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js\r\n```\r\n\r\nNous aurons à l'adresse « http://localhost/ » la sortie suivante avec les fichiers non minifiés :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.css\" />\r\n    </head>\r\n    <body>\r\n        <div>Ceci est un test de récupération de ressources minifiées/non-minifiées.</div>\r\n        <script type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\nCependant en lançant la commande :\r\n\r\n```\r\n\\> node </path/to/>node-atlas/server.js --webconfig webconfig.prod.json \r\n```\r\n\r\nNous aurons à l'adresse « http://localhost/ » la sortie suivante avec les fichiers minifiés :\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"fr-fr\">\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Hello world</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.min.css\" />\r\n    </head>\r\n    <body>\r\n        <div>Ceci est un test de récupération de ressources minifiées/non-minifiées.</div>\r\n        <script type=\"text/javascript\" src=\"javascript/common.min.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n*Note : Il vaut mieux préfixer ses variables personnelles avec « _ » pour éviter des conflits avec des variables de configuration existantes ou futures.*\r\n\r\n\r\n\r\n### Gérer le routage (Url Rewriting) ###\r\n\r\nBien que vous puissiez paramétrer des urls statiques, vous pouvez également paramétrer une écoute d'url dynamique !\r\n\r\n#### Standard ###\r\n\r\nAvec la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/liste-des-membres/:member/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nvous pourrez accéder à :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/*\r\n- *http://localhost/liste-des-membres/toto/*\r\n- *http://localhost/liste-des-membres/bob-eponge99/*\r\n- *http://localhost/liste-des-membres/node-atlas/*\r\n- *http://localhost/liste-des-membres/etc/*\r\n\r\net récupérer les valeurs de `:member` dans le `preRender` (common et specific).\r\n\r\n```js\r\nexports.preRender = function (params, mainCallback) {\r\n    var variation = params.variation;\r\n\r\n    console.log(variation.params.member); \r\n    // \\> 'toto', 'bob-eponge99', 'node-atlas' ou 'etc'.\r\n\r\n    mainCallback(variation);\r\n}\r\n```\r\n\r\nLes règles de création d'url dynamique sont celles de [Express.js](http://expressjs.com/4x/api.html#req.params).\r\n\r\n#### Expressions Régulières ###\r\n\r\nVous pouvez également activer les expressions régulières pour un chemin précis avec `regExp`. Si celui-ci vaut `true`, le précédent mode ne fonctionne plus et vous passez en mode Expression Régulière. Si `regExp` est une chaine de caractère, celle-ci fait office de flag (g, i, m ou y).\r\n\r\nVoyez la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/liste-des-membres/([-a-z0-9]+)/?\": {\r\n            \"template\": \"members.htm\",\r\n            \"regExp\": \"g\"\r\n        },\r\n        \"/liste-des-membres/?\": {\r\n            \"template\": \"members.htm\",\r\n            \"regExp\": true\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nvous pourrez accéder à :\r\n\r\n- *http://localhost/*\r\n- *http://localhost/liste-des-membres/* _(ou *https://localhost/liste-des-membres*)_\r\n- *http://localhost/liste-des-membres/toto/* _(ou *https://localhost/liste-des-membres/toto*)_\r\n- *http://localhost/liste-des-membres/bob-eponge99/* _(ou *https://localhost/liste-des-membres/bob-eponge99*)_\r\n- *http://localhost/liste-des-membres/node-atlas/* _(ou *https://localhost/liste-des-membres/node-atlas*)_\r\n- *http://localhost/liste-des-membres/etc/* _(ou *https://localhost/liste-des-membres/etc*)_\r\n\r\net récupérer les valeurs de `([-a-z0-9]+)` dans le `preRender` (common et specific).\r\n\r\n```js\r\nexports.preRender = function (params, mainCallback) {\r\n    var variation = params.variation;\r\n\r\n    if (variation.params && variation.params[0]) { variation.params.member = variation.params[0]; }\r\n    // variation.params[1] pour le deuxième match, etc...\r\n\r\n    console.log(variation.params.member); \r\n    // \\> 'toto', 'bob-eponge99', 'node-atlas' ou 'etc'.\r\n\r\n    mainCallback(variation);\r\n}\r\n```\r\n\r\nLes règles de création d'url dynamique avec `regExp` sont celles des [RegExp JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\r\n\r\n#### Routage dans un fichier partagé ####\r\n\r\nAfin de ne pas ré-écrire une longue liste de route dans un fichier `webconfig.json` à destination de votre environnement de développement et `webconfig.prod.json` à destination de votre environnement de production, vous pouvez mutaliser la déclaration des routes dans un fichier de votre choix. Par convention, c'est le fichier `routes.json`. \r\n\r\nPar exemple :\r\n\r\nL'ensemble de fichier suivant\r\n\r\n```\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\navec `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net avec `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\npourrait devenir l'ensemble de fichier suivant \r\n\r\n```\r\ntemplates/\r\n— index.htm\r\nroutes.json\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\navec `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"routes\": \"routes.json\"\r\n}\r\n```\r\n\r\navec `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"routes\": \"routes.json\"\r\n}\r\n```\r\n\r\net `routes.json`\r\n\r\n```json\r\n{\r\n    \"/\": {\r\n        \"template\": \"index.htm\"\r\n    }\r\n}\r\n```\r\n\r\n*Note : Vous pouvez vous créer plusieurs fichier de route comme `routes.en.json` et `routes.fr.json` et associer chacun d'eux dans un ensemble de webconfig paramètrer pour faire tourner un site dans diverses langues.*\r\n\r\n\r\n\r\n### Gérer les pages inexistantes ###\r\n\r\nPour afficher une page personnalisée quand une ressource n'est pas trouvée il faut :\r\n\r\n1. Préparer une page 404.\r\n2. Remplir le paramètre `pageNotFound` avec comme `value` la `key` de la page 404 préparée.\r\n\r\nVoyez l'exemple ci-dessous :\r\n\r\n```js\r\n{\r\n    \"pageNotFound\": \"/pages-inexistantes/\",\r\n    \"routes\": {\r\n        \"/pages-inexistantes/\": {\r\n            \"template\": \"error.htm\",\r\n            \"statusCode\": 404\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nvous pourrez accéder à :\r\n\r\n- *http://localhost/cette-page-n-existe-pas.html*\r\n- *http://localhost/elle/non/plus/*\r\n- *http://localhost/etc*\r\n\r\n\r\n\r\n### Gérer les redirections ###\r\n\r\nPour aller à une autre adresse (redirection 301 ou 302) quand vous arrivez à une url il faut utiliser le paramètre `redirect`.\r\n\r\n#### En statique ####\r\n\r\nVoyez l'exemple ci-dessous :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/liste-des-membres\": {\r\n            \"redirect\": \"/liste-des-membres/\",\r\n            \"statusCode\": 301,\r\n        },\r\n        \"/aller-sur-node-atlas/\": {\r\n            \"redirect\": \"http://haeresis.github.io/NodeAtlas/\",\r\n            \"statusCode\": 302,\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nVous serez redirigé :\r\n\r\n- sur `http://localhost/liste-des-membres/` quand vous accéderez à `http://localhost/liste-des-membres` avec une entête _redirection permanente_.\r\n- sur `http://haeresis.github.io/NodeAtlas/` quand vous accéderez à `http://localhost/aller-sur-node-atlas/` avec une entête _redirection temporaire_.\r\n\r\n#### En dynamique ####\r\n\r\nVoyez l'exemple ci-dessous :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/liste-des-membres/:member/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/liste-des-membres/:member\": {\r\n            \"redirect\": \"/membres/:member/\"\r\n            \"statusCode\": 301\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nVous serez redirigé sur `http://localhost/liste-des-membres/haeresis/` quand vous accéderez à `http://localhost/liste-des-membres/haeresis` avec une entête _redirection permanente_.\r\n\r\n#### Avec expressions régulières ####\r\n\r\nVoyez l'exemple ci-dessous :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/membres/([-a-z0-9]+)/\": {\r\n            \"template\": \"members.htm\",\r\n            \"regExp\": true\r\n        },\r\n        \"/liste-des-membres/([-a-z0-9]+)/\": {\r\n            \"redirect\": \"/membres/$0$/\"\r\n            \"statusCode\": 301,\r\n            \"regExp\": true\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nVous serez redirigé sur `http://localhost/membres/haeresis/` quand vous accéderez à `http://localhost/liste-des-membres/haeresis/` avec une entête _redirection permanente_.\r\n\r\nPour le second *match* utilisez $1$, pour le troisième $2$, etc.\r\n\r\n\r\n\r\n### Minifier les CSS/JS ###\r\n\r\nVous pouvez automatiquement générer des fichiers CSS et JS minifiés et offusqués en créant des Bundles en référençant les groupes de fichiers d'entré par leur chemin d'accès et le chemin du fichier de sortie. Vous pouvez bien entendu en faire autant que vous le souhaité. La gérération des fichiers ce fait à chaque démarrage de NodeAtlas que ce soit en tant que serveur ou via la commande `--generate` pour peut qu'un Bundle existe dans le Webconfig.\r\n\r\n#### Créer des Bundles ####\r\n\r\nAvec la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"files\": {\r\n                \"javascript/boot.min.js\": [\r\n                    \"javascript/modernizr.js\",\r\n                    \"javascript/yepnot.js\",\r\n                    \"javascript/html5Shiv.js\"\r\n                ],\r\n                \"javascript/framework.min.js\": [\r\n                    \"javascript/jquery.js\",\r\n                    \"javascript/jquery-ui.js\",\r\n                    \"javascript/prettify.js\",\r\n                    \"javascript/prettify/run_prettify.js\"\r\n                ],\r\n                \"javascript/common.min.js\": [\r\n                    \"javascript/components/extended-format-date.js\",\r\n                    \"javascript/common.js\"\r\n                ]\r\n            }\r\n        },\r\n        \"stylesheets\": {\r\n            \"files\": {\r\n                \"stylesheets/common.min.css\": [\r\n                    \"stylesheets/common.css\",\r\n                    \"stylesheets/common-min780.css\",\r\n                    \"stylesheets/common-min1160.css\"\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net l'ensemble de fichier suivant :\r\n\r\n```\r\nassets/\r\n— stylesheets\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n— javascript\r\n—— javascript/modernizr.js\r\n—— javascript/yepnot.js\r\n—— javascript/html5Shiv.js\r\n—— javascript/jquery.js\r\n—— javascript/jquery-ui.js\r\n—— javascript/prettify.js\r\n—— javascript/prettify/run_prettify.js\r\n—— javascript/components/extended-format-date.js\r\n—— javascript/common.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\nvous obtiendrez les nouveau fichiers suivant :\r\n\r\n```\r\nassets/\r\n— stylesheets\r\n—— stylesheets/common.min.css\r\n— javascript\r\n—— javascript/boot.min.js\r\n—— javascript/framework.min.js\r\n—— javascript/common.min.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\n```\r\n\r\n#### Désactiver des Bundles ####\r\n\r\nIl est également possible de ne pas executer la minification au démarage d'un site web avec NodeAtlas avec les propriétés `enable: false` dans chaque type de Bundle.\r\n\r\n```js\r\n{\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"enable\": false,\r\n            \"files\": {\r\n                \"javascript/boot.min.js\": [\r\n                    \"javascript/modernizr.js\",\r\n                    \"javascript/yepnot.js\",\r\n                    \"javascript/html5Shiv.js\"\r\n                ],\r\n                \"javascript/framework.min.js\": [\r\n                    \"javascript/jquery.js\",\r\n                    \"javascript/jquery-ui.js\",\r\n                    \"javascript/prettify.js\",\r\n                    \"javascript/prettify/run_prettify.js\"\r\n                ],\r\n                \"javascript/common.min.js\": [\r\n                    \"javascript/components/extended-format-date.js\",\r\n                    \"javascript/common.js\"\r\n                ]\r\n            }\r\n        },\r\n        \"stylesheets\": {\r\n            \"enable\": false,\r\n            \"files\": {\r\n                \"stylesheets/common.min.css\": [\r\n                    \"stylesheets/common.css\",\r\n                    \"stylesheets/common-min780.css\",\r\n                    \"stylesheets/common-min1160.css\"\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### Bundles dans un fichier partagé ####\r\n\r\nAfin de ne pas ré-écrire une longue liste de configuration de Bundles dans un fichier `webconfig.json` à destination de votre environnement de développement et `webconfig.prod.json` à destination de votre environnement de production, vous pouvez mutaliser la déclaration des routes dans un fichier de votre choix. Par convention, c'est le fichier `bundles.json`. \r\n\r\nPar exemple :\r\n\r\nL'ensemble de fichier suivant\r\n\r\n```\r\nassets/\r\n— stylesheets\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n— javascript\r\n—— javascript/modernizr.js\r\n—— javascript/yepnot.js\r\n—— javascript/html5Shiv.js\r\n—— javascript/jquery.js\r\n—— javascript/jquery-ui.js\r\n—— javascript/prettify.js\r\n—— javascript/prettify/run_prettify.js\r\n—— javascript/components/extended-format-date.js\r\n—— javascript/common.js\r\ntemplates/\r\n— index.htm\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\navec `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"enable\": false,\r\n            \"files\": {\r\n                \"javascript/boot.min.js\": [\r\n                    \"javascript/modernizr.js\",\r\n                    \"javascript/yepnot.js\",\r\n                    \"javascript/html5Shiv.js\"\r\n                ],\r\n                \"javascript/framework.min.js\": [\r\n                    \"javascript/jquery.js\",\r\n                    \"javascript/jquery-ui.js\",\r\n                    \"javascript/prettify.js\",\r\n                    \"javascript/prettify/run_prettify.js\"\r\n                ],\r\n                \"javascript/common.min.js\": [\r\n                    \"javascript/components/extended-format-date.js\",\r\n                    \"javascript/common.js\"\r\n                ]\r\n            }\r\n        },\r\n        \"stylesheets\": {\r\n            \"enable\": false,\r\n            \"files\": {\r\n                \"stylesheets/common.min.css\": [\r\n                    \"stylesheets/common.css\",\r\n                    \"stylesheets/common-min780.css\",\r\n                    \"stylesheets/common-min1160.css\"\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net avec `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"bundles\": {\r\n        \"javascript\": {\r\n            \"enable\": false,\r\n            \"files\": {\r\n                \"javascript/boot.min.js\": [\r\n                    \"javascript/modernizr.js\",\r\n                    \"javascript/yepnot.js\",\r\n                    \"javascript/html5Shiv.js\"\r\n                ],\r\n                \"javascript/framework.min.js\": [\r\n                    \"javascript/jquery.js\",\r\n                    \"javascript/jquery-ui.js\",\r\n                    \"javascript/prettify.js\",\r\n                    \"javascript/prettify/run_prettify.js\"\r\n                ],\r\n                \"javascript/common.min.js\": [\r\n                    \"javascript/components/extended-format-date.js\",\r\n                    \"javascript/common.js\"\r\n                ]\r\n            }\r\n        },\r\n        \"stylesheets\": {\r\n            \"enable\": false,\r\n            \"files\": {\r\n                \"stylesheets/common.min.css\": [\r\n                    \"stylesheets/common.css\",\r\n                    \"stylesheets/common-min780.css\",\r\n                    \"stylesheets/common-min1160.css\"\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\npourrait devenir l'ensemble de fichier suivant \r\n\r\n```\r\nassets/\r\n— stylesheets\r\n—— common.css\r\n—— common-min780.css\r\n—— common-min1160.css\r\n— javascript\r\n—— javascript/modernizr.js\r\n—— javascript/yepnot.js\r\n—— javascript/html5Shiv.js\r\n—— javascript/jquery.js\r\n—— javascript/jquery-ui.js\r\n—— javascript/prettify.js\r\n—— javascript/prettify/run_prettify.js\r\n—— javascript/components/extended-format-date.js\r\n—— javascript/common.js\r\ntemplates/\r\n— index.htm\r\nbundles.json\r\nwebconfig.json\r\nwebconfig.prod.json\r\n```\r\n\r\navec `webconfig.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7777,\r\n    \"bundles\": \"bundles.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\navec `webconfig.prod.json`\r\n\r\n```json\r\n{\r\n    \"httpPort\": 7776,\r\n    \"httpHostname\": \"blog.lesieur.name\",\r\n    \"urlPort\": 80,\r\n    \"bundles\": \"bundles.json\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\net `bundles.json`\r\n\r\n```json\r\n{\r\n    \"javascript\": {\r\n        \"enable\": false,\r\n        \"files\": {\r\n            \"javascript/boot.min.js\": [\r\n                \"javascript/modernizr.js\",\r\n                \"javascript/yepnot.js\",\r\n                \"javascript/html5Shiv.js\"\r\n            ],\r\n            \"javascript/framework.min.js\": [\r\n                \"javascript/jquery.js\",\r\n                \"javascript/jquery-ui.js\",\r\n                \"javascript/prettify.js\",\r\n                \"javascript/prettify/run_prettify.js\"\r\n            ],\r\n            \"javascript/common.min.js\": [\r\n                \"javascript/components/extended-format-date.js\",\r\n                \"javascript/common.js\"\r\n            ]\r\n        }\r\n    },\r\n    \"stylesheets\": {\r\n        \"enable\": false,\r\n        \"files\": {\r\n            \"stylesheets/common.min.css\": [\r\n                \"stylesheets/common.css\",\r\n                \"stylesheets/common-min780.css\",\r\n                \"stylesheets/common-min1160.css\"\r\n            ]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : cette fois il est possible de désactiver les Bundles en ne les incluant pas dans le `webconfig` en question.*\r\n\r\n\r\n\r\n### Autoriser/Interdire les demandes GET/POST ###\r\n\r\nVous pouvez également manager la manière dont le serveur va répondre aux demandes GET/POST pour une page donnée. Par exemple, nous allons autoriser l'accès aux pages uniquement en GET pour tout le site et autoriser un POST pour une page seulement (et même lui interdire le GET).\r\n\r\n```js\r\n{\r\n    \"getSupport\": true,\r\n    \"postSupport\": false,\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/liste-des-membres/\": {\r\n            \"template\": \"members.htm\"\r\n        },\r\n        \"/rediger-commentaire/\": {\r\n            \"template\": \"write-com.htm\"\r\n        },\r\n        \"/commentaire-sauvegarde/\": {\r\n            \"template\": \"save-com.htm\",\r\n            \"getSupport\": false,\r\n            \"postSupport\": true\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*Note : Si rien n'est précisé,* ***getSupport*** *et* ***postSupport*** *sont à* ***true*** *au niveau global et par page.*\r\n\r\n\r\n\r\n### Changer les paramètres des Sessions ###\r\n\r\n#### Clé et Secret ####\r\n\r\nNodeAtlas gère lui-même les sessions stockées sur le serveur avec comme paramètres initiaux :\r\n\r\n- Key : `nodeatlas.sid`\r\n- Secret : `1234567890bépo`\r\n\r\nqui permettent à un client de rester connecté à travers les pages à un même ensemble de variable personnelles côtés serveur.\r\n\r\nIl est possible de modifier ses paramètres par défaut (et même obligatoire pour des sites en productions) avec les paramètres de `webconfig.json` suivant :\r\n\r\n```js\r\n{\r\n    sessionKey: \"clé personnelle\",\r\n    sessionSecret: \"secret personnel\"\r\n}\r\n```\r\n\r\nNodeAtlas utilise également un objes de stockage mémoire (MemoryStore) qui stoques les informations dans la RAM du serveur.\r\n\r\n#### Autres paramètres ####\r\n\r\nIl est possible de changer l'intégralité des paramètres des sessions (sauf le MemoryStore) en utilisant la configuration de `webconfig.json` suivante :\r\n\r\n```js\r\n{\r\n    \"session\": {\r\n        \"key\": \"clé personnelle\",\r\n        \"secret\": \"secret personnel\",\r\n        \"cookie\": { \r\n            \"path\": '/', \r\n            \"httpOnly\": true, \r\n            \"secure\": false, \r\n            \"maxAge\": null\r\n        },\r\n        ...,\r\n        ...,\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nL'intégralité de la configuration possible se trouve sur la documentation du module [express-session](https://github.com/expressjs/session).\r\n\r\n\r\n\r\n### Stockage externe des Sessions ###\r\n\r\nPar défaut, c'est NodeAtlas qui stocke les sessions serveurs dans la RAM du serveur par application. Cela ne permet pas de partager des sessions utilisateurs à travers plusieurs applications NodeAtlas (ou autre) et efface toutes les sessions en cours pour une application en cas de redémarrage de celle-ci.\r\n\r\nPour résoudre ce soucis, il convient de prendre en charge l'enregistrement des sessions via une base No SQL tel que `Redis` ou `MongoBD`.\r\n\r\nPour cela il suffit d'utiliser la fonction `setSessions` dans le fichier `controllers/common.js` de la [partie Back-end](#utiliser-nodeatlas-pour-faire-tourner-un-site-partie-back-end).\r\n\r\n#### Session gérées avec Redis ####\r\n\r\nImplémenter le code suivant dans `controllers/common.js` pour stocker vos sessions dans Redis en local.\r\n\r\n```\r\nvar website = {};\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    publics.loadModules = function (NA) {\r\n        NA.modules.RedisStore = require('connect-redis');\r\n\r\n        return NA;\r\n    };\r\n\r\n    publics.setSessions = function (NA, callback) {\r\n        var session = NA.modules.session,\r\n            RedisStore = NA.modules.RedisStore(session);\r\n        \r\n        NA.sessionStore = new RedisStore();\r\n\r\n        callback(NA);\r\n    };  \r\n\r\n}(website));\r\n\r\nexports.loadModules = website.loadModules;\r\nexports.setSessions = website.setSessions;\r\n```\r\n\r\nPlus d'informations sur [connect-redis](https://www.npmjs.org/package/connect-redis).\r\n\r\n\r\n#### Session gérées avec MongoDB ####\r\n\r\nImplémenter le code suivant dans `controllers/common.js` pour stocker vos sessions dans la database `sessions` d'une MongoDB locale.\r\n\r\n```\r\nvar website = {};\r\n\r\n(function (publics) {\r\n    \"use strict\";\r\n\r\n    publics.loadModules = function (NA) {\r\n        NA.modules.MongoStore = require('connect-mongo');\r\n\r\n        return NA;\r\n    };\r\n\r\n    publics.setSessions = function (NA, callback) {\r\n        var session = NA.modules.session,\r\n            MongoStore = NA.modules.MongoStore(session);\r\n        \r\n        NA.sessionStore = new MongoStore({\r\n            db: 'sessions'\r\n        });\r\n\r\n        callback(NA);\r\n    };  \r\n\r\n}(website));\r\n\r\nexports.loadModules = website.loadModules;\r\nexports.setSessions = website.setSessions;\r\n```\r\n\r\nPlus d'informations sur [connect-redis](https://www.npmjs.org/package/connect-mongo).\r\n\r\n\r\n\r\n### Changer les chevrons <% %> du moteur de template ###\r\n\r\nPar exemple, pour inclure une partie de fichier on utilise l'instruction ***<% include head.htm %>***. Il serait possible de le faire avec ***{{ include head.htm }}*** avec la configuration ci-dessous :\r\n\r\n```js\r\n{\r\n    \"templateEngineOpenPattern\": \"{{\",\r\n    \"templateEngineClosePattern\": \"}}\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPour tout savoir sur les possibilités du moteur de template consulter la documentation [ejs](https://github.com/visionmedia/ejs)\r\n\r\n*Note : Si rien n'est précisé,* ***templateEngineOpenPattern*** *et* ***templateEngineClosePattern*** *valent respectivement* ***<%*** *et* ***%>***.\r\n\r\n\r\n\r\n### Changer l'url final des hostname et port d'écoute ###\r\n\r\nIl est possible de générer une url de visite différente des paramètres d'écoutes demandés avec ***urlHostname*** et ***urlPort***. Par exemple on écoute la boucle local sur le port 80 car un script fait du Reverse Proxy depuis le port 7777 sur le 80 avec le module « http-proxy » comme ci-dessous :\r\n\r\n```js\r\n{\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"127.0.0.1\",\r\n    \"urlPort\": 80,\r\n    \"urlHostname\": \"localhost\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Générer les urls dynamiquement ###\r\n\r\n#### Les chemins relatifs en absolue ####\r\n\r\nIl est possible que les chemins créés à partir de votre url soient interprétés comme des sous-dossiers qui n'ont en réalité aucune existance réelle. Cela a pour conséquence de rendre l'adresse `media/images/example.jpg` initialement accessible depuis un template affiché à **http://localhost**` impossible à récupérer quand le template est affiché à **http://localhost/sub-directory/** (puisqu'il faudrait alors que notre chemin soit plutôt `../media/images/example.jpg`).\r\n\r\nPour ne plus avoir à se soucier de l'accès aux ressources peu importe l'url qui est demandée, il suffit de transformer toutes les urls relatives telles que :\r\n\r\n```\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheets/common.css\" />\r\n<!-- ... -->\r\n<img src=\"media/images/example.jpg\" />\r\n<!-- ... -->\r\n<script type=\"text/javascript\" src=\"javascript/common.js\"></script>\r\n```\r\n\r\nen urls absolues avec la variable `urlBasePath` comme ci-dessous :\r\n\r\n```\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"<%= urlBasePath %>stylesheets/common.css\" />\r\n<!-- ... -->\r\n<img src=\"<%= urlBasePath %>media/images/example.jpg\" />\r\n<!-- ... -->\r\n<script type=\"text/javascript\" src=\"<%= urlBasePath %>javascript/common.js\"></script>\r\n```\r\n\r\nÀ noter que dans le cas de la configuration suivante :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`urlBasePath` retourne `http://localhost/` alors que dans celle-ci :\r\n\r\n```js\r\n{\r\n    \"httpPort\": 7777,\r\n    \"urlRelativeSubPath\": \"/sub/folder\",\r\n    \"routes\": {\r\n        \"/\": {\r\n            \"template\": \"index.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`urlBasePath` retourne `http://localhost:7777/sub/folder/`.\r\n\r\n#### Les chemins des templates ####\r\n\r\nEn utilisant le webconfig suivant :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"/index.html\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/contact.html\": {\r\n            \"template\": \"contact.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nainsi que le template `index.htm` correspondant\r\n\r\n```html\r\n<!-- ... -->\r\n<a href=\"http://localhost/index.html\">Lien vers l'accueil</a>\r\n<a href=\"http://localhost/contact.html\">Lien pour nous contacter</a>\r\n<!-- ... -->\r\n```\r\n\r\nje serais obligé de changer mon lien dans le template si je change le port d'écoute ou si je change le chemin de l'url. Le changement de configuration suivant :\r\n\r\n```js\r\n{\r\n    \"httpPort\": 7777,\r\n    \"routes\": {\r\n        \"/home.html\": {\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"/contact-us.html\": {\r\n            \"template\": \"contact.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nme contraindrait à modifier le template précédent comme suit :\r\n\r\n```html\r\n<!-- ... -->\r\n<a href=\"http://localhost:7777/home.html\">Lien vers l'accueil</a>\r\n<a href=\"http://localhost:7777/contact-us.html\">Lien pour nous contacter</a>\r\n<!-- ... -->\r\n```\r\n\r\nIl est possible de solutionner ce problème en donnant une clé à un chemin précis et en déportant sont chemin dans la propriété `url`.\r\n\r\nAvec le webconfig suivant :\r\n\r\n```js\r\n{\r\n    \"routes\": {\r\n        \"index\": {\r\n            \"url\": \"/index.html\",\r\n            \"template\": \"index.htm\"\r\n        },\r\n        \"contact\": {\r\n            \"url\": \"/contact.html\",\r\n            \"template\": \"contact.htm\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nje peux à présent écrire le lien dans le template de manière dynamique :\r\n\r\n1. comme suit\r\n\r\n   ```html\r\n<!-- ... -->\r\n<a href=\"<%= urlBasePath %><%= webconfig.routes.home.url.slice(1) %>\">Lien vers l'accueil</a>\r\n<a href=\"<%= urlBasePath %><%= webconfig.routes.contact.url.slice(1) %>\">Lien pour nous contacter</a>\r\n<!-- ... -->\r\n```\r\n\r\n   *Note : `.slice(1)` permet de supprimer facilement le double `/` pour une url fonctionnelle.*\r\n\r\n2. ou comme suit\r\n\r\n   ```html\r\n<!-- ... -->\r\n<a href=\"<%= urlBasePath %>.<%= webconfig.routes.home.url %>\">Lien vers l'accueil</a>\r\n<a href=\"<%= urlBasePath %>.<%= webconfig.routes.contact.url %>\">Lien pour nous contacter</a>\r\n<!-- ... -->\r\n```\r\n\r\n   *Note : Cela donnerait par exemple `http://localhost/./home.html`, ce qui est une url fonctionnelle.*\r\n\r\n3. ou comme suit\r\n\r\n   ```html\r\n<!-- ... -->\r\n<a href=\"<%= urlBasePathSlice %><%= webconfig.routes.home.url %>\">Lien vers l'accueil</a>\r\n<a href=\"<%= urlBasePathSlice %><%= webconfig.routes.contact.url %>\">Lien pour nous contacter</a>\r\n<!-- ... -->\r\n```\r\n\r\n   *Note : `urlBasePathSlice` renvoyant `http://localhost` au lieu de  `http://localhost/` ou encore `http://localhost:7777/sub/folder` au lieu de `http://localhost:7777/sub/folder/`.*\r\n\r\n\r\n\r\n## Commandes de lancement ##\r\n\r\nLa façon la plus simple de lancer NodeAtlas est de se positionner dans le répertoire hébergeant votre site et de lancer la commande `\\> node </path/to/>node-atlas/node-atlas.js`. Cependant il existe des options de lancement pour faire bien plus que lancer le site.\r\n\r\nChacune des commandes qui vont suivre peut être couplée avec les autres de cette manière :\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --directory /hello-world/  --webconfig config.fr-fr.js --httpPort 80 --run\r\n```\r\n\r\n\r\n### --directory ###\r\n\r\nIl est possible de lancer NodeAtlas depuis un autre endroit que le dossier où est hébergé le site que vous souhaitez faire tourner. La commande `--directory` vous sera alors très utile.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --directory </path/to/your/website/directory/>\r\n```\r\n\r\n\r\n### --webconfig ###\r\n\r\nPar défaut, NodeAtlas va lire votre fichier `webconfig.json`. Il est possible qu'en plus de ce fichier vous ayez créé un autre fichier `webconfig.prod.json` dont le nom de domaine est différent. Ou encore un `webconfig.fr-fr.json` avec des urls et des variations dans une autre langue. Plutôt que de renommer vos fichiers en `webconfig.json` avant de lancer le site, précisez simplement votre autre nom de configuration. Dans l'exemple suivant, notre fichier sera `webconfig.alternatif.json`.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --webconfig webconfig.alternatif.json\r\n```\r\n\r\n\r\n\r\n### --run ###\r\n\r\nCette commande permet d'ouvrir votre navigateur à l'adresse sur laquelle le site va tourner. Très pratique quand vous ne vous souvenez plus du port pour votre version de développement. Cette commande ne sert à rien si elle est couplé avec `--generate` (voir plus loin).\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --run\r\n```\r\n\r\n\r\n\r\n### --httpPort ###\r\n\r\nVous n'allez peut être pas vous ennuyer à changer votre port d'écoute sur tous vos projets et parfois vous allez devoir travailler sur deux sites différents en même temps. Avec cette commande vous n'aurez pas besoin de couper vos sites alternativement pour libérer le port d'écoute, il suffira d'en choisir un au lancement.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --httpPort 7778\r\n```\r\n\r\n\r\n\r\n### --generate ###\r\n\r\nSi vous modifiez un élément dans votre fichier de variation commun ou même dans un de vos composants de template appelé sur plusieurs pages, vous n'allez pas recharger chaque page pour mettre à jour vos fichiers de sortie. Il suffira alors d'utiliser `--generate`.\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --generate\r\n```\r\n\r\n\r\n\r\n\r\n## NodeAtlas comme module npm ##\r\n\r\nSi vous lancez NodeAtlas via du code JavaScript, vous pouvez également configurer le lancement :\r\n\r\n*app.js*\r\n\r\n```javascript\r\nvar nodeAtlas = require(\"node-atlas\");\r\n\r\nnodeAtlas\r\n    .config({\r\n        directory: \"</path/to/your/website/directory/>\",\r\n        webconfig: \"webconfig.alternatif.json\",\r\n        run: true,\r\n        httpPort: 7778,\r\n        generate: true\r\n    })\r\n    .init();\r\n```\r\n\r\n```\r\n\\> node app.js\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## NodeAtlas comme simple serveur web ##\r\n\r\nSi NodeAtlas ne trouve pas le « webconfig.json » ou le `--webconfig` que vous lui aurez indiqué, il se lancera en mode « Simple Serveur Web » ou « Public ».\r\n\r\n**Ce mode est pratique pour tester très rapidement que NodeAtlas est correctement installé ou pour créer des petits exemples HTML qui ont besoin d'un serveur web pour fonctionner (retours AJAX, iframe embarquée, etc.).**\r\n\r\nPour bien comprendre ce que cela signifie : s'il existe un quelconque fichier dans le répertoire d'où NodeAtlas a été lancé, il sera renvoyé par requête HTTP si ont le réclame via son chemin d'accès.\r\n\r\nPar exemple, en lançant NodeAtlas dans le répertoire `site-hello-world`\r\n\r\n```\r\nsite-hello-world/\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\nen exécutant la commande \r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js\r\n```\r\n\r\nou même la commande\r\n\r\n```\r\n\\> node </path/to/>node-atlas/node-atlas.js --webconfig webconfig.not-exist.json\r\n```\r\n\r\nle serveur se lancera en mode « Simple Serveur Web » et les fichiers « http://localhost/webconfig.json » ou « http://localhost/templates/webconfig.htm » seront accessible tel que le navigateur pourrait les renvoyer en tant que simple serveur web.\r\n\r\n*Note : seul les commandes `--webconfig`, `--run`, `--directory` et `--httpPort` fonctionnent dans ce mode.*\r\n\r\n\r\n\r\n\r\n\r\n## Faire tourner NodeAtlas sur serveur ##\r\n\r\n### Dans un environnement Windows Server avec iisnode ###\r\n\r\nDans un environnement Windows Server 2013 avec IIS8 il faut :\r\n\r\n1. Installer l’[exécutable node.exe](http://nodejs.org/download/) capable d’exécuter du code JavaScript.\r\n2. Installer [le module IIS8 UrlRewrite](http://www.iis.net/downloads/microsoft/url-rewrite) pour mapper les pages exécutées à une Url de sortie.\r\n3. Installer [le module IIS8 issnode](https://github.com/tjanczuk/iisnode/downloads) pour lire des web.config et manager des site via IIS (Management de pool d’application, démarrage/arrêt de site, etc...).\r\n\r\n#### Créer une application ####\r\n\r\nDans IIS8, créez un Website et créez une Application.\r\n\r\nLe contenu de votre application sera celui du site mélangé à celui de NodeAtlas. Cela signifie donc que ceci :\r\n\r\n```\r\nnode-atlas/\r\n— node_modules/\r\n— languages/\r\n—— default.json\r\n— node-atlas.js\r\nsite-hello-world/\r\n— assets/\r\n— templates/\r\n—— index.htm\r\n— webconfig.json\r\n```\r\n\r\ndevient ceci :\r\n\r\n```\r\nsite-hello-world/\r\n— node_modules/\r\n— languages/\r\n—— default.json\r\n— assets/\r\n— templates/\r\n—— index.htm\r\n— node-atlas.js\r\n— webconfig.json\r\n```\r\n\r\nVous rajouterez à cet ensemble de fichiers, un fichier supplémentaire nommé `web.config` dont le contenu est le suivant :\r\n\r\n```xml\r\n<configuration>\r\n    <system.webServer>\r\n        <handlers>\r\n            <add name=\"iisnode\" path=\"node-atlas.js\" verb=\"*\" modules=\"iisnode\" />\r\n        </handlers>\r\n        <rewrite>\r\n            <rules>\r\n                <rule name=\"LogFile\" patternSyntax=\"ECMAScript\" stopProcessing=\"true\">\r\n                     <match url=\"^[a-zA-Z0-9_\\-]+\\.js\\.logs\\/\\d+\\.txt$\"/>\r\n                </rule>\r\n                <rule name=\"NodeInspector\" patternSyntax=\"ECMAScript\" stopProcessing=\"true\">                    \r\n                    <match url=\"^node-atlas.js\\/debug[\\/]?\" />\r\n                </rule>\r\n                <rule name=\"StaticContent\">\r\n                     <action type=\"Rewrite\" url=\"assets{REQUEST_URI}\"/>\r\n                </rule>\r\n                <rule name=\"DynamicContent\">\r\n                     <conditions>\r\n                          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"True\"/>\r\n                     </conditions>\r\n                     <action type=\"Rewrite\" url=\"node-atlas.js\"/>\r\n                </rule>\r\n            </rules>\r\n        </rewrite>\r\n\r\n    </system.webServer>\r\n</configuration>\r\n```\r\n\r\npour au final obtenir :\r\n\r\n```\r\nsite-hello-world/\r\n— node_modules/\r\n— languages/\r\n—— default.json\r\n— assets/\r\n— templates/\r\n—— index.htm\r\n— node-atlas.js\r\n— webconfig.json\r\n— web.config\r\n```\r\n\r\nIl ne vous restera plus qu'à cliquer sur « Browse <url-of-site> » dans votre panneau d'action IIS8. Vous pouvez dès lors manager votre site (Démarrage / Arrêt / Recyclage de Pool) comme pour n'importe quelle autre application IIS8.\r\n\r\n#### webconfig exemple ####\r\n\r\nUn webconfig exemple pour une production :\r\n\r\n```js\r\n{\r\n    \"urlPort\": 80,\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"www.example.fr\",\r\n    \"routes\": {\r\n        ...\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n### Dans un environnement Unix avec forever ###\r\n\r\nIl faut pour cela :\r\n\r\n1. Installer l’[exécutable node.exe](http://nodejs.org/download/) capable d’exécuter du code JavaScript.\r\n2. Installer le [CLI tool forever](https://github.com/nodejitsu/forever) pour manager vos sites en continue.\r\n3. Faire tourner en plus de vos sites un reverse-proxy pour que toutes vos applications tournent sur le port 80.\r\n\r\n\r\n#### Quelques commandes forever ####\r\n\r\nPous lancer un site en continue il faut utiliser la commande :\r\n\r\n```\r\n\\> forever start </path/to/>node-atlas/node-atlas.js --directory </path/to/your/website/directory/>\r\n```\r\n\r\nPour le stopper, il faut repérer son **uid** avec la commande `forever list` puis utiliser la commande :\r\n\r\n```\r\n\\> forever stop <uid>\r\n```\r\n\r\nou <uid> est l'**uid** du site qui tourne.\r\n\r\n\r\n#### webconfig exemple ####\r\n\r\nUn webconfig exemple pour une production :\r\n\r\n```js\r\n{\r\n    \"urlPort\": 80,\r\n    \"httpPort\": 7777,\r\n    \"httpHostname\": \"www.example.fr\",\r\n    \"routes\": {\r\n        ...\r\n    }\r\n}\r\n\r\n```\r\n\r\nIl vous faudra ensuite utiliser un reverse-proxy pour rendre votre site accessible sur le port 80.\r\n\r\n\r\n\r\n\r\n### Proxy ###\r\n\r\n#### Bouncy ####\r\n\r\nBouncy est un exemple de reverse-proxy que vous pouvez utiliser pour faire tourner divers sites NodeAtlas (avec d'autres types de site) ensemble sur le même port (le 80).\r\n\r\nVous pouvez par exemple :\r\n\r\n- lancer 3 applications Node.js sur les ports 7777, 7778 et 7779 avec forever,\r\n- et en plus lancer un server apache sur le port 81 \r\n\r\net rendre tous vos sites accessibles derrière des noms de domaines sur le port 80 avec Bouncy par exemple.\r\n\r\nVoici un exemple de configuration avec Bouncy :\r\n\r\n**global-server.js**\r\n\r\n```javascript\r\nvar bouncy = require('bouncy');\r\n\r\nvar server = bouncy(function (request, response, bounce) {\r\n    if (request.headers.host === 'beep.example.com') {\r\n        bounce(7777);\r\n    }\r\n    else if (request.headers.host === 'blup.example.com') {\r\n        bounce(7776);\r\n    }\r\n    else if (request.headers.host === 'boop.example.com') {\r\n        bounce(81);\r\n    }\r\n    else {\r\n        response.statusCode = 404;\r\n        response.end('no such host');\r\n    }\r\n});\r\n\r\nserver.listen(80);\r\n```\r\n\r\nque vous pouvez lancer avec :\r\n\r\n```\r\n\\> forever start </path/to/>global-server.js\r\n```\r\n\r\n[Plus d'informations sur Bouncy](https://github.com/substack/bouncy)\r\n\r\n\r\n\r\n\r\n\r\n## À propos de l'architecture de NodeAtlas ##\r\n\r\nNodeAtlas est fait de tel sorte que l'objet `NA` contienne l'intégralité des fonctions lui permettant de fonctionner. NodeAtlas délivre lui-même son objet dans les controllers via les méthodes utilisées en mode Back-end avec Node.js pour vous permettre de changer ponctuellement son comportement.\r\n\r\nTous les messages d'erreurs se trouvent dans `/languages/default.json`. Si vous souhaitez les modifier, il suffit de dupliquer le fichier `default.json` et de le renommer en `fr-fr.json`, et de modifier la langue de l'original.\r\n\r\nPour finir [l'appoche publics/privates de l'architecture est expliqué dans cette article](http://blog.lesieur.name/structurer-le-javascript-de-son-site-avec-ou-sans-framework/).","google":"UA-50163044-1","note":"Don't delete this file! It's used internally to help with page regeneration."}